/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 97);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(9);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMProperty = __webpack_require__(16);
var ReactDOMComponentFlags = __webpack_require__(69);

var invariant = __webpack_require__(1);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(20);


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(21);

var ReactCurrentOwner = __webpack_require__(13);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(123);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(68)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(200)();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__MemoryRouter__ = __webpack_require__(204);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__MemoryRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Prompt__ = __webpack_require__(206);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__Prompt__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Redirect__ = __webpack_require__(207);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__Redirect__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(95);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_3__Route__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(58);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_4__Router__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__StaticRouter__ = __webpack_require__(210);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_5__StaticRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Switch__ = __webpack_require__(211);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_6__Switch__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__matchPath__ = __webpack_require__(59);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_7__matchPath__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__withRouter__ = __webpack_require__(212);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_8__withRouter__["a"]; });



















/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(73);
var PooledClass = __webpack_require__(18);
var ReactFeatureFlags = __webpack_require__(74);
var ReactReconciler = __webpack_require__(22);
var Transaction = __webpack_require__(32);

var invariant = __webpack_require__(1);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(18);

var emptyFunction = __webpack_require__(9);
var warning = __webpack_require__(2);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(13);

var warning = __webpack_require__(2);
var canDefineProperty = __webpack_require__(29);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(64);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactBaseClasses = __webpack_require__(62);
var ReactChildren = __webpack_require__(98);
var ReactDOMFactories = __webpack_require__(102);
var ReactElement = __webpack_require__(17);
var ReactPropTypes = __webpack_require__(106);
var ReactVersion = __webpack_require__(108);

var createReactClass = __webpack_require__(109);
var onlyChild = __webpack_require__(111);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var lowPriorityWarning = __webpack_require__(38);
  var canDefineProperty = __webpack_require__(29);
  var ReactElementValidator = __webpack_require__(66);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(121);
var ReactInstrumentation = __webpack_require__(10);

var warning = __webpack_require__(2);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(46);
var setInnerHTML = __webpack_require__(34);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(47);
var setTextContent = __webpack_require__(78);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(25);
var EventPluginUtils = __webpack_require__(40);

var accumulateInto = __webpack_require__(70);
var forEachAccumulated = __webpack_require__(71);
var warning = __webpack_require__(2);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var EventPluginRegistry = __webpack_require__(31);
var EventPluginUtils = __webpack_require__(40);
var ReactErrorUtils = __webpack_require__(41);

var accumulateInto = __webpack_require__(70);
var forEachAccumulated = __webpack_require__(71);
var invariant = __webpack_require__(1);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }
};

module.exports = EventPluginHub;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(15);

var getEventTarget = __webpack_require__(42);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};

var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};

var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
};

var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
};

var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};

var parsePath = exports.parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var createPath = exports.createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;


  var path = pathname || '/';

  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

  return path;
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);
var ViewportMetrics = __webpack_require__(77);

var getEventModifierState = __webpack_require__(44);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var DOMNamespaces = __webpack_require__(46);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(47);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(31);
var ReactEventEmitterMixin = __webpack_require__(147);
var ViewportMetrics = __webpack_require__(77);

var getVendorPrefixedEventName = __webpack_require__(148);
var isEventSupported = __webpack_require__(43);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactErrorUtils = __webpack_require__(41);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(23);
var Danger = __webpack_require__(132);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(10);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(47);
var setInnerHTML = __webpack_require__(34);
var setTextContent = __webpack_require__(78);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypesSecret = __webpack_require__(82);
var propTypesFactory = __webpack_require__(67);

var React = __webpack_require__(20);
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(13);
var ReactInstanceMap = __webpack_require__(27);
var ReactInstrumentation = __webpack_require__(10);
var ReactUpdates = __webpack_require__(14);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyFunction = __webpack_require__(9);
var warning = __webpack_require__(2);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.locationsAreEqual = exports.createLocation = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _resolvePathname = __webpack_require__(202);

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = __webpack_require__(203);

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _PathUtils = __webpack_require__(28);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;
  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = (0, _PathUtils.parsePath)(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);

    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
};

var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

    prompt = nextPrompt;

    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);

    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

exports.default = createTransitionManager;

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * The public API for putting history on context.
 */

var Router = function (_React$Component) {
  _inherits(Router, _React$Component);

  function Router() {
    var _temp, _this, _ret;

    _classCallCheck(this, Router);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props.history.location.pathname)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Router.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        history: this.props.history,
        route: {
          location: this.props.history.location,
          match: this.state.match
        }
      })
    };
  };

  Router.prototype.computeMatch = function computeMatch(pathname) {
    return {
      path: '/',
      url: '/',
      params: {},
      isExact: pathname === '/'
    };
  };

  Router.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        history = _props.history;


    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(children == null || __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(children) === 1, 'A <Router> may have only one child element');

    // Do this here so we can setState when a <Redirect> changes the
    // location in componentWillMount. This happens e.g. when doing
    // server rendering using a <StaticRouter>.
    this.unlisten = history.listen(function () {
      _this2.setState({
        match: _this2.computeMatch(history.location.pathname)
      });
    });
  };

  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(this.props.history === nextProps.history, 'You cannot change <Router history>');
  };

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  Router.prototype.render = function render() {
    var children = this.props.children;

    return children ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(children) : null;
  };

  return Router;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);

Router.propTypes = {
  history: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
  children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node
};
Router.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
};
Router.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Router);

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__);


var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compilePath = function compilePath(pattern, options) {
  var cacheKey = '' + options.end + options.strict;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

  if (cache[pattern]) return cache[pattern];

  var keys = [];
  var re = __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default()(pattern, keys, options);
  var compiledPattern = { re: re, keys: keys };

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledPattern;
    cacheCount++;
  }

  return compiledPattern;
};

/**
 * Public API for matching a URL pathname to a path pattern.
 */
var matchPath = function matchPath(pathname) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof options === 'string') options = { path: options };

  var _options = options,
      _options$path = _options.path,
      path = _options$path === undefined ? '/' : _options$path,
      _options$exact = _options.exact,
      exact = _options$exact === undefined ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === undefined ? false : _options$strict;

  var _compilePath = compilePath(path, { end: exact, strict: strict }),
      re = _compilePath.re,
      keys = _compilePath.keys;

  var match = re.exec(pathname);

  if (!match) return null;

  var url = match[0],
      values = match.slice(1);

  var isExact = pathname === url;

  if (exact && !isExact) return null;

  return {
    path: path, // the path pattern used to match
    url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL
    isExact: isExact, // whether or not we matched exactly
    params: keys.reduce(function (memo, key, index) {
      memo[key.name] = values[index];
      return memo;
    }, {})
  };
};

/* harmony default export */ __webpack_exports__["a"] = (matchPath);

/***/ }),
/* 60 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			memo[selector] = fn.call(this, selector);
		}

		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(228);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(21),
    _assign = __webpack_require__(4);

var ReactNoopUpdateQueue = __webpack_require__(63);

var canDefineProperty = __webpack_require__(29);
var emptyObject = __webpack_require__(30);
var invariant = __webpack_require__(1);
var lowPriorityWarning = __webpack_require__(38);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(13);
var ReactComponentTreeHook = __webpack_require__(8);
var ReactElement = __webpack_require__(17);

var checkReactTypeSpec = __webpack_require__(103);

var canDefineProperty = __webpack_require__(29);
var getIteratorFn = __webpack_require__(65);
var warning = __webpack_require__(2);
var lowPriorityWarning = __webpack_require__(38);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = __webpack_require__(68);
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(9);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactPropTypesSecret = __webpack_require__(39);
var checkPropTypes = __webpack_require__(107);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(18);

var invariant = __webpack_require__(1);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  delete inst._wrapperState.valueTracker;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function (node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },


  track: function (inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function () {
        return descriptor.get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function (inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function (inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var escapeTextContentForBrowser = __webpack_require__(35);
var setInnerHTML = __webpack_require__(34);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(10);

var quoteAttributeValueForBrowser = __webpack_require__(146);
var warning = __webpack_require__(2);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(48);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(14);

var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var ReactCompositeComponent = __webpack_require__(154);
var ReactEmptyComponent = __webpack_require__(86);
var ReactHostComponent = __webpack_require__(87);

var getNextDebugID = __webpack_require__(157);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(20);

var invariant = __webpack_require__(1);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(13);
var REACT_ELEMENT_TYPE = __webpack_require__(158);

var getIteratorFn = __webpack_require__(159);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(52);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(9);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(171);

var containsNode = __webpack_require__(173);
var focusNode = __webpack_require__(79);
var getActiveElement = __webpack_require__(91);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(23);
var DOMProperty = __webpack_require__(16);
var React = __webpack_require__(20);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactCurrentOwner = __webpack_require__(13);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMContainerInfo = __webpack_require__(188);
var ReactDOMFeatureFlags = __webpack_require__(189);
var ReactFeatureFlags = __webpack_require__(74);
var ReactInstanceMap = __webpack_require__(27);
var ReactInstrumentation = __webpack_require__(10);
var ReactMarkupChecksum = __webpack_require__(190);
var ReactReconciler = __webpack_require__(22);
var ReactUpdateQueue = __webpack_require__(53);
var ReactUpdates = __webpack_require__(14);

var emptyObject = __webpack_require__(30);
var instantiateReactComponent = __webpack_require__(84);
var invariant = __webpack_require__(1);
var setInnerHTML = __webpack_require__(34);
var shouldUpdateReactComponent = __webpack_require__(51);
var warning = __webpack_require__(2);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactNodeTypes = __webpack_require__(85);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};

var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};

var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = exports.supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

  return window.history && 'pushState' in window.history;
};

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__matchPath__ = __webpack_require__(59);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * The public API for matching a single path and rendering.
 */

var Route = function (_React$Component) {
  _inherits(Route, _React$Component);

  function Route() {
    var _temp, _this, _ret;

    _classCallCheck(this, Route);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props, _this.context.router)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Route.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        route: {
          location: this.props.location || this.context.router.route.location,
          match: this.state.match
        }
      })
    };
  };

  Route.prototype.computeMatch = function computeMatch(_ref, _ref2) {
    var computedMatch = _ref.computedMatch,
        location = _ref.location,
        path = _ref.path,
        strict = _ref.strict,
        exact = _ref.exact;
    var route = _ref2.route;

    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

    var pathname = (location || route.location).pathname;

    return path ? Object(__WEBPACK_IMPORTED_MODULE_3__matchPath__["a" /* default */])(pathname, { path: path, strict: strict, exact: exact }) : route.match;
  };

  Route.prototype.componentWillMount = function componentWillMount() {
    var _props = this.props,
        component = _props.component,
        render = _props.render,
        children = _props.children;


    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(component && render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored');

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(component && children), 'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored');

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(render && children), 'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored');
  };

  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

    this.setState({
      match: this.computeMatch(nextProps, nextContext.router)
    });
  };

  Route.prototype.render = function render() {
    var match = this.state.match;
    var _props2 = this.props,
        children = _props2.children,
        component = _props2.component,
        render = _props2.render;
    var _context$router = this.context.router,
        history = _context$router.history,
        route = _context$router.route,
        staticContext = _context$router.staticContext;

    var location = this.props.location || route.location;
    var props = { match: match, location: location, history: history, staticContext: staticContext };

    return component ? // component prop gets first priority, only called if there's a match
    match ? __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(component, props) : null : render ? // render prop is next, only called if there's a match
    match ? render(props) : null : children ? // children come last, always called
    typeof children === 'function' ? children(props) : !Array.isArray(children) || children.length ? // Preact defaults to empty children array
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.Children.only(children) : null : null;
  };

  return Route;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

Route.propTypes = {
  computedMatch: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object, // private, from <Switch>
  path: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
  exact: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.bool,
  strict: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.bool,
  component: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  render: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node]),
  location: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object
};
Route.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object.isRequired,
    route: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object.isRequired,
    staticContext: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object
  })
};
Route.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object.isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Route);

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var isModifiedEvent = function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
};

/**
 * The public API for rendering a history-aware <a>.
 */

var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link() {
    var _temp, _this, _ret;

    _classCallCheck(this, Link);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
      if (_this.props.onClick) _this.props.onClick(event);

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && // ignore right clicks
      !_this.props.target && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();

          var history = _this.context.router.history;
          var _this$props = _this.props,
              replace = _this$props.replace,
              to = _this$props.to;


          if (replace) {
            history.replace(to);
          } else {
            history.push(to);
          }
        }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Link.prototype.render = function render() {
    var _props = this.props,
        replace = _props.replace,
        to = _props.to,
        props = _objectWithoutProperties(_props, ['replace', 'to']); // eslint-disable-line no-unused-vars

    var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);

    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('a', _extends({}, props, { onClick: this.handleClick, href: href }));
  };

  return Link;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Link.propTypes = {
  onClick: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  target: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object]).isRequired
};
Link.defaultProps = {
  replace: false
};
Link.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      createHref: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired
  }).isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Link);

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(7);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(112);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactRouterDom = __webpack_require__(198);

__webpack_require__(226);

var _App = __webpack_require__(229);

var _App2 = _interopRequireDefault(_App);

var _registerServiceWorker = __webpack_require__(240);

var _registerServiceWorker2 = _interopRequireDefault(_registerServiceWorker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_reactDom2.default.render(_react2.default.createElement(
    _reactRouterDom.BrowserRouter,
    null,
    _react2.default.createElement(_App2.default, null)
), document.getElementById('root'));
(0, _registerServiceWorker2.default)();

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(99);
var ReactElement = __webpack_require__(17);

var emptyFunction = __webpack_require__(9);
var traverseAllChildren = __webpack_require__(100);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(21);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(21);

var ReactCurrentOwner = __webpack_require__(13);
var REACT_ELEMENT_TYPE = __webpack_require__(64);

var getIteratorFn = __webpack_require__(65);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(101);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(17);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(66);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(21);

var ReactPropTypeLocationNames = __webpack_require__(104);
var ReactPropTypesSecret = __webpack_require__(105);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(8);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(8);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(17),
    isValidElement = _require.isValidElement;

var factory = __webpack_require__(67);

module.exports = factory(isValidElement);

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



if (process.env.NODE_ENV !== 'production') {
  var invariant = __webpack_require__(1);
  var warning = __webpack_require__(2);
  var ReactPropTypesSecret = __webpack_require__(39);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(62),
    Component = _require.Component;

var _require2 = __webpack_require__(17),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = __webpack_require__(63);
var factory = __webpack_require__(110);

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyObject = __webpack_require__(30);
var _invariant = __webpack_require__(1);

if (process.env.NODE_ENV !== 'production') {
  var warning = __webpack_require__(2);
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isInherited = name in Constructor;
      _invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
        name
      );
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (process.env.NODE_ENV !== 'production') {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (process.env.NODE_ENV !== 'production') {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(21);

var ReactElement = __webpack_require__(17);

var invariant = __webpack_require__(1);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(113);


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(5);
var ReactDefaultInjection = __webpack_require__(114);
var ReactMount = __webpack_require__(92);
var ReactReconciler = __webpack_require__(22);
var ReactUpdates = __webpack_require__(14);
var ReactVersion = __webpack_require__(192);

var findDOMNode = __webpack_require__(193);
var getHostComponentFromComposite = __webpack_require__(93);
var renderSubtreeIntoContainer = __webpack_require__(194);
var warning = __webpack_require__(2);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = __webpack_require__(6);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = __webpack_require__(10);
  var ReactDOMUnknownPropertyHook = __webpack_require__(195);
  var ReactDOMNullInputValuePropHook = __webpack_require__(196);
  var ReactDOMInvalidARIAHook = __webpack_require__(197);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(115);
var BeforeInputEventPlugin = __webpack_require__(116);
var ChangeEventPlugin = __webpack_require__(120);
var DefaultEventPluginOrder = __webpack_require__(128);
var EnterLeaveEventPlugin = __webpack_require__(129);
var HTMLDOMPropertyConfig = __webpack_require__(130);
var ReactComponentBrowserEnvironment = __webpack_require__(131);
var ReactDOMComponent = __webpack_require__(137);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMEmptyComponent = __webpack_require__(163);
var ReactDOMTreeTraversal = __webpack_require__(164);
var ReactDOMTextComponent = __webpack_require__(165);
var ReactDefaultBatchingStrategy = __webpack_require__(166);
var ReactEventListener = __webpack_require__(167);
var ReactInjection = __webpack_require__(169);
var ReactReconcileTransaction = __webpack_require__(170);
var SVGDOMPropertyConfig = __webpack_require__(176);
var SelectEventPlugin = __webpack_require__(177);
var SimpleEventPlugin = __webpack_require__(178);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(24);
var ExecutionEnvironment = __webpack_require__(6);
var FallbackCompositionState = __webpack_require__(117);
var SyntheticCompositionEvent = __webpack_require__(118);
var SyntheticInputEvent = __webpack_require__(119);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(18);

var getTextContentAccessor = __webpack_require__(72);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(15);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(15);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(25);
var EventPropagators = __webpack_require__(24);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(14);
var SyntheticEvent = __webpack_require__(15);

var inputValueTracking = __webpack_require__(75);
var getEventTarget = __webpack_require__(42);
var isEventSupported = __webpack_require__(43);
var isTextInputElement = __webpack_require__(76);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(122);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(124);
var ReactHostOperationHistoryHook = __webpack_require__(125);
var ReactComponentTreeHook = __webpack_require__(8);
var ExecutionEnvironment = __webpack_require__(6);

var performanceNow = __webpack_require__(126);
var warning = __webpack_require__(2);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(127);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(6);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticMouseEvent = __webpack_require__(33);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(45);
var ReactDOMIDOperations = __webpack_require__(136);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(23);
var ExecutionEnvironment = __webpack_require__(6);

var createNodesFromMarkup = __webpack_require__(133);
var emptyFunction = __webpack_require__(9);
var invariant = __webpack_require__(1);

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(6);

var createArrayFromMixed = __webpack_require__(134);
var getMarkupWrap = __webpack_require__(135);
var invariant = __webpack_require__(1);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(1);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(6);

var invariant = __webpack_require__(1);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(45);
var ReactDOMComponentTree = __webpack_require__(5);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var AutoFocusUtils = __webpack_require__(138);
var CSSPropertyOperations = __webpack_require__(139);
var DOMLazyTree = __webpack_require__(23);
var DOMNamespaces = __webpack_require__(46);
var DOMProperty = __webpack_require__(16);
var DOMPropertyOperations = __webpack_require__(81);
var EventPluginHub = __webpack_require__(25);
var EventPluginRegistry = __webpack_require__(31);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactDOMComponentFlags = __webpack_require__(69);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMInput = __webpack_require__(149);
var ReactDOMOption = __webpack_require__(150);
var ReactDOMSelect = __webpack_require__(83);
var ReactDOMTextarea = __webpack_require__(151);
var ReactInstrumentation = __webpack_require__(10);
var ReactMultiChild = __webpack_require__(152);
var ReactServerRenderingTransaction = __webpack_require__(161);

var emptyFunction = __webpack_require__(9);
var escapeTextContentForBrowser = __webpack_require__(35);
var invariant = __webpack_require__(1);
var isEventSupported = __webpack_require__(43);
var shallowEqual = __webpack_require__(50);
var inputValueTracking = __webpack_require__(75);
var validateDOMNesting = __webpack_require__(54);
var warning = __webpack_require__(2);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

var focusNode = __webpack_require__(79);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(80);
var ExecutionEnvironment = __webpack_require__(6);
var ReactInstrumentation = __webpack_require__(10);

var camelizeStyleName = __webpack_require__(140);
var dangerousStyleValue = __webpack_require__(142);
var hyphenateStyleName = __webpack_require__(143);
var memoizeStringOnly = __webpack_require__(145);
var warning = __webpack_require__(2);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(141);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(80);
var warning = __webpack_require__(2);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(144);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(35);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(25);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMPropertyOperations = __webpack_require__(81);
var LinkedValueUtils = __webpack_require__(48);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(14);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var React = __webpack_require__(20);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMSelect = __webpack_require__(83);

var warning = __webpack_require__(2);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(48);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(14);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactComponentEnvironment = __webpack_require__(49);
var ReactInstanceMap = __webpack_require__(27);
var ReactInstrumentation = __webpack_require__(10);

var ReactCurrentOwner = __webpack_require__(13);
var ReactReconciler = __webpack_require__(22);
var ReactChildReconciler = __webpack_require__(153);

var emptyFunction = __webpack_require__(9);
var flattenChildren = __webpack_require__(160);
var invariant = __webpack_require__(1);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(22);

var instantiateReactComponent = __webpack_require__(84);
var KeyEscapeUtils = __webpack_require__(52);
var shouldUpdateReactComponent = __webpack_require__(51);
var traverseAllChildren = __webpack_require__(88);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(8);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(8);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var React = __webpack_require__(20);
var ReactComponentEnvironment = __webpack_require__(49);
var ReactCurrentOwner = __webpack_require__(13);
var ReactErrorUtils = __webpack_require__(41);
var ReactInstanceMap = __webpack_require__(27);
var ReactInstrumentation = __webpack_require__(10);
var ReactNodeTypes = __webpack_require__(85);
var ReactReconciler = __webpack_require__(22);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(155);
}

var emptyObject = __webpack_require__(30);
var invariant = __webpack_require__(1);
var shallowEqual = __webpack_require__(50);
var shouldUpdateReactComponent = __webpack_require__(51);
var warning = __webpack_require__(2);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypeLocationNames = __webpack_require__(156);
var ReactPropTypesSecret = __webpack_require__(82);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(8);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(8);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(52);
var traverseAllChildren = __webpack_require__(88);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(8);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(8);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(18);
var Transaction = __webpack_require__(32);
var ReactInstrumentation = __webpack_require__(10);
var ReactServerUpdateQueue = __webpack_require__(162);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(53);

var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(23);
var ReactDOMComponentTree = __webpack_require__(5);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMChildrenOperations = __webpack_require__(45);
var DOMLazyTree = __webpack_require__(23);
var ReactDOMComponentTree = __webpack_require__(5);

var escapeTextContentForBrowser = __webpack_require__(35);
var invariant = __webpack_require__(1);
var validateDOMNesting = __webpack_require__(54);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactUpdates = __webpack_require__(14);
var Transaction = __webpack_require__(32);

var emptyFunction = __webpack_require__(9);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventListener = __webpack_require__(89);
var ExecutionEnvironment = __webpack_require__(6);
var PooledClass = __webpack_require__(18);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(14);

var getEventTarget = __webpack_require__(42);
var getUnboundedScrollPosition = __webpack_require__(168);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var EventPluginHub = __webpack_require__(25);
var EventPluginUtils = __webpack_require__(40);
var ReactComponentEnvironment = __webpack_require__(49);
var ReactEmptyComponent = __webpack_require__(86);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactHostComponent = __webpack_require__(87);
var ReactUpdates = __webpack_require__(14);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(73);
var PooledClass = __webpack_require__(18);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactInputSelection = __webpack_require__(90);
var ReactInstrumentation = __webpack_require__(10);
var Transaction = __webpack_require__(32);
var ReactUpdateQueue = __webpack_require__(53);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var getNodeForCharacterOffset = __webpack_require__(172);
var getTextContentAccessor = __webpack_require__(72);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(174);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(175);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(24);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInputSelection = __webpack_require__(90);
var SyntheticEvent = __webpack_require__(15);

var getActiveElement = __webpack_require__(91);
var isTextInputElement = __webpack_require__(76);
var shallowEqual = __webpack_require__(50);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var EventListener = __webpack_require__(89);
var EventPropagators = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticAnimationEvent = __webpack_require__(179);
var SyntheticClipboardEvent = __webpack_require__(180);
var SyntheticEvent = __webpack_require__(15);
var SyntheticFocusEvent = __webpack_require__(181);
var SyntheticKeyboardEvent = __webpack_require__(182);
var SyntheticMouseEvent = __webpack_require__(33);
var SyntheticDragEvent = __webpack_require__(184);
var SyntheticTouchEvent = __webpack_require__(185);
var SyntheticTransitionEvent = __webpack_require__(186);
var SyntheticUIEvent = __webpack_require__(26);
var SyntheticWheelEvent = __webpack_require__(187);

var emptyFunction = __webpack_require__(9);
var getEventCharCode = __webpack_require__(55);
var invariant = __webpack_require__(1);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(15);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(15);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);

var getEventCharCode = __webpack_require__(55);
var getEventKey = __webpack_require__(183);
var getEventModifierState = __webpack_require__(44);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(55);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(33);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);

var getEventModifierState = __webpack_require__(44);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(15);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(33);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(54);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(191);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(13);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstanceMap = __webpack_require__(27);

var getHostComponentFromComposite = __webpack_require__(93);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactMount = __webpack_require__(92);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var EventPluginRegistry = __webpack_require__(31);
var ReactComponentTreeHook = __webpack_require__(8);

var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactComponentTreeHook = __webpack_require__(8);

var warning = __webpack_require__(2);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(16);
var ReactComponentTreeHook = __webpack_require__(8);

var warning = __webpack_require__(2);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__ = __webpack_require__(199);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserRouter", function() { return __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HashRouter__ = __webpack_require__(214);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "HashRouter", function() { return __WEBPACK_IMPORTED_MODULE_1__HashRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Link__ = __webpack_require__(96);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Link", function() { return __WEBPACK_IMPORTED_MODULE_2__Link__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MemoryRouter__ = __webpack_require__(216);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MemoryRouter", function() { return __WEBPACK_IMPORTED_MODULE_3__MemoryRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__NavLink__ = __webpack_require__(217);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NavLink", function() { return __WEBPACK_IMPORTED_MODULE_4__NavLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Prompt__ = __webpack_require__(218);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Prompt", function() { return __WEBPACK_IMPORTED_MODULE_5__Prompt__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Redirect__ = __webpack_require__(219);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Redirect", function() { return __WEBPACK_IMPORTED_MODULE_6__Redirect__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Route__ = __webpack_require__(220);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return __WEBPACK_IMPORTED_MODULE_7__Route__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Router__ = __webpack_require__(221);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return __WEBPACK_IMPORTED_MODULE_8__Router__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__StaticRouter__ = __webpack_require__(222);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StaticRouter", function() { return __WEBPACK_IMPORTED_MODULE_9__StaticRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Switch__ = __webpack_require__(223);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Switch", function() { return __WEBPACK_IMPORTED_MODULE_10__Switch__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__matchPath__ = __webpack_require__(224);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "matchPath", function() { return __WEBPACK_IMPORTED_MODULE_11__matchPath__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__withRouter__ = __webpack_require__(225);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "withRouter", function() { return __WEBPACK_IMPORTED_MODULE_12__withRouter__["a"]; });



























/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_history_createBrowserHistory__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_history_createBrowserHistory___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_history_createBrowserHistory__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react_router__ = __webpack_require__(12);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter = function (_React$Component) {
  _inherits(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, BrowserRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = __WEBPACK_IMPORTED_MODULE_2_history_createBrowserHistory___default()(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  BrowserRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_react_router__["e" /* Router */], { history: this.history, children: this.props.children });
  };

  return BrowserRouter;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

BrowserRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  forceRefresh: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  keyLength: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.number,
  children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node
};


/* harmony default export */ __webpack_exports__["a"] = (BrowserRouter);

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(9);
var invariant = __webpack_require__(1);
var ReactPropTypesSecret = __webpack_require__(39);

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    invariant(
      false,
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(37);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(56);

var _PathUtils = __webpack_require__(28);

var _createTransitionManager = __webpack_require__(57);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _DOMUtils = __webpack_require__(94);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

var getHistoryState = function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
};

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');

  var globalHistory = window.history;
  var canUseHistory = (0, _DOMUtils.supportsHistory)();
  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

  var _props$forceRefresh = props.forceRefresh,
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

  var getDOMLocation = function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;


    var path = pathname + search + hash;

    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

    return (0, _LocationUtils.createLocation)(path, state, key);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var handlePopState = function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

    handlePop(getDOMLocation(event.state));
  };

  var handleHashChange = function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  };

  var forceNextPop = false;

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allKeys.indexOf(fromLocation.key);

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];

  // Public interface

  var createHref = function createHref(location) {
    return basename + (0, _PathUtils.createPath)(location);
  };

  var push = function push(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.pushState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

          nextKeys.push(location.key);
          allKeys = nextKeys;

          setState({ action: action, location: location });
        }
      } else {
        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

        window.location.href = href;
      }
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.replaceState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);

          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

          setState({ action: action, location: location });
        }
      } else {
        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

        window.location.replace(href);
      }
    });
  };

  var go = function go(n) {
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createBrowserHistory;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsolute = function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
};

// About 1.5x faster than the two-arg version of Array#splice()
var spliceOne = function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }list.pop();
};

// This implementation is based heavily on node's url.parse
var resolvePathname = function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
};

module.exports = resolvePathname;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var valueEqual = function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
    return valueEqual(item, b[index]);
  });

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
};

exports.default = valueEqual;

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_history_createMemoryHistory__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_history_createMemoryHistory___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_history_createMemoryHistory__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Router__ = __webpack_require__(58);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter = function (_React$Component) {
  _inherits(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, MemoryRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = __WEBPACK_IMPORTED_MODULE_2_history_createMemoryHistory___default()(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  MemoryRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Router__["a" /* default */], { history: this.history, children: this.props.children });
  };

  return MemoryRouter;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

MemoryRouter.propTypes = {
  initialEntries: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.array,
  initialIndex: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.number,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  keyLength: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.number,
  children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node
};


/* harmony default export */ __webpack_exports__["a"] = (MemoryRouter);

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _PathUtils = __webpack_require__(28);

var _LocationUtils = __webpack_require__(56);

var _createTransitionManager = __webpack_require__(57);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clamp = function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
};

/**
 * Creates a history object that stores locations in memory.
 */
var createMemoryHistory = function createMemoryHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getUserConfirmation = props.getUserConfirmation,
      _props$initialEntries = props.initialEntries,
      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
      _props$initialIndex = props.initialIndex,
      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
  });

  // Public interface

  var createHref = _PathUtils.createPath;

  var push = function push(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;

      var nextEntries = history.entries.slice(0);
      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      history.entries[history.index] = location;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

    var action = 'POP';
    var location = history.entries[nextIndex];

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var canGo = function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  };

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return transitionManager.setPrompt(prompt);
  };

  var listen = function listen(listener) {
    return transitionManager.appendListener(listener);
  };

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createMemoryHistory;

/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */

var Prompt = function (_React$Component) {
  _inherits(Prompt, _React$Component);

  function Prompt() {
    _classCallCheck(this, Prompt);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Prompt.prototype.enable = function enable(message) {
    if (this.unblock) this.unblock();

    this.unblock = this.context.router.history.block(message);
  };

  Prompt.prototype.disable = function disable() {
    if (this.unblock) {
      this.unblock();
      this.unblock = null;
    }
  };

  Prompt.prototype.componentWillMount = function componentWillMount() {
    if (this.props.when) this.enable(this.props.message);
  };

  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.when) {
      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
    } else {
      this.disable();
    }
  };

  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
    this.disable();
  };

  Prompt.prototype.render = function render() {
    return null;
  };

  return Prompt;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Prompt.propTypes = {
  when: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  message: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string]).isRequired
};
Prompt.defaultProps = {
  when: true
};
Prompt.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      block: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired
  }).isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Prompt);

/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * The public API for updating the location programatically
 * with a component.
 */

var Redirect = function (_React$Component) {
  _inherits(Redirect, _React$Component);

  function Redirect() {
    _classCallCheck(this, Redirect);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Redirect.prototype.isStatic = function isStatic() {
    return this.context.router && this.context.router.staticContext;
  };

  Redirect.prototype.componentWillMount = function componentWillMount() {
    if (this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidMount = function componentDidMount() {
    if (!this.isStatic()) this.perform();
  };

  Redirect.prototype.perform = function perform() {
    var history = this.context.router.history;
    var _props = this.props,
        push = _props.push,
        to = _props.to;


    if (push) {
      history.push(to);
    } else {
      history.replace(to);
    }
  };

  Redirect.prototype.render = function render() {
    return null;
  };

  return Redirect;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Redirect.propTypes = {
  push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  from: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object])
};
Redirect.defaultProps = {
  push: false
};
Redirect.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired,
    staticContext: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
  }).isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Redirect);

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var isarray = __webpack_require__(209)

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp
module.exports.parse = parse
module.exports.compile = compile
module.exports.tokensToFunction = tokensToFunction
module.exports.tokensToRegExp = tokensToRegExp

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g')

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = []
  var key = 0
  var index = 0
  var path = ''
  var defaultDelimiter = options && options.delimiter || '/'
  var res

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0]
    var escaped = res[1]
    var offset = res.index
    path += str.slice(index, offset)
    index = offset + m.length

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1]
      continue
    }

    var next = str[index]
    var prefix = res[2]
    var name = res[3]
    var capture = res[4]
    var group = res[5]
    var modifier = res[6]
    var asterisk = res[7]

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path)
      path = ''
    }

    var partial = prefix != null && next != null && next !== prefix
    var repeat = modifier === '+' || modifier === '*'
    var optional = modifier === '?' || modifier === '*'
    var delimiter = res[2] || defaultDelimiter
    var pattern = capture || group

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    })
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index)
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path)
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length)

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
    }
  }

  return function (obj, opts) {
    var path = ''
    var data = obj || {}
    var options = opts || {}
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i]

      if (typeof token === 'string') {
        path += token

        continue
      }

      var value = data[token.name]
      var segment

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j])

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g)

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      })
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = []

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source)
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  var strict = options.strict
  var end = options.end !== false
  var route = ''

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]

    if (typeof token === 'string') {
      route += escapeString(token)
    } else {
      var prefix = escapeString(token.prefix)
      var capture = '(?:' + token.pattern + ')'

      keys.push(token)

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*'
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?'
        } else {
          capture = prefix + '(' + capture + ')?'
        }
      } else {
        capture = prefix + '(' + capture + ')'
      }

      route += capture
    }
  }

  var delimiter = escapeString(options.delimiter || '/')
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
  }

  if (end) {
    route += '$'
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}


/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_invariant__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_PathUtils__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_PathUtils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_history_PathUtils__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(58);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var normalizeLocation = function normalizeLocation(object) {
  var _object$pathname = object.pathname,
      pathname = _object$pathname === undefined ? '/' : _object$pathname,
      _object$search = object.search,
      search = _object$search === undefined ? '' : _object$search,
      _object$hash = object.hash,
      hash = _object$hash === undefined ? '' : _object$hash;


  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var addBasename = function addBasename(basename, location) {
  if (!basename) return location;

  return _extends({}, location, {
    pathname: Object(__WEBPACK_IMPORTED_MODULE_3_history_PathUtils__["addLeadingSlash"])(basename) + location.pathname
  });
};

var stripBasename = function stripBasename(basename, location) {
  if (!basename) return location;

  var base = Object(__WEBPACK_IMPORTED_MODULE_3_history_PathUtils__["addLeadingSlash"])(basename);

  if (location.pathname.indexOf(base) !== 0) return location;

  return _extends({}, location, {
    pathname: location.pathname.substr(base.length)
  });
};

var createLocation = function createLocation(location) {
  return typeof location === 'string' ? Object(__WEBPACK_IMPORTED_MODULE_3_history_PathUtils__["parsePath"])(location) : normalizeLocation(location);
};

var createURL = function createURL(location) {
  return typeof location === 'string' ? location : Object(__WEBPACK_IMPORTED_MODULE_3_history_PathUtils__["createPath"])(location);
};

var staticHandler = function staticHandler(methodName) {
  return function () {
    __WEBPACK_IMPORTED_MODULE_0_invariant___default()(false, 'You cannot %s with <StaticRouter>', methodName);
  };
};

var noop = function noop() {};

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

var StaticRouter = function (_React$Component) {
  _inherits(StaticRouter, _React$Component);

  function StaticRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, StaticRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
      return Object(__WEBPACK_IMPORTED_MODULE_3_history_PathUtils__["addLeadingSlash"])(_this.props.basename + createURL(path));
    }, _this.handlePush = function (location) {
      var _this$props = _this.props,
          basename = _this$props.basename,
          context = _this$props.context;

      context.action = 'PUSH';
      context.location = addBasename(basename, createLocation(location));
      context.url = createURL(context.location);
    }, _this.handleReplace = function (location) {
      var _this$props2 = _this.props,
          basename = _this$props2.basename,
          context = _this$props2.context;

      context.action = 'REPLACE';
      context.location = addBasename(basename, createLocation(location));
      context.url = createURL(context.location);
    }, _this.handleListen = function () {
      return noop;
    }, _this.handleBlock = function () {
      return noop;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  StaticRouter.prototype.getChildContext = function getChildContext() {
    return {
      router: {
        staticContext: this.props.context
      }
    };
  };

  StaticRouter.prototype.render = function render() {
    var _props = this.props,
        basename = _props.basename,
        context = _props.context,
        location = _props.location,
        props = _objectWithoutProperties(_props, ['basename', 'context', 'location']);

    var history = {
      createHref: this.createHref,
      action: 'POP',
      location: stripBasename(basename, createLocation(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler('go'),
      goBack: staticHandler('goBack'),
      goForward: staticHandler('goForward'),
      listen: this.handleListen,
      block: this.handleBlock
    };

    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], _extends({}, props, { history: history }));
  };

  return StaticRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

StaticRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
  context: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object.isRequired,
  location: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object])
};
StaticRouter.defaultProps = {
  basename: '',
  location: '/'
};
StaticRouter.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object.isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (StaticRouter);

/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__matchPath__ = __webpack_require__(59);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch = function (_React$Component) {
  _inherits(Switch, _React$Component);

  function Switch() {
    _classCallCheck(this, Switch);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

    __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };

  Switch.prototype.render = function render() {
    var route = this.context.router.route;
    var children = this.props.children;

    var location = this.props.location || route.location;

    var match = void 0,
        child = void 0;
    __WEBPACK_IMPORTED_MODULE_0_react___default.a.Children.forEach(children, function (element) {
      if (!__WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(element)) return;

      var _element$props = element.props,
          pathProp = _element$props.path,
          exact = _element$props.exact,
          strict = _element$props.strict,
          from = _element$props.from;

      var path = pathProp || from;

      if (match == null) {
        child = element;
        match = path ? Object(__WEBPACK_IMPORTED_MODULE_3__matchPath__["a" /* default */])(location.pathname, { path: path, exact: exact, strict: strict }) : route.match;
      }
    });

    return match ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(child, { location: location, computedMatch: match }) : null;
  };

  return Switch;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Switch.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    route: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object.isRequired
  }).isRequired
};
Switch.propTypes = {
  children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,
  location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
};


/* harmony default export */ __webpack_exports__["a"] = (Switch);

/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(95);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }






/**
 * A public higher-order component to access the imperative API
 */
var withRouter = function withRouter(Component) {
  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = _objectWithoutProperties(props, ['wrappedComponentRef']);

    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Route__["a" /* default */], { render: function render(routeComponentProps) {
        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Component, _extends({}, remainingProps, routeComponentProps, { ref: wrappedComponentRef }));
      } });
  };

  C.displayName = 'withRouter(' + (Component.displayName || Component.name) + ')';
  C.WrappedComponent = Component;
  C.propTypes = {
    wrappedComponentRef: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
  };

  return __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default()(C, Component);
};

/* harmony default export */ __webpack_exports__["a"] = (withRouter);

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */


var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    arguments: true,
    arity: true
};

var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
        var keys = Object.getOwnPropertyNames(sourceComponent);

        /* istanbul ignore else */
        if (isGetOwnPropertySymbolsAvailable) {
            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                try {
                    targetComponent[keys[i]] = sourceComponent[keys[i]];
                } catch (error) {

                }
            }
        }
    }

    return targetComponent;
};


/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_history_createHashHistory__ = __webpack_require__(215);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_history_createHashHistory___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_history_createHashHistory__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react_router__ = __webpack_require__(12);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter = function (_React$Component) {
  _inherits(HashRouter, _React$Component);

  function HashRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, HashRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = __WEBPACK_IMPORTED_MODULE_2_history_createHashHistory___default()(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  HashRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_react_router__["e" /* Router */], { history: this.history, children: this.props.children });
  };

  return HashRouter;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

HashRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  hashType: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOf(['hashbang', 'noslash', 'slash']),
  children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node
};


/* harmony default export */ __webpack_exports__["a"] = (HashRouter);

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(37);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(56);

var _PathUtils = __webpack_require__(28);

var _createTransitionManager = __webpack_require__(57);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _DOMUtils = __webpack_require__(94);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HashChangeEvent = 'hashchange';

var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: _PathUtils.stripLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  },
  slash: {
    encodePath: _PathUtils.addLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  }
};

var getHashPath = function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};

var pushHashPath = function pushHashPath(path) {
  return window.location.hash = path;
};

var replaceHashPath = function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');

  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};

var createHashHistory = function createHashHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');

  var globalHistory = window.history;
  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

  var _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$hashType = props.hashType,
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;


  var getDOMLocation = function getDOMLocation() {
    var path = decodePath(getHashPath());

    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

    return (0, _LocationUtils.createLocation)(path);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var forceNextPop = false;
  var ignorePath = null;

  var handleHashChange = function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;

      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;

      handlePop(location);
    }
  };

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  // Ensure the hash is encoded properly before doing anything else.
  var path = getHashPath();
  var encodedPath = encodePath(path);

  if (path !== encodedPath) replaceHashPath(encodedPath);

  var initialLocation = getDOMLocation();
  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

  // Public interface

  var createHref = function createHref(location) {
    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
  };

  var push = function push(path, state) {
    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);

        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

        nextPaths.push(path);
        allPaths = nextPaths;

        setState({ action: action, location: location });
      } else {
        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

        setState();
      }
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

      if (prevIndex !== -1) allPaths[prevIndex] = path;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createHashHistory;

/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["a"]; });


/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_router__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Link__ = __webpack_require__(96);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }






/**
 * A <Link> wrapper that knows if it's "active" or not.
 */
var NavLink = function NavLink(_ref) {
  var to = _ref.to,
      exact = _ref.exact,
      strict = _ref.strict,
      location = _ref.location,
      activeClassName = _ref.activeClassName,
      className = _ref.className,
      activeStyle = _ref.activeStyle,
      style = _ref.style,
      getIsActive = _ref.isActive,
      rest = _objectWithoutProperties(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive']);

  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_react_router__["d" /* Route */], {
    path: (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' ? to.pathname : to,
    exact: exact,
    strict: strict,
    location: location,
    children: function children(_ref2) {
      var location = _ref2.location,
          match = _ref2.match;

      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */], _extends({
        to: to,
        className: isActive ? [activeClassName, className].filter(function (i) {
          return i;
        }).join(' ') : className,
        style: isActive ? _extends({}, style, activeStyle) : style
      }, rest));
    }
  });
};

NavLink.propTypes = {
  to: __WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */].propTypes.to,
  exact: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  strict: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  activeClassName: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  className: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  activeStyle: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  style: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  isActive: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
};

NavLink.defaultProps = {
  activeClassName: 'active'
};

/* harmony default export */ __webpack_exports__["a"] = (NavLink);

/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["b"]; });


/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["c"]; });


/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["d"]; });


/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["e"]; });


/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["f"]; });


/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["g"]; });


/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["h"]; });


/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0_react_router__["i"]; });


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(227);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(61)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/autoprefixer-loader/index.js!./index.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/autoprefixer-loader/index.js!./index.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(60)(undefined);
// imports


// module
exports.push([module.i, "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: sans-serif;\r\n}\r\n", ""]);

// exports


/***/ }),
/* 228 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(7);

var _react2 = _interopRequireDefault(_react);

var _Realtor = __webpack_require__(230);

var _Realtor2 = _interopRequireDefault(_Realtor);

__webpack_require__(238);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

window.React = _react2.default;

var App = function (_Component) {
  _inherits(App, _Component);

  function App() {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
  }

  _createClass(App, [{
    key: 'render',


    /*
      componentDidMount() {
        return fetch('./realtors')
          .then(response => {
            if (response.status !== 200) {
              console.log('Looks like there was a problem. Status Code: ' +
                response.status);
              return;
            }
    
            // Examine the text in the response  
            response.json().then(data => {
              console.log(data);
              this.setState({ items: data.data });
            });
          }
          )
          .catch(function (err) {
            console.log('Fetch Error', err);
          });
      }
    */
    value: function render() {

      return _react2.default.createElement(
        'div',
        { className: 'App' },
        _react2.default.createElement(
          'div',
          { className: 'App-header' },
          _react2.default.createElement('img', { src: 'logo.svg', className: 'App-logo', alt: 'Hello' }),
          _react2.default.createElement(
            'h2',
            null,
            'Welcome to Keylo'
          )
        ),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_Realtor2.default, null)
        )
      );

      /*
        return (
        <div className="App">
          <div className="App-header">
            <img src="logo.svg" className="App-logo" alt="Hello" />
            <h2>Welcome to Keylo</h2>
          </div>
          <div>
            <ul><br/>
              {
                this.state.items.length ?
                  this.state.items.map(item => <li key={item.guid}>{item.photo ? <img src={item.photo}/> : <span>PHOTO</span>}{item.name}</li>)
                  : <p>Loading. . .</p>
              }
            </ul>
          </div>
        </div>
      );*/
    }
  }]);

  return App;
}(_react.Component);

exports.default = App;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(7);

var _react2 = _interopRequireDefault(_react);

var _RealtorList = __webpack_require__(231);

var _RealtorList2 = _interopRequireDefault(_RealtorList);

var _RealtorDetail = __webpack_require__(233);

var _RealtorDetail2 = _interopRequireDefault(_RealtorDetail);

__webpack_require__(235);

var _realtors = __webpack_require__(237);

var _realtors2 = _interopRequireDefault(_realtors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchBar = function (_Component) {
    _inherits(SearchBar, _Component);

    function SearchBar(props) {
        _classCallCheck(this, SearchBar);

        var _this = _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this, props));

        _this.handleFilterTextInputChange = _this.handleFilterTextInputChange.bind(_this);
        return _this;
    }

    _createClass(SearchBar, [{
        key: 'handleFilterTextInputChange',
        value: function handleFilterTextInputChange(e) {
            this.props.onFilterTextInput(e.target.value);
        }
    }, {
        key: 'handleInStockInputChange',
        value: function handleInStockInputChange(e) {
            this.props.onInStockInput(e.target.checked);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'form',
                { className: 'SearchBar' },
                _react2.default.createElement('input', {
                    type: 'text',
                    placeholder: 'Search...',
                    value: this.props.filterText,
                    onChange: this.handleFilterTextInputChange
                })
            );
        }
    }]);

    return SearchBar;
}(_react.Component);

var Pagination = function (_Component2) {
    _inherits(Pagination, _Component2);

    function Pagination(props) {
        _classCallCheck(this, Pagination);

        return _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));
    }

    _createClass(Pagination, [{
        key: 'render',
        value: function render() {

            return _react2.default.createElement(
                'div',
                { className: 'Pagination' },
                _react2.default.createElement(
                    'span',
                    null,
                    'Total Pages: ',
                    this.props.pages,
                    ' || Showing ',
                    this.props.first,
                    ' to ',
                    this.props.last,
                    ' of ',
                    this.props.total
                ),
                _react2.default.createElement(
                    'span',
                    { className: 'Page' },
                    '1'
                ),
                _react2.default.createElement(
                    'span',
                    { className: 'Page' },
                    '2'
                ),
                _react2.default.createElement(
                    'span',
                    { className: 'Page' },
                    '3'
                ),
                _react2.default.createElement(
                    'span',
                    { className: 'Page' },
                    '4'
                )
            );
        }
    }]);

    return Pagination;
}(_react.Component);

var Realtor = function (_Component3) {
    _inherits(Realtor, _Component3);

    function Realtor(props) {
        _classCallCheck(this, Realtor);

        var _this3 = _possibleConstructorReturn(this, (Realtor.__proto__ || Object.getPrototypeOf(Realtor)).call(this, props));

        _this3.state = {
            filterText: '',
            realtors: _realtors2.default,
            realtorsPerPage: 25,
            currentPage: 1,
            selectedRealtorData: null
        };

        _this3.realtorSelector = _this3.realtorSelector.bind(_this3);
        _this3.realtorClear = _this3.realtorClear.bind(_this3);
        _this3.handleFilterTextInput = _this3.handleFilterTextInput.bind(_this3);
        return _this3;
    }

    _createClass(Realtor, [{
        key: 'handleFilterTextInput',
        value: function handleFilterTextInput(filterText) {
            var _this4 = this;

            this.setState({
                filterText: filterText
            }, function () {
                console.log(_this4.state.filterText);
            });
        }
    }, {
        key: 'realtorSelector',
        value: function realtorSelector(guid) {
            var _this5 = this;

            fetch('./realtors/' + guid).then(function (response) {
                if (response.status !== 200) {
                    console.log('Looks like there was a problem. Status Code: ' + response.status);
                    return;
                }

                // Examine the text in the response  
                response.json().then(function (listings) {
                    _this5.setState({
                        selectedRealtorData: listings.data
                    });
                });
            }).catch(function (err) {
                console.log('Fetch Error', err);
            });
        }
    }, {
        key: 'realtorClear',
        value: function realtorClear() {
            this.setState({
                selectedRealtorData: null
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var rows = [];
            var filter = this.state.filterText.toLowerCase();
            this.state.realtors.forEach(function (realtor) {
                name = realtor.name.toLowerCase();
                if (name.indexOf(filter) !== -1) rows.push(realtor);
            });
            var total = rows.length;
            var first = (this.state.currentPage - 1) * this.state.realtorsPerPage + 1;
            var last = total;
            var pages = 1;
            if (rows.length > this.state.realtorsPerPage) {
                rows = rows.slice((this.state.currentPage - 1) * this.state.realtorsPerPage, (this.state.currentPage - 1) * this.state.realtorsPerPage + this.state.realtorsPerPage);
                last = (this.state.currentPage - 1) * this.state.realtorsPerPage + this.state.realtorsPerPage;
                pages = Math.ceil(total / this.state.realtorsPerPage);
            }

            return !this.state.selectedRealtorData ? _react2.default.createElement(
                'div',
                { className: 'RealtorContainer' },
                _react2.default.createElement(SearchBar, {
                    filterText: this.state.filterText,
                    onFilterTextInput: this.handleFilterTextInput }),
                _react2.default.createElement(_RealtorList2.default, {
                    realtors: rows,
                    currentPage: this.state.currentPage,
                    handler: this.realtorSelector }),
                _react2.default.createElement(Pagination, {
                    first: first,
                    last: last,
                    total: total,
                    pages: pages })
            ) : _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(_RealtorDetail2.default, {
                    listings: this.state.selectedRealtorData }),
                _react2.default.createElement('br', null),
                _react2.default.createElement(
                    'button',
                    { onClick: this.realtorClear },
                    'Back'
                )
            );
        }
    }]);

    return Realtor;
}(_react.Component);

exports.default = Realtor;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _RealtorRow = __webpack_require__(232);

var _RealtorRow2 = _interopRequireDefault(_RealtorRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RealtorList = function RealtorList(_ref) {
    var realtors = _ref.realtors,
        handler = _ref.handler;


    return React.createElement(
        "table",
        { className: "Table" },
        React.createElement(
            "thead",
            null,
            React.createElement(
                "tr",
                null,
                React.createElement(
                    "th",
                    { width: "50" },
                    "ID"
                ),
                React.createElement(
                    "th",
                    { width: "250" },
                    "Name"
                ),
                React.createElement(
                    "th",
                    null,
                    "Phone"
                ),
                React.createElement(
                    "th",
                    null,
                    "GUID"
                ),
                React.createElement(
                    "th",
                    null,
                    "Update At"
                )
            )
        ),
        React.createElement(
            "tbody",
            null,
            realtors.map(function (realtor, i) {
                return React.createElement(_RealtorRow2.default, _extends({ key: i
                }, realtor, { handler: handler }));
            })
        )
    );
};

exports.default = RealtorList;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var RealtorRow = exports.RealtorRow = function RealtorRow(_ref) {
    var id = _ref.id,
        name = _ref.name,
        guid = _ref.guid,
        individualid = _ref.individualid,
        phonetype1 = _ref.phonetype1,
        phonetype2 = _ref.phonetype2,
        phonetype3 = _ref.phonetype3,
        phonetype4 = _ref.phonetype4,
        phonetype5 = _ref.phonetype5,
        websitetype1 = _ref.websitetype1,
        websitetype2 = _ref.websitetype2,
        websitetype3 = _ref.websitetype3,
        websitetype4 = _ref.websitetype4,
        websitetype5 = _ref.websitetype5,
        email1 = _ref.email1,
        email2 = _ref.email2,
        email3 = _ref.email3,
        email4 = _ref.email4,
        photo = _ref.photo,
        position = _ref.position,
        permitfreetextemail = _ref.permitfreetextemail,
        firstname = _ref.firstname,
        lastname = _ref.lastname,
        corporationdisplaytypeid = _ref.corporationdisplaytypeid,
        permitshowlistinglink = _ref.permitshowlistinglink,
        active = _ref.active,
        created_at = _ref.created_at,
        updated_at = _ref.updated_at,
        handler = _ref.handler;

    return React.createElement(
        "tr",
        { className: "Row", onClick: function onClick() {
                return handler(guid);
            } },
        React.createElement(
            "td",
            null,
            id
        ),
        React.createElement(
            "td",
            null,
            name
        ),
        React.createElement(
            "td",
            null,
            React.createElement(
                "b",
                null,
                phonetype1
            ),
            "\xA0"
        ),
        React.createElement(
            "td",
            null,
            guid
        ),
        React.createElement(
            "td",
            null,
            updated_at
        )
    );
};

exports.default = RealtorRow;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _RealtorDetailRow = __webpack_require__(234);

var _RealtorDetailRow2 = _interopRequireDefault(_RealtorDetailRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RealtorDetail = function RealtorDetail(_ref) {
    var listings = _ref.listings;

    return React.createElement(
        "table",
        { className: "Table" },
        React.createElement(
            "thead",
            null,
            React.createElement(
                "tr",
                null,
                React.createElement(
                    "th",
                    null,
                    "Name"
                ),
                React.createElement(
                    "th",
                    null,
                    "MLSNumber"
                ),
                React.createElement(
                    "th",
                    null,
                    "Price"
                )
            )
        ),
        React.createElement(
            "tbody",
            null,
            listings.map(function (listing, i) {
                return React.createElement(_RealtorDetailRow2.default, _extends({ key: i
                }, listing));
            })
        )
    );
};

exports.default = RealtorDetail;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var RealtorDetailRow = exports.RealtorDetailRow = function RealtorDetailRow(_ref) {
    var name = _ref.name,
        mlsnumber = _ref.mlsnumber,
        price = _ref.price,
        handler = _ref.handler;

    return React.createElement(
        "tr",
        { className: "Row", onClick: handler },
        React.createElement(
            "td",
            null,
            name
        ),
        React.createElement(
            "td",
            null,
            React.createElement(
                "b",
                null,
                mlsnumber
            ),
            "\xA0"
        ),
        React.createElement(
            "td",
            null,
            price
        )
    );
};

exports.default = RealtorDetailRow;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(236);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(61)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/autoprefixer-loader/index.js!./Realtor.css", function() {
			var newContent = require("!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/autoprefixer-loader/index.js!./Realtor.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(60)(undefined);
// imports


// module
exports.push([module.i, ".Table {\r\n  width: 100%;\r\n  margin-top: 1.5em;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.RealtorContainer {\r\n  width: 80%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.SearchBar {\r\n  margin-top: 1.5em;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\nth {\r\n    text-align: center;\r\n    background-color: #61DAFB;\r\n    cursor: default;\r\n}\r\n\r\ntr:nth-child(even) {\r\n  background-color: #f0f0f0;   \r\n}\r\n\r\ntr:hover {\r\n  background-color: #61DAFB;\r\n  cursor: pointer;\r\n}\r\n\r\n.Pagination {\r\n  width: 80%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.Page {\r\n  text-align: left;\r\n  background-color: #A730FD;\r\n  position: relative;\r\n  width: 50px;\r\n  padding: 8px 16px;\r\n  float: left;\r\n}\r\n\r\n.Pages {\r\n  text-align: left;\r\n  position: relative;\r\n  float: left;\r\n}\r\n\r\n", ""]);

// exports


/***/ }),
/* 237 */
/***/ (function(module, exports) {

module.exports = [{"id":1,"name":"Duane R.F. Ritter","guid":"88385cd9-e0b6-4827-9b46-a23d9f9fe2d0","individualid":1479109,"phonetype1":"780-940-0202","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.ritterhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114864","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479109.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Duane R.F.","lastname":"Ritter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":2,"name":"Tony T. Estephan","guid":"4a58377c-4138-42b7-852d-1401b53e8e41","individualid":1486759,"phonetype1":"780-242-7412","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.ynottony.ca","websitetype2":"https://www.facebook.com/Tony-Estephan-Real-Estate-760882997395126/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398636080","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1486759.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tony","lastname":"Estephan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":3,"name":"Omar N. Najjar","guid":"5971af39-a997-4c14-bf43-51a911474846","individualid":1954049,"phonetype1":"780-655-6664","phonetype2":"","phonetype3":"","phonetype4":"780-458-1515","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602617","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Omar","lastname":"Najjar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":4,"name":"David M. Estephan","guid":"fda2ed87-e62e-496c-8284-a417291e3401","individualid":2019873,"phonetype1":"780-938-2515","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.estephangroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688848","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Estephan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":5,"name":"Michel Estephan","guid":"a5d408bb-4d84-49de-9dc3-fec5003b5de2","individualid":1477877,"phonetype1":"780-984-6784","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.estephangroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812080","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michel","lastname":"Estephan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":6,"name":"Sharon J. Banks","guid":"6ed06b08-9196-4f7f-b1ca-eb1b3fdd9383","individualid":1910904,"phonetype1":"780-782-7653","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.sharonsells.ca","websitetype2":"http://www.facebook.com/SharonBanksRealtor/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115340","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1222608.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sharon","lastname":"Banks","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":7,"name":"Anna M. Bayne","guid":"b2baed34-17d7-4218-8495-c16794999872","individualid":1904214,"phonetype1":"780-903-0242","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.kennedyrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119663","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anna","lastname":"Bayne","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":8,"name":"Denis L. Lamothe","guid":"0f8453bb-4891-440e-a608-90611366ae90","individualid":1478463,"phonetype1":"780-991-5085","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"http://www.denisanddoris.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601622","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478463.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Denis","lastname":"Lamothe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":9,"name":"Doug .. McIvor","guid":"72847b85-d02b-463b-9f7a-3c53eb2e353d","individualid":1478711,"phonetype1":"780-278-4701","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123153","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478711.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"McIvor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":10,"name":"Trevor J. Zuk","guid":"2451ff8e-285a-428f-86d6-b2242fb6e780","individualid":1479781,"phonetype1":"780-455-0777","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.trevorzuk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112195","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011790.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Trevor","lastname":"Zuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":11,"name":"Maya C. Day","guid":"6dd510be-d2f2-4776-a39a-563dc6269d6d","individualid":1477740,"phonetype1":"780-910-6986","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.mayaday.ca","websitetype2":"http://www.facebook.com/mayaday.ca","websitetype3":"","websitetype4":"https://twitter.com/mayaday","websitetype5":"","email1":"398759621","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477740.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Maya","lastname":"Day","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":12,"name":"Dwayne J. Horvath","guid":"a43be30f-7a21-4c6a-a104-7d75248fda33","individualid":1478202,"phonetype1":"780-445-8575","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.SellWell.ca","websitetype2":"https://www.facebook.com/SellWell.ca/","websitetype3":"https://ca.linkedin.com/in/dwayne-j-horvath-320a1126","websitetype4":"https://twitter.com/SellWell_ca","websitetype5":"","email1":"399770412","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478202.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dwayne","lastname":"Horvath","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":13,"name":"Yemi Adeniyi","guid":"44f200c8-7a7f-462f-8792-875f7fb526b0","individualid":2021875,"phonetype1":"780-554-9364","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120666","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Yemi","lastname":"Adeniyi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-10 23:54:07","updated_at":"2017-08-10 23:54:07"},{"id":14,"name":"Kristy D. Tillapaugh","guid":"fb6c2b8f-1274-40e7-9696-16635c6ef615","individualid":1646245,"phonetype1":"780-940-7604","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122422","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kristy","lastname":"Tillapaugh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:08:14","updated_at":"2017-08-11 00:08:14"},{"id":15,"name":"Damon T. Bunting","guid":"984f7823-bc97-4ebd-a3ed-2e4d42277972","individualid":1677039,"phonetype1":"780-887-7433","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.damonbunting.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114487","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Damon","lastname":"Bunting","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:08:14","updated_at":"2017-08-11 00:08:14"},{"id":16,"name":"Don McKay","guid":"dc3e3179-680d-439b-a9ff-d3b37603ccf4","individualid":1478712,"phonetype1":"780-993-7334","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"http://www.donmckay.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118178","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478712.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Don","lastname":"McKay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":17,"name":"Halina Palka","guid":"37d58cb0-6b6d-4422-a4de-91d56f03466a","individualid":1876502,"phonetype1":"780-717-1380","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602296","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Halina","lastname":"Palka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":18,"name":"Brian J. Trofimuk","guid":"4fd58d79-0a45-4112-86a9-8fc21f1309fb","individualid":1479539,"phonetype1":"780-951-7015","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.briantrofimuk.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112200","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010329.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Trofimuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":19,"name":"Nina Pronchuk","guid":"1234d8be-d439-406f-90f0-b2509dce2b1c","individualid":1633095,"phonetype1":"780-239-5090","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.allhomesinedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402712242","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nina","lastname":"Pronchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":20,"name":"Sarah M. York","guid":"1f707e4e-c7d6-4275-a09e-e7d799055a76","individualid":1998960,"phonetype1":"780-619-0407","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733766","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sarah","lastname":"York","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":21,"name":"Dwight Streu","guid":"b8324ce9-536c-4937-ac82-6a91ec82e093","individualid":1479415,"phonetype1":"780-462-5002","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.dwightstreu.com","websitetype2":"http://www.facebook.com/DwightStreuRealtor","websitetype3":"","websitetype4":"http://twitter.com/DwightStreu","websitetype5":"","email1":"397941388","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010243.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Dwight","lastname":"Streu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":22,"name":"Christina G. Reid","guid":"2177cda7-27d8-48ea-b3cc-e535acd9a64e","individualid":1959799,"phonetype1":"780-974-8263","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117462","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christina","lastname":"Reid","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":23,"name":"Jennifer Pretty","guid":"548800ce-2d34-470b-be09-06ef0779729c","individualid":1479039,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.jenniferpretty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361213","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Pretty","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":24,"name":"Jaswinder K. Longowal","guid":"fff5cdff-59a6-4fa9-abc3-4783a433bd67","individualid":1478562,"phonetype1":"780-993-0898","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114850","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jaswinder","lastname":"Longowal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":25,"name":"Petterson S. Lam","guid":"81851ad6-4d1d-4e33-b2ab-2cbc8e359197","individualid":1563407,"phonetype1":"780-242-1628","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601859","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Petterson","lastname":"Lam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":26,"name":"Christine L. Chorney","guid":"42ec83dd-afde-4cf1-bbd7-d2529bce4a85","individualid":1477617,"phonetype1":"780-267-3535","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.christinechorney.com","websitetype2":"https://www.facebook.com/christinechorney.edmontonrealtor/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396169049","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1116478.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christine","lastname":"Chorney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":27,"name":"Heather J. McSporran-Heil","guid":"25dd0785-5890-4b0b-b4f0-f6388d7dfccb","individualid":1478736,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.realestatesprucegrove.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401094932","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478736.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Heather","lastname":"McSporran-Heil","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":28,"name":"James A. McSporran","guid":"a1d2addc-ab4a-4d78-91c7-45b3a3a8234b","individualid":2015623,"phonetype1":"780-975-5869","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.realestatesprucegrove.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118740","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"McSporran","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:12","updated_at":"2017-08-11 00:10:12"},{"id":29,"name":"Travis L. Bannert","guid":"7ca47b54-db8f-42c1-9024-74a3e6dc61b9","individualid":1991368,"phonetype1":"780-720-8240","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.travisbannert.com/","websitetype2":"","websitetype3":"https://www.facebook.com/travisbannertsells/?ref=aymt_homepage_panel","websitetype4":"","websitetype5":"","email1":"398332086","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1274967.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Travis","lastname":"Bannert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":30,"name":"Mani Bagga","guid":"4bc0bc5e-31a8-4a3a-b7d9-e8b63bea4fb7","individualid":1477303,"phonetype1":"780-431-5615","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.manibagga.com","websitetype2":"https://www.facebook.com/MANI-BAGGA-REALTOR-REAL-ESTATE-RELOCATION-SPECIALIST-IN-EDMONTON-1613714035","websitetype3":"","websitetype4":"https://twitter.com/ManiBaggaRLP","websitetype5":"","email1":"398568263","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101683.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mani","lastname":"Bagga","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":31,"name":"Azra Bagga","guid":"0dcdf126-2ccd-454e-b367-a91090247c24","individualid":1566065,"phonetype1":"780-970-2972","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.manibagga.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601868","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Azra","lastname":"Bagga","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":32,"name":"Lance Joumblat","guid":"8b1e3a96-442c-420d-9128-c6f1ef4c822c","individualid":1726894,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602175","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lance","lastname":"Joumblat","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":33,"name":"Arminy D. Sveinsson","guid":"da52cede-54d4-42d1-8c6b-8ac6abff765e","individualid":1909075,"phonetype1":"780-986-4711","phonetype2":"","phonetype3":"","phonetype4":"780-986-6662","phonetype5":"","websitetype1":"http://www.arminysveinsson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114214","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1909075.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Arminy","lastname":"Sveinsson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":34,"name":"Kelly N. Rissling","guid":"1995aa7b-c4dd-4f6f-9d3e-1931e9d97c2d","individualid":1479107,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.kellyrissling.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829173","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Rissling","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":35,"name":"Deanne E. Miketon","guid":"84043dfc-4fa0-4d5b-9130-ba1d1bb03341","individualid":1659575,"phonetype1":"780-915-1634","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.deannesells.com","websitetype2":"https://www.facebook.com/deannemiketon/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398610042","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Deanne","lastname":"Miketon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":36,"name":"Loida Lumanlan","guid":"be47767a-94b0-4606-91be-8d76f6e4dda8","individualid":1478581,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.loidahomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110831","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Loida","lastname":"Lumanlan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":37,"name":"Greg J. Babski","guid":"f213c9df-e4ff-4250-9f60-7f571f43c3c6","individualid":1477300,"phonetype1":"780-913-7778","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601464","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101018.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Greg","lastname":"Babski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":38,"name":"Brent Deptuck","guid":"33d349d2-757c-401d-8a85-194b1ac0770a","individualid":2019605,"phonetype1":"780-965-3338","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://yegforme.ca","websitetype2":"https://www.facebook.com/yegforme/","websitetype3":"https://ca.linkedin.com/in/yegforme","websitetype4":"https://twitter.com/yegforme","websitetype5":"","email1":"398387404","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"Deptuck","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":39,"name":"Doris Y. Keung","guid":"ba441498-a892-46f0-96de-6a02972e6ac7","individualid":1478341,"phonetype1":"780-721-5033","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"http://www.denisanddoris.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601154","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478341.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Doris","lastname":"Keung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":40,"name":"Lorie F. MacGregor","guid":"8818873c-38f9-4e78-9e63-c5227a4e36a2","individualid":1603213,"phonetype1":"780-554-0802","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://loriemacgregor.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123617","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1603213.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lorie","lastname":"MacGregor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":41,"name":"Shelly M. Shumaker","guid":"55fb2e6f-7a45-4ebf-8b03-ddde2075b8e9","individualid":1992187,"phonetype1":"780-297-0901","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122115","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shelly","lastname":"Shumaker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":42,"name":"Terry J. Hovell","guid":"7b9bddb7-a57a-40d5-9ab7-ed4d1364ead8","individualid":1478206,"phonetype1":"780-970-8089","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.terryhovell.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400999177","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478206.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Terry","lastname":"Hovell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":43,"name":"Fan Yang","guid":"a63e5270-02f4-4128-86bf-12dd81093181","individualid":1857916,"phonetype1":"780-885-7077","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.laoyang.ca","websitetype2":"https://www.facebook.com/edmontonfanyang","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111901","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1857916.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Fan","lastname":"Yang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":44,"name":"Haijun Yan","guid":"bb935286-1aab-4c41-a0b9-7cbc43d7e1ef","individualid":1933357,"phonetype1":"780-937-9648","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398749732","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Haijun","lastname":"Yan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":45,"name":"Jarett C. Johnson","guid":"57f3c2c6-2515-4411-b55f-7adeb2f5ef9c","individualid":1641455,"phonetype1":"780-777-9703","phonetype2":"","phonetype3":"","phonetype4":"780-998-4313","phonetype5":"","websitetype1":"http://www.jarettjohnson.com","websitetype2":"","websitetype3":"https://ca.linkedin.com/in/jarett-johnson-12544057","websitetype4":"https://twitter.com/expertjarett","websitetype5":"","email1":"396262010","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1165003.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jarett","lastname":"Johnson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":46,"name":"George G. Erickson","guid":"1ef40c34-25cf-4568-a1e4-0c39ad9f282b","individualid":2012142,"phonetype1":"780-221-9378","phonetype2":"","phonetype3":"","phonetype4":"780-998-4313","phonetype5":"","websitetype1":"http://www.ericksonrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117103","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1293599.jpg","position":"Associate","permitfreetextemail":0,"firstname":"George","lastname":"Erickson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":47,"name":"Michael D. Melnychuk","guid":"300186bb-0b44-4016-91bf-84dfb60fa07a","individualid":1571048,"phonetype1":"780-803-7355","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.michaelsells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908886","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Melnychuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":48,"name":"Jovita M. Mendita","guid":"472594bc-a318-4bc1-a28f-402daedddb53","individualid":1478757,"phonetype1":"780-803-7355","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398577558","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jovita","lastname":"Mendita","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":49,"name":"Peter K. Kubiczek","guid":"478b867b-06d6-4234-8a02-bf3904d77c66","individualid":1478425,"phonetype1":"780-456-6300","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.kubiczekteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601327","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478425.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Kubiczek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":50,"name":"Mark A. Malcolm","guid":"f2fd951d-9091-436a-a30a-8dc1e5847d7a","individualid":1767622,"phonetype1":"780-951-6258","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.markmalcolm.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661878","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Malcolm","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":51,"name":"Audrey J. Donovan","guid":"4adbe28e-4590-41f9-92c2-fb7f92beca23","individualid":1477790,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.audreydonovan.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360889","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477790.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Audrey","lastname":"Donovan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":52,"name":"Chris Broadhurst","guid":"27be3ea6-8f34-4c0a-8764-1446dd555f2b","individualid":1477501,"phonetype1":"780-964-9780","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.chrisbroadhurst.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123372","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Broadhurst","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":53,"name":"Jason D. Hafso","guid":"255f0a03-d75c-42c0-bc51-f9e7eab0b0d4","individualid":1478086,"phonetype1":"780-964-7335","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://MyRealHome.com","websitetype2":"https://www.facebook.com/MyRealHomeYEG/","websitetype3":"https://ca.linkedin.com/in/jasonhafso","websitetype4":"https://twitter.com/jasonhafso","websitetype5":"","email1":"396118259","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478086.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Hafso","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":54,"name":"Marty Smayda","guid":"89a5ffb6-635a-43d8-bf0e-2615bc895a59","individualid":1479317,"phonetype1":"780-695-9030","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://ziomarty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396781471","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marty","lastname":"Smayda","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":55,"name":"Devota M. Donnelly","guid":"fd9071b1-969e-4f44-9e8f-1e97cd448433","individualid":1477788,"phonetype1":"780-995-7000","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397848980","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Devota","lastname":"Donnelly","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":56,"name":"Wai Yeung","guid":"de4c00a6-12e9-497b-9c43-5eeaa84f3990","individualid":1882834,"phonetype1":"780-709-4358","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.askwai.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398430372","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wai","lastname":"Yeung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":57,"name":"Maximilian D. Caravantes","guid":"08d27e2e-3e06-41d0-bd5d-ebf1153feaef","individualid":1477554,"phonetype1":"780-504-4068","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601646","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Maximilian","lastname":"Caravantes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":58,"name":"Carolyn Campbell","guid":"e5f1a7c4-31bb-4ef1-ad14-826d9d33f44f","individualid":1880846,"phonetype1":"780-218-8843","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.carolyncampbell.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121547","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1880846.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carolyn","lastname":"Campbell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":59,"name":"Craig Cherrett","guid":"00baafb6-56fc-49e4-9e6a-babd0c2635a8","individualid":2015933,"phonetype1":"780-690-3459","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.CapitalRegionHomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118775","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1297189.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Cherrett","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":60,"name":"Suzanne E. Godbout","guid":"23110c6f-b215-46a1-9056-df544813d70e","individualid":1478012,"phonetype1":"780-499-6900","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125258","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Suzanne","lastname":"Godbout","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":61,"name":"Sandra C. Bird","guid":"1bc8f3ff-554f-4d8b-88c7-db3105d287ca","individualid":1477401,"phonetype1":"780-903-6677","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/sandra.bird.7121","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397883327","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1115986.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandra","lastname":"Bird","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":62,"name":"Jean A. Sills","guid":"17058b44-8559-4524-9846-24053774494b","individualid":1479297,"phonetype1":"780-990-6262","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.jeansills.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125163","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010789.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jean","lastname":"Sills","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":63,"name":"Gordon L. Sills","guid":"a4d1aed8-4491-4b77-85a3-8dca5a2b5f95","individualid":1939235,"phonetype1":"780-441-5298","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398662015","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gordon","lastname":"Sills","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":64,"name":"Wally Fakhreddine","guid":"41cb40ce-bde4-4062-81d0-8bb5e5e73117","individualid":1546527,"phonetype1":"780-238-7384","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://topedmontonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396688186","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1145701.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Wally","lastname":"Fakhreddine","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":65,"name":"Daryl G. Fuhr","guid":"dd27a26a-2a00-4c40-83ec-f88df8cca0d0","individualid":1477958,"phonetype1":"780-242-7489","phonetype2":"","phonetype3":"","phonetype4":"780-452-6530","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402846799","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Daryl","lastname":"Fuhr","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":66,"name":"Jeanine G. Boutet Osborne","guid":"2c3a5b9e-c114-4dd5-934d-dd3a86fdc15f","individualid":1909851,"phonetype1":"780-916-9739","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.purrfect-properties.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117627","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1909851.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeanine","lastname":"Boutet Osborne","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":67,"name":"Frank A. Vanderbleek","guid":"96d9c702-9b8d-4442-94d9-f74a2c8ccceb","individualid":1479583,"phonetype1":"780-242-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.franklythebest.ca","websitetype2":"https://www.facebook.com/FrankVanderbleekroyallepage/","websitetype3":"https://ca.linkedin.com/in/frank-vanderbleek-86677844","websitetype4":"https://twitter.com/FrankvdBLEEK","websitetype5":"","email1":"400628483","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011925.gif","position":"Associate","permitfreetextemail":0,"firstname":"Frank","lastname":"Vanderbleek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":68,"name":"Rod F. Thompson","guid":"edf8e3ba-6938-4927-8b84-5be8ead371be","individualid":1615914,"phonetype1":"780-994-9998","phonetype2":"","phonetype3":"","phonetype4":"780-401-3446","phonetype5":"","websitetype1":"http://www.sellerinvite.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241769","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1615914.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Rod","lastname":"Thompson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":69,"name":"Reetam Chowdhury","guid":"9b3619f0-a08d-42b9-b657-b9f325cfec3e","individualid":1869861,"phonetype1":"780-953-2365","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.turnkey.today","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115794","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Reetam","lastname":"Chowdhury","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":70,"name":"Diana A. Nguy","guid":"3152f784-94b5-4989-8bb8-f44015c0b069","individualid":1478878,"phonetype1":"780-436-1162","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.diananguy.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601185","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010567.gif","position":"Associate","permitfreetextemail":0,"firstname":"Diana","lastname":"Nguy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":71,"name":"Angela S. Kostiuk","guid":"c6a27f4c-7d69-40a2-b27d-ae267a7bfc86","individualid":1932847,"phonetype1":"780-263-1584","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.bestedmontonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399828356","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Angela","lastname":"Kostiuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":72,"name":"Walter D. Diduck","guid":"8d4fba6a-fcc0-4b5b-9c99-94e85b79d7ac","individualid":1477774,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.walterdiduck.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111170","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477774.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Walter","lastname":"Diduck","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":73,"name":"Marc A. McMahon","guid":"5c019158-bc2a-4956-b81f-ba7186601c67","individualid":1525472,"phonetype1":"780-221-6997","phonetype2":"","phonetype3":"","phonetype4":"587-523-8578","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601779","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1138449.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Marc","lastname":"McMahon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":74,"name":"Amy Wolff","guid":"d7a11da3-edf7-481d-97c3-a291f3f31a83","individualid":2007063,"phonetype1":"780-940-4350","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116712","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amy","lastname":"Wolff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":75,"name":"Bryce Willson","guid":"75f7aee0-ae84-4202-aa88-9d7571579a5a","individualid":2026890,"phonetype1":"780-868-0604","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398286845","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bryce","lastname":"Willson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":76,"name":"Richard B. Wallman","guid":"798767d0-3660-4349-847d-b98a061e5e63","individualid":1479626,"phonetype1":"780-905-5559","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.richardwallman.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120376","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479626.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Wallman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":77,"name":"Alex Stepanov-Vandenberg","guid":"95c09d79-ea89-41eb-b234-db409f4c20be","individualid":2033497,"phonetype1":"780-975-4727","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400332385","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Alex","lastname":"Stepanov-Vandenberg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":78,"name":"Tracy L. Krawchuk","guid":"93e471b3-61ff-4a9c-9709-533d889a152c","individualid":2019731,"phonetype1":"780-907-7097","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118937","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1299661.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tracy","lastname":"Krawchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":79,"name":"Ashley E. Tichkowsky","guid":"c3666056-769f-4a0a-9ee2-1454062013c8","individualid":1923969,"phonetype1":"780-940-4582","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://ashleytichkowsky.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241817","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1923969.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ashley","lastname":"Tichkowsky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":80,"name":"Jesse D. Loader","guid":"9b5ed89e-d4de-4e3b-82ec-85122aaaa219","individualid":1928832,"phonetype1":"780-243-4430","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.loadergroup.com","websitetype2":"http://www.facebook.com/loadersells","websitetype3":"https://www.linkedin.com/in/jesse-loader-28254b20?trk=hp-identity-name","websitetype4":"https://twitter.com/YEGremaxrealty","websitetype5":"","email1":"396111373","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jesse","lastname":"Loader","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":81,"name":"Jeremy D.P. Hamelin","guid":"4bd28992-9a32-4791-85b3-80e72e13d2f2","individualid":2005819,"phonetype1":"780-293-7650","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.jeremyhamelinrealtor.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688816","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jeremy","lastname":"Hamelin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":82,"name":"Robert F. McLeod","guid":"b7bf4968-9af9-4938-94a9-eff4af33f923","individualid":1520724,"phonetype1":"780-453-1108","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.mcleodrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113447","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1520724.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"McLeod","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":83,"name":"Colleen M. McLeod","guid":"67fd2664-6ee7-4423-b41c-af30cabad0ea","individualid":1820441,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.robertmcleod.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114174","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Colleen","lastname":"McLeod","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":84,"name":"Daniel S. Munch","guid":"2e0624db-b684-4298-9abd-1d60f1829890","individualid":2025439,"phonetype1":"780-222-2513","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.danielmunch.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398408394","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daniel","lastname":"Munch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":85,"name":"John-Paul Dumlao","guid":"a5333437-e8ca-4e98-b2d8-d7a0849c5ffb","individualid":1913032,"phonetype1":"780-995-0540","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.propertypathfinders.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908909","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John-Paul","lastname":"Dumlao","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:13","updated_at":"2017-08-11 00:10:13"},{"id":86,"name":"Sherrie L. Anderson","guid":"bd773c3d-1135-4ad5-9d0f-d7350ccac315","individualid":1477264,"phonetype1":"780-910-7237","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.sher780realestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398610003","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477264.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sherrie","lastname":"Anderson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":87,"name":"Arvind Kapur","guid":"03469d01-e954-4c0d-a234-04fa58f844e4","individualid":1478313,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-461-2442","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398452263","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Arvind","lastname":"Kapur","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":88,"name":"Grant E. Leach","guid":"92ef94e0-d744-418c-af20-c1bd862dcff5","individualid":1478493,"phonetype1":"780-986-8407","phonetype2":"","phonetype3":"","phonetype4":"780-986-4494","phonetype5":"","websitetype1":"http://www.leducrealestateteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109021","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478493.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Grant","lastname":"Leach","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":89,"name":"Marcel J. Blais","guid":"478b9e0b-eaa7-4be3-a6d0-90c141903499","individualid":1477418,"phonetype1":"780-961-3500","phonetype2":"","phonetype3":"","phonetype4":"780-961-3535","phonetype5":"","websitetype1":"http://www.canadianrealestateservice.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398306971","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Marcel","lastname":"Blais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":90,"name":"Thomas M. Turner","guid":"c38d2882-77b3-4063-bd6d-d79c0a766c46","individualid":1777937,"phonetype1":"780-914-1878","phonetype2":"","phonetype3":"","phonetype4":"780-961-3535","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398054761","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Thomas","lastname":"Turner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":91,"name":"Bernie A. Fitterer","guid":"43dc5191-0766-46f6-8fcf-d697f5812093","individualid":2008703,"phonetype1":"780-233-9854","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116887","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bernie","lastname":"Fitterer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":92,"name":"Aneta Jakuszyk","guid":"07dd5da0-d374-480e-b78a-99abf33c7e1e","individualid":1559462,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.homegal.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398387362","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Aneta","lastname":"Jakuszyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":93,"name":"Shaz Murji","guid":"f5661d97-794a-4966-a8b7-f1e7944cf1e8","individualid":1913262,"phonetype1":"780-885-9957","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.shazmurji.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110339","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1913262.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shaz","lastname":"Murji","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":94,"name":"Joseph F. Paquette","guid":"4d036eee-d44e-4ce3-b8d0-9f71f4400828","individualid":1962896,"phonetype1":"587-501-7614","phonetype2":"","phonetype3":"","phonetype4":"403-536-6989","phonetype5":"","websitetype1":"http://ab.onepercentrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602674","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1962896.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Joseph","lastname":"Paquette","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":95,"name":"Brian R. Ray","guid":"39c8cb83-5faa-4eb8-bcc4-8f2927bb0a70","individualid":1479081,"phonetype1":"780-233-5788","phonetype2":"","phonetype3":"","phonetype4":"780-963-5299","phonetype5":"","websitetype1":"http://www.brianray.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120042","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Ray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":96,"name":"Brent W. Kellington","guid":"11459f11-e877-4212-b167-3b777add1a1d","individualid":1566283,"phonetype1":"780-998-4021","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://KellingtonREG.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114509","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"Kellington","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":97,"name":"Edson J. Castillo","guid":"6564f226-145f-4d62-985f-d2b8d6e97427","individualid":1983469,"phonetype1":"587-987-8560","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://yegfirsttimehomebuyers.ca","websitetype2":"http://Eddie Castillo Real Estate","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759948","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Edson","lastname":"Castillo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":98,"name":"Heather J. Morris","guid":"831c91a5-1c83-4c47-812c-b2d23721dc2c","individualid":1560548,"phonetype1":"780-710-3337","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.heathermorris.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111285","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Heather","lastname":"Morris","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":99,"name":"Glen R. Good","guid":"36adee17-58cb-440e-8aac-6ac9bec2fdde","individualid":1478021,"phonetype1":"780-729-5537","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://www.glengood.com","websitetype2":"https://www.facebook.com/Ralayne-Glen-Good-with-ReMax-Real-Estate-Morinville-100860869990039/","websitetype3":"","websitetype4":"https://twitter.com/remaxmorinville","websitetype5":"","email1":"396130173","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1113913.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Glen","lastname":"Good","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":100,"name":"Michael J. Mychalyshyn","guid":"8ecb0307-71d5-41ea-be31-5b6168b20156","individualid":1478850,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.MikesTeam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118518","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1109427.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Mychalyshyn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":101,"name":"Kelly Higo","guid":"8443cfda-1b53-4454-b50e-29b59a62e5d2","individualid":1892554,"phonetype1":"780-604-0506","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.kellyhigo.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114636","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Higo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":102,"name":"Luke R. Ruttle","guid":"eaadf95b-8034-4fad-879c-f394648341e9","individualid":2011540,"phonetype1":"780-231-5357","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117062","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Luke","lastname":"Ruttle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":103,"name":"Sylvia Kozicki","guid":"ac2f4061-4535-434a-a3e4-3c45478ac19f","individualid":1602486,"phonetype1":"780-473-5000","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.kozicki.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601827","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sylvia","lastname":"Kozicki","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":104,"name":"Tyler J. Ellis","guid":"e6a5375d-af12-4064-85f4-f6c1db5dcde0","individualid":1677040,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.houseforsaleinedmonton.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398568279","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tyler","lastname":"Ellis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":105,"name":"Amanda L. Bonini","guid":"f6fb3981-0eca-48af-a1b7-649ef88e0ef5","individualid":1642629,"phonetype1":"780-993-8181","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://getrealestateinfo.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111634","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1642629.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Amanda","lastname":"Bonini","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":106,"name":"Peter M. Williams","guid":"e934edd4-2b50-4be3-adb2-77f2aa5bdfe0","individualid":1479688,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://repetermax.com","websitetype2":"https://www.facebook.com/No.One.Can.Com.Pete","websitetype3":"https://ca.linkedin.com/in/peter-williams-666a3727","websitetype4":"https://twitter.com/williamspmiles","websitetype5":"","email1":"398829204","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479688.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Williams","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":107,"name":"Teresa M. Mardon","guid":"38229a99-0c00-4601-9a30-91e408782c53","individualid":1478646,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.TeresaMardon.com","websitetype2":"https://www.facebook.com/teresamardonrealtor/?ref=bookmarks","websitetype3":"https://ca.linkedin.com/in/teresa-mardon-020ba218","websitetype4":"https://twitter.com/TeresaMardon","websitetype5":"","email1":"401511276","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1091313.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Teresa","lastname":"Mardon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":108,"name":"Simon Chong","guid":"280e7f00-3606-4553-95e4-934ef7d124cc","individualid":1477615,"phonetype1":"780-498-2838","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.simonchong.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398408351","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Simon","lastname":"Chong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":109,"name":"Linda D. Wolff","guid":"a96ecb9c-b64b-4387-9338-b7ab328451c8","individualid":1479708,"phonetype1":"780-239-7810","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.lindawolff.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397177119","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1126546.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Linda","lastname":"Wolff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":110,"name":"Brent S. Bannister","guid":"43aad9fa-7d15-48cd-a44c-27e7f54e6528","individualid":1477319,"phonetype1":"780-893-3400","phonetype2":"","phonetype3":"","phonetype4":"780-352-5466","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122564","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"Bannister","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":111,"name":"Mel A. Simmons","guid":"0fa195bd-2083-4148-bcfe-6cf2ea0c5e20","individualid":1878851,"phonetype1":"780-993-4394","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.bestedmontonhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399441847","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mel","lastname":"Simmons","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":112,"name":"Ron Dickson","guid":"993227fc-00bb-41f3-bf45-b94c35388335","individualid":1477773,"phonetype1":"780-918-2635","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.rondickson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120989","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477773.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Dickson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":113,"name":"Melissa M. Olsthoorn","guid":"fd1bdddf-e4e6-46d8-814f-da2427e1b04e","individualid":1891158,"phonetype1":"780-996-9119","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.jasonpaul.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688640","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Melissa","lastname":"Olsthoorn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":114,"name":"Luke Quach","guid":"9ecafbdb-41ff-404d-a7b5-14d0496aac3a","individualid":1869270,"phonetype1":"780-991-8688","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.edmontonmarketvalues.com","websitetype2":"https://www.facebook.com/NorthEdmontonRealEstate.info/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601448","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1202628.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Luke","lastname":"Quach","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":115,"name":"Ritu R. Bagga","guid":"7270200c-f65b-4591-87b0-f9e293a44d75","individualid":1675321,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.ritubagga.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398452276","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ritu","lastname":"Bagga","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":116,"name":"Sharon M. Josey","guid":"40bc324d-c17d-4376-86c0-3384e3f37124","individualid":1532350,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.sharonjosey.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120083","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1142611.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sharon","lastname":"Josey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":117,"name":"Brett J. Winegarden","guid":"163d8960-1787-48bd-b76d-0a754891492b","individualid":1962634,"phonetype1":"780-278-4378","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396755126","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1252104.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brett","lastname":"Winegarden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":118,"name":"Bob Maskell","guid":"ff1c29c6-3711-46dd-b32e-4cb6e125a43c","individualid":1478665,"phonetype1":"780-456-5656","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.bobmaskell.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360804","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478665.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bob","lastname":"Maskell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":119,"name":"Tobi M. Connors","guid":"dc64da32-c89a-4503-975c-06f07aa98682","individualid":1477659,"phonetype1":"780-906-9538","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.tobiconnors.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398452254","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tobi","lastname":"Connors","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":120,"name":"Elaine L. Reaper","guid":"259e761f-20fa-42f5-842e-273fc2a6fdd4","individualid":1479084,"phonetype1":"780-962-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.elainereaper.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119169","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479084.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Elaine","lastname":"Reaper","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":121,"name":"Todd R. Burke","guid":"710fc34a-4e40-4bca-94b0-ee3fa9c1141e","individualid":1477520,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.toddburkerealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396688109","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Todd","lastname":"Burke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":122,"name":"Kimberly R. Bedry","guid":"231348a0-58c3-4e44-9676-b3120667adb4","individualid":1778619,"phonetype1":"780-340-8076","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.realtyexecutivesmasters.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400480043","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kimberly","lastname":"Bedry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":123,"name":"Catherine G. Missiaen","guid":"976a4846-c49f-4de3-9aef-e204246b4115","individualid":1834443,"phonetype1":"780-504-6754","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.agentforedmontonhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112617","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1196736.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Catherine","lastname":"Missiaen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":124,"name":"Edward G. Gebran","guid":"8fbc39c4-e7d7-4c78-ae96-a56f84d2cedb","individualid":1776026,"phonetype1":"780-906-9959","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edsellshomes.ca","websitetype2":"https://www.facebook.com/TheEdmontonRealEstateApp/","websitetype3":"","websitetype4":"https://twitter.com/eddiegebran","websitetype5":"","email1":"397602215","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1776026.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Edward","lastname":"Gebran","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":125,"name":"Pauline M. Francis","guid":"72b79699-c1f5-484f-9c28-e623a7aae617","individualid":2024332,"phonetype1":"780-932-8525","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.maxwellrealty.ca/agents/pauline-francis/","websitetype2":"https://www.facebook.com/paulinefrancisrealtor/","websitetype3":"https://www.linkedin.com/in/pauline-francis-9872b445/","websitetype4":"","websitetype5":"","email1":"402846904","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Pauline","lastname":"Francis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":126,"name":"Kasia Rudolf","guid":"a44bd74f-ac76-4f9d-b719-f8ddb8b34910","individualid":1536508,"phonetype1":"780-994-8730","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"http://www.housecondo.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398707367","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1536508.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kasia","lastname":"Rudolf","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":127,"name":"Linda M. Getzlaf","guid":"27cb13cb-71f6-44da-b0fc-59b007bc020a","individualid":1781234,"phonetype1":"780-690-3861","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://www.lindagetzlaf.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123253","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1187852.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Linda","lastname":"Getzlaf","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":128,"name":"Diane S. Mosbeck","guid":"ab862399-d20c-4797-b7e3-10a23a48aa49","individualid":1621232,"phonetype1":"780-464-7700","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.diane@dianemosbeck.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122862","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Diane","lastname":"Mosbeck","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":129,"name":"Angie Resendes-Middleton","guid":"6caeb192-0c66-4c31-9894-64b3db02e59f","individualid":1504003,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.EdmontonPropertyShop.com","websitetype2":"https://www.facebook.com/YEGdreamhome/","websitetype3":"https://www.linkedin.com/in/angieresendes/","websitetype4":"https://twitter.com/AngieResendes","websitetype5":"","email1":"398759704","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1504003.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Angie","lastname":"Resendes-Middleton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":130,"name":"Cheryl A. Turpin","guid":"e4fded01-9603-4c07-9bd2-5b2c26330e23","individualid":1672152,"phonetype1":"780-995-7071","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.cherylturpin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268844","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"Turpin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":131,"name":"Yazan Ramahi","guid":"a9581858-e1e9-4bb1-9980-6d88754f642e","individualid":1619641,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.teamramahi.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397290907","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1619641.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Yazan","lastname":"Ramahi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":132,"name":"Aaron L. Fehlauer","guid":"38471b1c-7375-42ee-ba48-476d339dace0","individualid":1563405,"phonetype1":"780-266-7714","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113970","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Aaron","lastname":"Fehlauer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":133,"name":"Taras Chmil","guid":"8b6e6d25-51ae-4f6c-b1e6-6ae66ecb57d6","individualid":1477606,"phonetype1":"780-433-0303","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.taraschmil.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401371984","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011415.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Taras","lastname":"Chmil","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":134,"name":"Butch E. Zaprawa","guid":"b83ea739-92cb-4e14-8df6-4bb305bd4519","individualid":1479768,"phonetype1":"780-990-9707","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.butchzaprawa.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759638","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479768.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Butch","lastname":"Zaprawa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":135,"name":"Renee C. Cadarette","guid":"dc673b24-7110-42f7-8f3e-3a95aa10c86b","individualid":1899738,"phonetype1":"780-995-6374","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.reneecadarette.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759857","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1899738.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Renee","lastname":"Cadarette","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":136,"name":"Johnny Mahil","guid":"12224981-175e-49f9-868f-61b0230f32a2","individualid":1641855,"phonetype1":"780-399-7575","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.searchcanadahomes.com","websitetype2":"https://www.facebook.com/searchcanadahomes/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401463627","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Johnny","lastname":"Mahil","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":137,"name":"Michael Zisin","guid":"aef4d588-abb4-4f7c-9b1f-7415b7bd9068","individualid":1479773,"phonetype1":"780-722-7696","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://zisinrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601318","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479773.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Zisin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":138,"name":"Troy W. Stenson","guid":"8f87d745-11e6-4ed4-a506-906fcb3fa690","individualid":1479392,"phonetype1":"780-918-0678","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399716511","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Troy","lastname":"Stenson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":139,"name":"Hamdee Fythe","guid":"00b4590c-817d-4429-8f7c-ae81ed92007b","individualid":1477962,"phonetype1":"780-445-0677","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.hamdee.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400656298","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Hamdee","lastname":"Fythe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":140,"name":"Steven A. Yanciw","guid":"0b8b44f1-b0f7-4226-8f91-3d5a27f338f7","individualid":1986682,"phonetype1":"587-989-3948","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://yanciw.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400603061","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1271205.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steven","lastname":"Yanciw","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":141,"name":"Rick B. Goebel","guid":"a6866e08-5ebc-441b-a902-65b09336c2ea","individualid":1623863,"phonetype1":"780-995-7468","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.rickgoebel.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829255","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rick","lastname":"Goebel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":142,"name":"Charlie Ponde","guid":"79bd054c-ca55-4de1-8f06-713ea0211aba","individualid":1479016,"phonetype1":"780-455-0777","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.charlieponde.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759611","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Charlie","lastname":"Ponde","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":143,"name":"Ian Beattie","guid":"9532cec9-7292-4e26-88d0-25224475c0ab","individualid":1477350,"phonetype1":"780-233-3333","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.LetsTalkHomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402351998","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1100487.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ian","lastname":"Beattie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":144,"name":"Steve W. Leddy","guid":"8f34055a-87c2-4bc6-99d9-c06d51d8cc4c","individualid":1785110,"phonetype1":"780-984-9399","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688616","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Leddy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":145,"name":"Sabrina L. Bright","guid":"33a9dd22-e801-48be-b25f-513f5cbb9209","individualid":1477492,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"http://www.weselledmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112461","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477492.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sabrina","lastname":"Bright","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":146,"name":"Ken R. Morrison","guid":"5c6b4280-4da0-4cc3-82d4-05ffed7f9d4a","individualid":1478821,"phonetype1":"780-993-4815","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.themorrison-group.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113065","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478821.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ken","lastname":"Morrison","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":147,"name":"Nooran Ostadeian","guid":"d5470485-e174-4c34-bca3-c12dd732abb2","individualid":1682540,"phonetype1":"780-953-0723","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.realtyedmonton.ca","websitetype2":"https://www.facebook.com/NooranOstadeianRealEstateTeam/","websitetype3":"https://www.linkedin.com/feed/","websitetype4":"https://twitter.com/Noorano","websitetype5":"","email1":"398759795","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1172820.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nooran","lastname":"Ostadeian","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:14","updated_at":"2017-08-11 00:10:14"},{"id":148,"name":"Zein Abaza","guid":"d0458f95-f37a-4f3b-a80c-239726c52776","individualid":1919846,"phonetype1":"780-863-1544","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602461","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Zein","lastname":"Abaza","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":149,"name":"Craig Murray","guid":"ac6656b9-e33e-482b-a010-74506d3223d4","individualid":1478844,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360815","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Murray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":150,"name":"Byron J. Marlin","guid":"7c187541-0ed2-42f2-b37e-3e73a1ccf5b8","individualid":1935675,"phonetype1":"780-937-3458","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402542094","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Byron","lastname":"Marlin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":151,"name":"Jill S. Watt","guid":"0b6a92f9-b3c5-4a31-ae7c-79063d842fa2","individualid":1949469,"phonetype1":"780-446-3456","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402068967","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jill","lastname":"Watt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":152,"name":"Nigel A. McLean","guid":"962a66d0-101c-46f8-b2dc-4512cfdbb770","individualid":1868448,"phonetype1":"780-907-7001","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://getrealestateinfo.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400807202","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nigel","lastname":"McLean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":153,"name":"Raejha Douziech","guid":"3a48d6b9-cdea-46b9-8fe4-80af3c8b6a25","individualid":2030521,"phonetype1":"780-885-4200","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.upsiderealty.ca","websitetype2":"https://www.facebook.com/UpsideRealty.ca/?ref=bookmarks","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681945","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1308120.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Raejha","lastname":"Douziech","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":154,"name":"Madeline P. McArdle","guid":"b02b3e67-8039-4140-9f04-4327b0761a5d","individualid":1478686,"phonetype1":"780-278-5598","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.nowrealestategroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109180","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478686.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Madeline","lastname":"McArdle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":155,"name":"Melissa T. Hunter","guid":"960e1b5b-5a4d-4a3d-83af-5d4c4cbb883e","individualid":1992069,"phonetype1":"780-288-8456","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121327","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1275542.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Melissa","lastname":"Hunter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":156,"name":"Jerrett J. Bordian","guid":"537b5ca8-0bf0-48ec-8dc6-697d798c6747","individualid":1893093,"phonetype1":"780-504-6333","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://propertiesedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908904","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jerrett","lastname":"Bordian","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":157,"name":"Dave A. Linklater","guid":"81265b60-7a01-44e7-adcc-a6f361de1ff5","individualid":1618271,"phonetype1":"780-235-7080","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.davelinklater.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112729","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1618271.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Linklater","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":158,"name":"Shumei Yue","guid":"15d4278a-c981-4942-8db2-1c70cbb2559f","individualid":1917531,"phonetype1":"780-217-8819","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602445","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shumei","lastname":"Yue","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":159,"name":"David J. Schmitz","guid":"3e7a222e-e2b8-452a-8b73-5d0514cd32dc","individualid":1880265,"phonetype1":"780-266-7093","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://paulblais.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812128","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1880265.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Schmitz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":160,"name":"Paul M. Blais","guid":"7bce133b-374f-4cbf-9260-ac6d5a233ae4","individualid":1477419,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.paulblais.ca","websitetype2":"https://www.facebook.com/PaulBlaisRealtyGroup","websitetype3":"","websitetype4":"https://twitter.com/Paul_Blais","websitetype5":"","email1":"400360932","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011431.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Blais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":161,"name":"Carolyn A. Benesocky","guid":"ce3fbb2b-defe-4af9-8632-4d2ec9ac1926","individualid":1948205,"phonetype1":"780-983-1612","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397431035","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1948205.jpeg","position":"Associate","permitfreetextemail":0,"firstname":"Carolyn","lastname":"Benesocky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":162,"name":"Kerri-lyn A. Holland","guid":"51a38966-1cff-48d8-9781-4320ce3aedb7","individualid":1591849,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.kerrilynholland.com","websitetype2":"https://www.facebook.com/Holland-Associates-Inc-144867688880430/","websitetype3":"","websitetype4":"https://twitter.com/KerrilynHolland","websitetype5":"","email1":"396115260","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1591849.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kerri-lyn","lastname":"Holland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":163,"name":"Jason R. Holland","guid":"52474038-cfdd-481d-85b1-eea152698507","individualid":1937242,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.JasonHolland.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110606","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1937242.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Holland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":164,"name":"Chris L. Miller","guid":"245ba251-dd04-4eb6-a765-0cc0caecfb48","individualid":1561259,"phonetype1":"780-966-5954","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://chrismiller.remax.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398936560","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1561259.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Miller","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":165,"name":"Manmohan S. Pnaich","guid":"d96e23af-27f7-47f9-a033-65d103da1383","individualid":1570491,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.pnaichsellshomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109600","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1570491.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Manmohan","lastname":"Pnaich","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":166,"name":"Doreen A. Edwards","guid":"b7b84e06-2f1e-4ea4-9a45-e52e6f4295e3","individualid":1722844,"phonetype1":"780-990-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.teamedwardsrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402352057","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Doreen","lastname":"Edwards","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":167,"name":"Leann F. Knysh","guid":"7885b236-04c8-4b20-8360-90e2b3d1876d","individualid":1478376,"phonetype1":"780-916-6919","phonetype2":"","phonetype3":"","phonetype4":"780-963-0197","phonetype5":"","websitetype1":"http://www.leannknysh.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397480312","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478376.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Leann","lastname":"Knysh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":168,"name":"Ryan J. Knysh","guid":"5ea60fff-7275-47a3-9b19-7d171b336cd0","individualid":1912676,"phonetype1":"780-264-3119","phonetype2":"","phonetype3":"","phonetype4":"780-963-0197","phonetype5":"","websitetype1":"http://www.ryanknysh.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396596949","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1912676.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Knysh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":169,"name":"Christian Gannon","guid":"8d9c14bd-62e3-4bb9-a868-c769612107ac","individualid":2011212,"phonetype1":"780-983-3475","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/search/top/?q=christian%20gannon%20remax","websitetype3":"","websitetype4":"https://twitter.com/gannonyeg","websitetype5":"","email1":"398430414","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1292627.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christian","lastname":"Gannon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":170,"name":"Keith A. Faria","guid":"84ec661f-4998-49af-b044-0e5f76beee6c","individualid":1868252,"phonetype1":"780-920-3359","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.keithfaria.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969277","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Keith","lastname":"Faria","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":171,"name":"Keith Hare","guid":"945e2ff3-d280-43fd-af9d-8f89457bffe6","individualid":1478117,"phonetype1":"780-455-0777","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.kharehomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112218","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Keith","lastname":"Hare","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":172,"name":"Shafin W. Thawer","guid":"4f61e8c5-976e-44d3-85f6-c7aa48d51e2f","individualid":1479482,"phonetype1":"780-903-6465","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.thawer.com","websitetype2":"https://www.facebook.com/shafin.thawer","websitetype3":"https://www.linkedin.com/in/shafin-thawer-ba68b02a?trk=hp-identity-name","websitetype4":"https://twitter.com/EdmRlEstValues","websitetype5":"","email1":"397601430","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010798.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shafin","lastname":"Thawer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":173,"name":"Adam V. Tassone","guid":"7340f0d9-07a8-46e2-b3ce-549f7df8047b","individualid":1898634,"phonetype1":"780-994-9998","phonetype2":"","phonetype3":"","phonetype4":"780-401-3446","phonetype5":"","websitetype1":"http://www.sellerinvite.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396352138","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Adam","lastname":"Tassone","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":174,"name":"Jessie Jhand","guid":"188c586a-cc65-47d5-b8f4-d3b2d146551b","individualid":1984948,"phonetype1":"877-888-3131","phonetype2":"","phonetype3":"","phonetype4":"780-483-3180","phonetype5":"","websitetype1":"http://www.comfree.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117793","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jessie","lastname":"Jhand","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":175,"name":"Lamia M. Alakra","guid":"0044d753-375e-4248-b264-22d5a7d0614d","individualid":1593252,"phonetype1":"780-903-8551","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.lamia-alakra.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123603","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lamia","lastname":"Alakra","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":176,"name":"Gerry R. Wilson","guid":"69ee3515-c04c-455c-976a-84afa37ae14f","individualid":1479692,"phonetype1":"780-468-4060","phonetype2":"","phonetype3":"","phonetype4":"780-468-1991","phonetype5":"","websitetype1":"http://www.homelifeguaranteed.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112438","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Gerry","lastname":"Wilson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":177,"name":"Rita S. St Jean","guid":"b0ff4a95-a996-4db0-9bde-013102d0c8a1","individualid":1848979,"phonetype1":"780-953-7482","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.ritastjean.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829190","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rita","lastname":"St Jean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":178,"name":"Didi E. Rasmussen","guid":"263ef4ca-e309-4a34-8f35-803ed5b832d1","individualid":1872476,"phonetype1":"780-298-8804","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.Didi-sells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115331","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1872476.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Didi","lastname":"Rasmussen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":179,"name":"Ryan J. Rasmussen","guid":"4da6bd4a-4e7b-426c-ae15-6f809d5c5496","individualid":1964716,"phonetype1":"780-340-8804","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.didi-sells.com","websitetype2":"https://www.facebook.com/buyingyeg/?ref=aymt_homepage_panel","websitetype3":"https://www.linkedin.com/feed/?trk=","websitetype4":"https://twitter.com/RyanRas75","websitetype5":"","email1":"398838979","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1964716.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Rasmussen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":180,"name":"Carl A. Phin","guid":"6f1c6e7c-4cee-4b48-8da5-9303dbc1efd8","individualid":1666242,"phonetype1":"780-278-6600","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.carlandkim.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268828","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1666242.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carl","lastname":"Phin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":181,"name":"Kim C. McLeod","guid":"5bfa2814-d581-4ff7-b9cd-1458fc937ac4","individualid":1570490,"phonetype1":"780-265-0085","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.carlandkim.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268806","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1570490.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kim","lastname":"McLeod","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":182,"name":"Jim Noble","guid":"7312db9c-3db8-413b-b98d-9f39c3ec4e41","individualid":1478895,"phonetype1":"780-710-7653","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"http://www.jimnoble.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123420","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jim","lastname":"Noble","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":183,"name":"Charles R. Weese","guid":"d48671a6-7aa6-4576-8be5-460aae7af59f","individualid":2017187,"phonetype1":"877-888-3131","phonetype2":"","phonetype3":"","phonetype4":"780-483-3180","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688844","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Charles","lastname":"Weese","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":184,"name":"Carroll D. Hnybida","guid":"0a5c80c4-f83f-4c29-8c2b-ede6655f4522","individualid":1478171,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360852","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carroll","lastname":"Hnybida","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":185,"name":"Connie G. Kennedy","guid":"2b664ff3-7177-482b-8f4d-7953d29a7013","individualid":1478335,"phonetype1":"780-482-6766","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.conniekennedy.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121654","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478335.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Connie","lastname":"Kennedy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":186,"name":"Barry D. Candelora","guid":"208d2c02-de5b-47e6-ac71-b4cfc80e13b2","individualid":1535167,"phonetype1":"780-907-5948","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.barrycandelora.com","websitetype2":"https://www.facebook.com/barry.candelora","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396130343","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1144218.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Barry","lastname":"Candelora","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":187,"name":"Jason R. Macmillan","guid":"87145d3b-5930-4b2a-8995-aff9adad555b","individualid":1478613,"phonetype1":"780-906-8804","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.macmillanrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114422","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101925.gif","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Macmillan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":188,"name":"Kelly J. Macmillan","guid":"973a38d9-8b57-4435-b8c3-f0f42ecdf846","individualid":1533523,"phonetype1":"780-994-8123","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.macmillanrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118677","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Macmillan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":189,"name":"Ian Choi","guid":"f59d092d-2315-4ec7-8a60-589118d8f693","individualid":1618063,"phonetype1":"780-977-2288","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://http://www.polarissells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688562","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1618063.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ian","lastname":"Choi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":190,"name":"Chi Hung Tam","guid":"bde3e058-0633-477c-95bd-981cbe108768","individualid":1885636,"phonetype1":"780-709-7081","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398286805","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chi Hung","lastname":"Tam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":191,"name":"Michael J. Waddell","guid":"4e051b0a-c34b-44e1-8d8a-cf2703d4cbde","individualid":1976159,"phonetype1":"780-906-5634","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.michaelwaddell.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112416","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1262649.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Waddell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":192,"name":"Errol J. Scott","guid":"c37fb2a8-a68c-438d-b5a7-3a94d7d13eb3","individualid":1899310,"phonetype1":"780-271-1114","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.buyedmontonhomes.com","websitetype2":"https://www.facebook.com/Hardbodyrealtor/","websitetype3":"https://ca.linkedin.com/in/errolscott","websitetype4":"https://twitter.com/ErrolScott","websitetype5":"","email1":"396119837","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Errol","lastname":"Scott","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":193,"name":"Corey K. Toker","guid":"4a11f4fb-996f-4d0f-a3eb-3c1e0b5b0d2f","individualid":1602133,"phonetype1":"780-906-2743","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.coreytoker.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112977","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Corey","lastname":"Toker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":194,"name":"Tristan L. Mula","guid":"a6755c26-f072-4106-b5ed-719294ce9f1b","individualid":1989338,"phonetype1":"780-566-0197","phonetype2":"","phonetype3":"","phonetype4":"780-465-0679","phonetype5":"","websitetype1":"http://www.tristanmula.com","websitetype2":"https://www.facebook.com/tristanmularealetstate/","websitetype3":"https://www.linkedin.com/in/tristanmula/","websitetype4":"","websitetype5":"","email1":"398408379","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tristan","lastname":"Mula","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":195,"name":"Frank Chao Qun Chen","guid":"f1aaa8f3-faf1-4d10-affb-e1dbdbc1cd70","individualid":1830613,"phonetype1":"780-893-3168","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.houseedmonton.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602244","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1830613.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Frank Chao Qun","lastname":"Chen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":196,"name":"Dobrila Joldzic","guid":"b9cb28ab-56ee-496c-88f8-1e49c7469dc5","individualid":1478288,"phonetype1":"780-907-9921","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112507","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dobrila","lastname":"Joldzic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":197,"name":"Steve A. Reschke","guid":"b30a7907-6813-45a5-9225-754c2a652662","individualid":1830166,"phonetype1":"780-908-2641","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.stevereschke.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114006","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Reschke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":198,"name":"Stephen Yip","guid":"ff188bdb-5dde-4907-bf42-ee0ab474840d","individualid":1479750,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.stephenyip.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360969","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stephen","lastname":"Yip","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":199,"name":"Brent MacIntosh","guid":"b6a3095e-e9c0-4141-81cc-5020cdcbfe4d","individualid":1478604,"phonetype1":"780-464-0075","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.brentmacintosh.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398286795","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011515.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"MacIntosh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":200,"name":"Ann E. Leins","guid":"bb6da662-9ac3-42ca-a02b-8ff2b08bc243","individualid":1563408,"phonetype1":"780-915-2277","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://annleins.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143771","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ann","lastname":"Leins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":201,"name":"Toni L. Betty","guid":"ab7a68ac-a1b8-4e68-b188-2154b61b2ad6","individualid":1477385,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.ToniBetty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110675","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Toni","lastname":"Betty","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":202,"name":"Jerry D. Aulenbach","guid":"086d887c-ea3f-4caa-ae9d-7a87ec99806b","individualid":1526765,"phonetype1":"780-966-6537","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.ZoomJer.com","websitetype2":"http://www.facebook.com/ZoomJer","websitetype3":"http://ca.linkedin.com/in/zoomjer","websitetype4":"http://twitter.com/ZoomJer","websitetype5":"","email1":"397601788","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1526765.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jerry","lastname":"Aulenbach","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":203,"name":"Darrell G. Ketler","guid":"3c63a285-1cf2-44fc-9e94-dbbc6babc603","individualid":1478340,"phonetype1":"780-497-1788","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://darrellketler.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123503","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Darrell","lastname":"Ketler","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":204,"name":"Ryan T. Gillen","guid":"c9ae011e-039e-4a28-acc2-20731c708bc9","individualid":1875835,"phonetype1":"780-700-8355","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.ryangillen.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121542","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Gillen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":205,"name":"Justin Iyizoba","guid":"9b9e16a2-e9ee-4342-a721-fc8b4c644289","individualid":2026830,"phonetype1":"780-919-9328","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398927037","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1306274.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Iyizoba","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":206,"name":"Thomas N. Bumbeh","guid":"b2ec11c7-26b3-4e70-8153-7647eb7fa1cc","individualid":1593442,"phonetype1":"780-904-1323","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://thomasbumbeh.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113979","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Thomas","lastname":"Bumbeh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":207,"name":"Paul S. Lamba","guid":"68453d64-8bd9-49b9-b89d-c2fa7d3c3bfd","individualid":1592688,"phonetype1":"780-951-2378","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.PaulLamba.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400132554","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1110208.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Lamba","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":208,"name":"Curtis D. Stasiuk","guid":"af10b9f1-d9be-41bd-96a8-204ded645381","individualid":1479374,"phonetype1":"780-907-3577","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.smartmovesyeg.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733520","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Curtis","lastname":"Stasiuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":209,"name":"Craig Pilgrim","guid":"a39df4a3-41d2-4f09-9c06-fa80e2f2f2c5","individualid":1528731,"phonetype1":"587-983-3111","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.cominghome.ca","websitetype2":"http://fb.me/cominghomerealestate","websitetype3":"https://ca.linkedin.com/in/craigpilgrim","websitetype4":"","websitetype5":"","email1":"398661927","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1140455.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Pilgrim","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":210,"name":"Kelly L. Dann","guid":"04a8e0ba-bb9c-438f-988b-b25bee3b22e8","individualid":1571252,"phonetype1":"780-265-1755","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124741","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Dann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:15","updated_at":"2017-08-11 00:10:15"},{"id":211,"name":"Vincenzo C. Fiacco","guid":"a65cf6b3-ea29-4835-8472-3aec8b6eec25","individualid":1889657,"phonetype1":"780-667-6978","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.VinceFiacco.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733644","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1889657.jpeg","position":"Associate","permitfreetextemail":0,"firstname":"Vincenzo","lastname":"Fiacco","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":212,"name":"Cheryl A. Mitchell","guid":"aca92146-8a0a-450b-a833-15feac4faa05","individualid":2007959,"phonetype1":"780-915-4787","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401918868","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"Mitchell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":213,"name":"Christie L. Bergman","guid":"cdc31d0b-6b55-458a-ae4a-38ff7883be25","individualid":1671041,"phonetype1":"780-903-8059","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.christiebergman.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114164","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1671041.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christie","lastname":"Bergman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":214,"name":"Ezmina Samaroo","guid":"ca45f973-9346-437f-8193-75fea4dfc4d9","individualid":1631188,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.ezminasamaroo.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109624","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ezmina","lastname":"Samaroo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":215,"name":"Sandra R. McDonald","guid":"d4e6aee4-2d9c-4200-9297-fe516686ed10","individualid":1890255,"phonetype1":"780-920-1537","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.YEGisCasa.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268914","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1890255.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandra","lastname":"McDonald","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":216,"name":"Rex R. Lussier","guid":"936cdf60-dd1d-48df-af5c-783c74e4b124","individualid":1684238,"phonetype1":"780-953-8356","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109100","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rex","lastname":"Lussier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":217,"name":"Anna Trojanowicz","guid":"e3b5a323-8d8b-489a-93ea-f86a99d53d45","individualid":1479540,"phonetype1":"780-232-0855","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.annatrojanowicz.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111266","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1131430.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Anna","lastname":"Trojanowicz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":218,"name":"Trevor Dunn","guid":"93cd3270-d39a-4c1f-aaf3-4d3fa24edb3f","individualid":1477824,"phonetype1":"780-440-2603","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.trevordunn.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124244","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011342.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Trevor","lastname":"Dunn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":219,"name":"Lisa J. Anderson","guid":"b12bada0-590f-4746-ac52-77d78bc6398d","individualid":1477262,"phonetype1":"780-983-7569","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"http://www.lisasmyagent.com","websitetype2":"https://www.facebook.com/Lisasmyagent-Lisa-Anderson-The-Good-Real-Estate-Company-WFG-378700165848626","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398781701","email2":"","email3":"","email4":"","photo":"","position":"Office Manager","permitfreetextemail":0,"firstname":"Lisa","lastname":"Anderson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":220,"name":"Melissa F. Blythe","guid":"301a59b6-0c27-4cd0-b411-dfbbf284d344","individualid":1992547,"phonetype1":"780-222-2803","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"http://www.weselledmonton.com","websitetype2":"http://www.facebook.com/SchmidtRealtyGroup","websitetype3":"","websitetype4":"http://www.twitter.com/mercurialsmile","websitetype5":"","email1":"398776077","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Melissa","lastname":"Blythe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":221,"name":"Dave D. Pon","guid":"40422066-9176-4f8b-92cb-35500671d2d1","individualid":1529826,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.davepon.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361243","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Pon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":222,"name":"Lila Handous","guid":"01cdc457-6604-4e2d-b606-dc4127a0f4c9","individualid":1521056,"phonetype1":"780-914-9990","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601366","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lila","lastname":"Handous","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":223,"name":"Doug Singleton","guid":"f2e0804e-3541-4785-a2e2-282d076f7ec4","individualid":1479305,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.dougsingleton.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110145","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479305.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"Singleton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":224,"name":"Erica Kerr","guid":"49fa8cad-e6d5-4bd7-a069-022fbc6f11bb","individualid":2032307,"phonetype1":"587-785-8468","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.ericakerr.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402406638","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Erica","lastname":"Kerr","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":225,"name":"Steve P. Kehoe","guid":"8d38e158-bbcb-4f5f-acf0-2dc8af73493a","individualid":1688539,"phonetype1":"780-660-0222","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.2percentrealtypro.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402811623","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Kehoe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":226,"name":"Harjeet Sandhu","guid":"99bf7543-044f-486e-b2f6-54f4c0a94d1e","individualid":1479191,"phonetype1":"780-233-3100","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.harjeetsandhu.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601603","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1114739.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Harjeet","lastname":"Sandhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":227,"name":"Paul Hundal","guid":"26ea7ac6-3b1a-4b48-afdb-c1fb0056d2f5","individualid":1478223,"phonetype1":"780-906-7454","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396169045","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Hundal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":228,"name":"Lorraine Alfonsi","guid":"eef5a4b0-70af-4905-ac67-955aa4e4f529","individualid":1477247,"phonetype1":"780-916-5589","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.lorrainealfonsi.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120412","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477247.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lorraine","lastname":"Alfonsi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":229,"name":"Oleg Shwartz","guid":"525c6589-74f7-4a58-9828-5d01d44340fa","individualid":1983555,"phonetype1":"780-935-7777","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"http://www.valuehomesedmonton.com","websitetype2":"https://www.facebook.com/Olegshwartzrealtor/","websitetype3":"https://www.linkedin.com/in/oleg-shwartz-928830b0?trk=hp-identity-name","websitetype4":"https://twitter.com/OlegShwartz","websitetype5":"","email1":"401969368","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1983555.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Oleg","lastname":"Shwartz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":230,"name":"Tony Vo","guid":"8895f748-786e-4211-b96d-4410e022f8c5","individualid":1945635,"phonetype1":"780-807-6464","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.edmontonshomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602567","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tony","lastname":"Vo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":231,"name":"Ryan B. Debler","guid":"a8d0babc-a4fc-4e7c-abd0-4f0fe55987e7","individualid":2020332,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120502","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Debler","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":232,"name":"Anthony Trang","guid":"98e895bf-8284-4c94-847e-0cb275581f25","individualid":2020243,"phonetype1":"780-217-4004","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143908","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anthony","lastname":"Trang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":233,"name":"Jakie K. Ng","guid":"c24c8c95-77f8-4f8c-9872-80a6c99e68ee","individualid":1773053,"phonetype1":"780-224-5566","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.condoyeg.ca","websitetype2":"https://www.fb.com/condoyeg","websitetype3":"https://ca.linkedin.com/in/jakie-ng-6a187420","websitetype4":"https://www.twitter.com/condoyeg","websitetype5":"","email1":"398808666","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1773053.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jakie","lastname":"Ng","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":234,"name":"Chester Lis","guid":"da6fa977-158b-460e-b59c-6880efe04784","individualid":1478553,"phonetype1":"780-964-0095","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.buyandselledmontonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601443","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chester","lastname":"Lis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":235,"name":"Jack W. Bawden","guid":"fb2c2dc8-db08-4390-85b2-5209c0caf820","individualid":1477342,"phonetype1":"780-497-0223","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601236","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011922.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jack","lastname":"Bawden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":236,"name":"Darlene Strang","guid":"df571e7a-d18a-467a-9e3e-f644e8ad49fb","individualid":1479411,"phonetype1":"780-908-3131","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.darlenestrang.ca","websitetype2":"https://www.facebook.com/condosedmonton","websitetype3":"","websitetype4":"https://twitter.com/Edmonton_Condos","websitetype5":"","email1":"399770401","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479411.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darlene","lastname":"Strang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":237,"name":"Donna Choucair","guid":"6f626d72-9eb1-4b89-9207-77c3b875db54","individualid":1665057,"phonetype1":"780-964-2591","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.donnacsells.com","websitetype2":"","websitetype3":"https://ca.linkedin.com/in/donna-choucair-8a09204a","websitetype4":"https://twitter.com/donnachoucair","websitetype5":"","email1":"401918774","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1665057.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Donna","lastname":"Choucair","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":238,"name":"Richard Zhou","guid":"17bbf045-4626-4bfb-b7dd-775476b99753","individualid":2027938,"phonetype1":"587-777-2258","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807848","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Zhou","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":239,"name":"Judi Cook","guid":"8956207f-4395-4655-a232-73732163358b","individualid":1477661,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120964","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011885.gif","position":"Associate","permitfreetextemail":0,"firstname":"Judi","lastname":"Cook","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":240,"name":"Jeff Warner","guid":"5d1d373c-0b3a-49e2-83fb-090353a6f98f","individualid":1910907,"phonetype1":"780-668-2713","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398176002","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1222605.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeff","lastname":"Warner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":241,"name":"Greg Steele","guid":"44a2be00-347e-492f-9711-facfc46ef1b8","individualid":1535585,"phonetype1":"780-641-1341","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.gregsteele.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396130168","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1535585.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Greg","lastname":"Steele","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":242,"name":"Coralie K. Mandin","guid":"304045db-da1a-4f79-bbf0-efa1a2b7dac7","individualid":1994624,"phonetype1":"780-975-7062","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.xtremeedmontonhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124042","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1277686.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Coralie","lastname":"Mandin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":243,"name":"Vinod K. Bali","guid":"8503dc4b-c1b0-4c87-b9c2-0340a1fa23a6","individualid":1933888,"phonetype1":"780-990-2587","phonetype2":"","phonetype3":"","phonetype4":"780-431-1600","phonetype5":"","websitetype1":"http://www.vinodbali.ca","websitetype2":"https://www.facebook.com/vinod.bali.94","websitetype3":"https://www.linkedin.com/in/vinod-bali-67a83716/","websitetype4":"https://twitter.com/VinodBali1","websitetype5":"","email1":"398759900","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1233785.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Vinod","lastname":"Bali","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":244,"name":"Lokesh Sharma","guid":"d6acad24-671e-49eb-8ecb-1a4e1829e65e","individualid":1479263,"phonetype1":"780-271-9100","phonetype2":"","phonetype3":"","phonetype4":"780-431-1600","phonetype5":"","websitetype1":"http://www.lokeshsharma.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121489","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lokesh","lastname":"Sharma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":245,"name":"Melissa D. Mccuaig","guid":"062ec159-b58c-42a9-8832-5e4bfc6df2b7","individualid":2004068,"phonetype1":"877-888-3131","phonetype2":"","phonetype3":"","phonetype4":"780-483-3180","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396130227","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Melissa","lastname":"Mccuaig","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":246,"name":"Nidhi Kapoor","guid":"1bcfa1a9-c4c5-4282-8e38-d92c26ea8730","individualid":1748384,"phonetype1":"780-318-3434","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.yeg-homes.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602187","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nidhi","lastname":"Kapoor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":247,"name":"Blair M. Simpson","guid":"6b597639-9cba-4f81-a7af-a4a2bd338ab1","individualid":2013894,"phonetype1":"780-803-0576","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117191","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Blair","lastname":"Simpson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":248,"name":"Matt S. Ferguson","guid":"bba0a054-d11f-439f-926d-524dbeed1324","individualid":1758294,"phonetype1":"780-707-5999","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.fergusonrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398776072","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matt","lastname":"Ferguson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":249,"name":"Richard B. Faragini","guid":"ebbedeb9-2657-40e2-9b4d-74f0d71e8e11","individualid":1477885,"phonetype1":"780-982-7173","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.richardsellshomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124178","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1112601.gif","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Faragini","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":250,"name":"Yvonne S. Valdes","guid":"d308f5e8-b510-4027-b0c4-f5c1c8689743","individualid":1917620,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.yvonnevaldes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124361","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Yvonne","lastname":"Valdes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":251,"name":"Meryana Ashkar","guid":"7653117e-31aa-4da6-b72d-8c9847ffaf6a","individualid":1922321,"phonetype1":"780-934-8041","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400707500","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1227489.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Meryana","lastname":"Ashkar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":252,"name":"Raj K. Sharma","guid":"7cd86c2a-cae7-4420-b196-e2f5cfd80758","individualid":1626367,"phonetype1":"780-904-6008","phonetype2":"","phonetype3":"","phonetype4":"780-431-1600","phonetype5":"","websitetype1":"http://www.rsharmarealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120113","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1626367.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Raj","lastname":"Sharma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":253,"name":"Mason Salame","guid":"482ffc4b-f80b-4e34-b459-790379d93c10","individualid":1479183,"phonetype1":"780-818-1818","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.realedmontonhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807673","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479183.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mason","lastname":"Salame","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":254,"name":"Sandeep P. Mehta","guid":"6cb1eac8-8b49-471c-8cf4-04dca5e7824f","individualid":1594148,"phonetype1":"780-953-7101","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112973","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sandeep","lastname":"Mehta","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":255,"name":"Jody R. Jenkins","guid":"deacb8ea-94c7-4c28-8ca9-569ae0aa4941","individualid":1868446,"phonetype1":"780-298-1500","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.jodyjenkins.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114179","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1868446.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jody","lastname":"Jenkins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":256,"name":"Jordan C. Seitz","guid":"7814f96e-73fb-4d8c-b4de-23dd43674ed5","individualid":1929339,"phonetype1":"780-203-2198","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.teamseitz.ca","websitetype2":"https://www.facebook.com/Jordan-Seitz-ReMax-ELITE-279148732140369/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402811647","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1929339.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jordan","lastname":"Seitz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":257,"name":"Crystal H. Wong","guid":"d04d16d3-643b-4bda-af70-130ee45ae134","individualid":1966513,"phonetype1":"780-707-1882","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.yegdreamhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602687","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Crystal","lastname":"Wong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":258,"name":"Elizabeth Cwik","guid":"a640aae6-8808-48bc-a478-3bec09cefae1","individualid":1477714,"phonetype1":"780-441-5188","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.century21.ca/elizabeth.cwik","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601304","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011640.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Elizabeth","lastname":"Cwik","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":259,"name":"Peddy P. Tsui","guid":"e789729d-57bf-4f12-b588-c70b86cf9a41","individualid":1479543,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115149","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Peddy","lastname":"Tsui","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":260,"name":"Paolo Chiaselotti","guid":"d2ace313-9680-4cd2-8a4e-777ecc96b637","individualid":1884950,"phonetype1":"780-729-7355","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.PaoloSellsHomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118347","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paolo","lastname":"Chiaselotti","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":261,"name":"Jenny A. Narine","guid":"ed496ac8-bec9-4132-b401-1f227d834803","individualid":1597588,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.jennynarine.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398803510","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jenny","lastname":"Narine","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":262,"name":"Xiaodan Wang","guid":"abc36793-2876-42c7-bc6a-d76a8ab752f7","individualid":1948287,"phonetype1":"780-655-9088","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602592","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Xiaodan","lastname":"Wang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":263,"name":"Dan C. Chalifoux","guid":"36200a58-f9fb-4aa9-b505-ccf27822df6f","individualid":1527005,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123872","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dan","lastname":"Chalifoux","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":264,"name":"Dena E. Sutton","guid":"3bf60609-0b9d-4149-9303-b3b0e98511ea","individualid":1781238,"phonetype1":"780-929-2600","phonetype2":"","phonetype3":"","phonetype4":"780-929-8301","phonetype5":"","websitetype1":"http://www.denasutton.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398781755","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1781238.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dena","lastname":"Sutton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":265,"name":"Russ Robideau","guid":"9dc1e4a7-bb3c-49ef-865d-48de08de7d4e","individualid":1479119,"phonetype1":"780-446-9200","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.albertaruss.ca","websitetype2":"https://www.facebook.com/russ.robideau","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111243","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Russ","lastname":"Robideau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:16","updated_at":"2017-08-11 00:10:16"},{"id":266,"name":"Robby Halabi","guid":"dfb70e3a-c6e9-4b93-97c3-bb8d39a00f55","individualid":1485416,"phonetype1":"780-919-8180","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.rimrockrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838905","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1485416.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robby","lastname":"Halabi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":267,"name":"Kenton T. King","guid":"67d9d1fb-f857-4fc6-a465-15ef2f68cab6","individualid":1901622,"phonetype1":"780-221-8200","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.kentonking.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400707489","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1217702.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kenton","lastname":"King","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":268,"name":"Marc Lachance","guid":"7df3fd01-2c4c-425b-9b00-3ebf359711e5","individualid":1478449,"phonetype1":"780-884-7653","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.lachanceteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118621","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478449.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marc","lastname":"Lachance","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":269,"name":"Brad Woodward","guid":"516091df-9f09-449f-a57c-283cbb9e8ce2","individualid":1479722,"phonetype1":"780-884-5000","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402776980","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Woodward","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":270,"name":"Dina Zejnilovic","guid":"b0d5e8d7-b23c-44bc-a361-051eb5fe1069","individualid":1634506,"phonetype1":"780-721-8542","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400707410","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dina","lastname":"Zejnilovic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":271,"name":"David Tomczyk","guid":"8d290fc4-7f1d-4517-bca3-060eb38b6b75","individualid":1677535,"phonetype1":"780-995-9703","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.greateredmontonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759782","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Tomczyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":272,"name":"Carson K. Beier","guid":"de4c0e84-1513-4ab2-8169-c59a1ba7a130","individualid":1643005,"phonetype1":"780-960-3948","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"http://www.SOLDonCarson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397762610","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1165539.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carson","lastname":"Beier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":273,"name":"Neil S. Thompson","guid":"8172a6ba-1fa7-4581-aabc-2e9f79867924","individualid":1883954,"phonetype1":"780-884-8520","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.realestateagent007.ca","websitetype2":"https://www.facebook.com/Realestateagent007ca-941188322559993/?fref=ts","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118075","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1883954.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Neil","lastname":"Thompson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":274,"name":"Sonia K. MacKenzie","guid":"1894f512-aa19-41e2-9be6-d87d40937b91","individualid":1478607,"phonetype1":"780-886-0318","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.callsonia.realtor","websitetype2":"http://www.facebook.com/Sonia-Sells-Real-Estate","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396832769","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478607.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sonia","lastname":"MacKenzie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":275,"name":"Edward A. Greiner","guid":"56a9b95b-7568-4b38-8661-1070ef28be43","individualid":1890934,"phonetype1":"780-515-1566","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://edwardgreiner.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602353","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1890934.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Edward","lastname":"Greiner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":276,"name":"Shane Parent","guid":"5e0333f1-0248-4704-bf36-46373fc5aea0","individualid":1478951,"phonetype1":"780-485-5005","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.platinumteam.ca","websitetype2":"https://www.facebook.com/RemaxPlatinumTeam/","websitetype3":"https://ca.linkedin.com/in/shane-parent-781b7537","websitetype4":"https://twitter.com/PlatinumTeamYeg","websitetype5":"","email1":"403011367","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478951.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Shane","lastname":"Parent","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":277,"name":"Daisy H. Aw","guid":"bc2284cf-1d5f-4d88-a97b-5e85f5874fc2","individualid":1995455,"phonetype1":"780-690-1933","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/RemaxPlatinumTeam/","websitetype3":"","websitetype4":"https://twitter.com/PlatinumTeamYeg","websitetype5":"","email1":"396124081","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1278313.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Daisy","lastname":"Aw","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":278,"name":"Anshu Sharma","guid":"2db5a250-ec1e-41ae-857a-cf4b93350dc1","individualid":1821523,"phonetype1":"780-271-1761","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602240","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1821523.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Anshu","lastname":"Sharma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":279,"name":"Lawrence Cote","guid":"450feb34-7957-41a7-a891-077029394856","individualid":1477676,"phonetype1":"780-721-6577","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://lawrencecote.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114369","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477676.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lawrence","lastname":"Cote","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":280,"name":"Hazel Duncan","guid":"2945b6c5-d489-43cb-b0db-3d15fd04e1de","individualid":1477819,"phonetype1":"780-504-4293","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.HazelDuncan.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112097","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477819.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Hazel","lastname":"Duncan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":281,"name":"Jorj Sayde","guid":"1156f13a-80a9-46f2-aff2-8fcc9963a019","individualid":2007526,"phonetype1":"780-722-7029","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.jorjsayde.ca","websitetype2":"https://www.facebook.com/Jorj-Sayde-Remax-River-City-1816056128622269/","websitetype3":"https://www.linkedin.com/in/jorj-sayde-01637012a/","websitetype4":"","websitetype5":"","email1":"398812168","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jorj","lastname":"Sayde","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":282,"name":"Amita R. Rajput","guid":"2e11175e-bba7-4f87-8778-bfa602176f0f","individualid":1979548,"phonetype1":"780-945-1090","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115036","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1979548.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Amita","lastname":"Rajput","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":283,"name":"Richard B. Walker","guid":"e24c075f-92d4-4521-b461-e5003b8ac03d","individualid":1479624,"phonetype1":"780-719-4495","phonetype2":"","phonetype3":"","phonetype4":"780-459-0235","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117923","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Walker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":284,"name":"Marlene B. Hynes","guid":"a727618c-52aa-48cb-b31f-d26c439cb7a0","individualid":1478238,"phonetype1":"780-908-3833","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.marlenehynes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112909","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478238.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marlene","lastname":"Hynes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":285,"name":"Andrea Jurgens","guid":"889ed0e1-364d-4525-a621-9ed7358a61a0","individualid":1525800,"phonetype1":"780-405-9881","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118665","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Andrea","lastname":"Jurgens","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":286,"name":"Bill Ramsay","guid":"2d7c71bc-a70f-425d-836c-a0cc12b137b5","individualid":1479071,"phonetype1":"780-483-7170","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"http://www.billramsay.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111165","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010188.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Bill","lastname":"Ramsay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":287,"name":"Matthew C. Cunha","guid":"740a2341-f299-428f-93b7-97969771dc55","individualid":1945757,"phonetype1":"780-436-1162","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113765","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matthew","lastname":"Cunha","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":288,"name":"Larry O. Candido","guid":"36bf34fc-5ece-4d73-a4d3-1185246d5e33","individualid":1477550,"phonetype1":"780-233-9600","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.larrycandido.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115106","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010224.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Larry","lastname":"Candido","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":289,"name":"Zul Sarangi","guid":"fde1209a-a55a-4543-ba8e-a272a9717316","individualid":1479198,"phonetype1":"780-905-4441","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110192","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Zul","lastname":"Sarangi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":290,"name":"Loral K. Walker","guid":"370a238e-fe89-48cf-8a3e-fe876b0a3ad3","individualid":1597157,"phonetype1":"780-232-2956","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114894","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1156781.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Loral","lastname":"Walker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":291,"name":"Bernie A. Krec","guid":"c4634fa9-fbc3-4190-bdd1-686098717660","individualid":1478411,"phonetype1":"780-231-5732","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.berniekrec.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119045","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478411.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bernie","lastname":"Krec","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":292,"name":"Shirley E. Williams","guid":"6f50b9f5-d542-4004-885d-efe617475888","individualid":1636201,"phonetype1":"780-458-5595","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.shirleywilliams.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398953376","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Shirley","lastname":"Williams","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":293,"name":"Taylor J. Hack","guid":"9e65bb1f-a51e-438e-bd0f-3df989ef67c7","individualid":1949463,"phonetype1":"780-909-6770","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.hackandco.com","websitetype2":"https://www.facebook.com/youredmontonarearealtor/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400628597","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Taylor","lastname":"Hack","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":294,"name":"Shaun C. Cunningham","guid":"1a8f6b5f-e733-40fd-92c3-72885b0b5878","individualid":1904344,"phonetype1":"780-265-0165","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"http://www.triurban.com","websitetype2":"https://www.facebook.com/Shaun-Cunningham-Realtor-130308780369920/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110762","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1904344.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shaun","lastname":"Cunningham","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":295,"name":"Jason J. Mattern","guid":"a62c0dd9-93d4-4c19-a434-f10711122c7b","individualid":1478671,"phonetype1":"780-719-4306","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"http://www.triurban.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122158","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Mattern","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":296,"name":"Erin L. Willman","guid":"c98007e5-2cb6-44b0-9f62-885f03f09f36","individualid":1636786,"phonetype1":"780-221-5801","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.erinwillman.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115579","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1636786.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Erin","lastname":"Willman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":297,"name":"Matthew D. Barry","guid":"44021395-dea4-405a-8b8d-aea325343852","individualid":1477331,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.matthewbarry.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120037","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477331.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Matthew","lastname":"Barry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":298,"name":"Prashant Mahay","guid":"426f2a36-4b55-4f03-b3e0-034c25eb3ee9","individualid":1522865,"phonetype1":"780-803-0202","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"http://www.prashantmahay.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122827","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1522865.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Prashant","lastname":"Mahay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":299,"name":"Michael H. Draper","guid":"fe84097c-2f79-45f8-8f4b-1bd6617a6159","individualid":1834736,"phonetype1":"780-242-1774","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.michaeldraper.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124794","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Draper","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":300,"name":"Lynne M. Gullion","guid":"89bfedc6-5d9a-48df-8400-20c0157c9cec","individualid":1478074,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.dreamhomesedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398785725","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478074.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lynne","lastname":"Gullion","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":301,"name":"Darlene A. Reid","guid":"b32bc0cf-0cfe-4819-a879-e9fb65f65665","individualid":1621783,"phonetype1":"780-266-1300","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"http://www.visionsells.com","websitetype2":"https://www.facebook.com/RealtyExecutivesVision","websitetype3":"https://www.linkedin.com/in/darlene-reid-a2ab293a","websitetype4":"https://twitter.com/yegvision","websitetype5":"","email1":"402352043","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1621783.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darlene","lastname":"Reid","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":302,"name":"Bernice A. Friesen","guid":"dc6cfa13-eb08-4859-a319-ac0f83e3b30c","individualid":1477950,"phonetype1":"780-995-1092","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.ABhome.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733437","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477950.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bernice","lastname":"Friesen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":303,"name":"Pamela J. Dykstra","guid":"bcd80213-ef4a-461b-afa8-1fb8fb8b9d67","individualid":1993717,"phonetype1":"780-984-6199","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.ABhome.ca","websitetype2":"https://www.facebook.com/pamdykstrarealtor/","websitetype3":"https://www.linkedin.com/in/pam-dykstra-680b83100?trk=nav_responsive_tab_profile","websitetype4":"","websitetype5":"","email1":"396169065","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1276755.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Pamela","lastname":"Dykstra","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":304,"name":"Debbie L. Berube","guid":"48070711-fe85-400f-902c-45002d1e18ee","individualid":1563401,"phonetype1":"780-722-3399","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661941","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1148807.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Debbie","lastname":"Berube","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":305,"name":"Deidre B. Harrison","guid":"2f4dfd85-5d15-4ea8-8c15-b7a838b83b98","individualid":1956365,"phonetype1":"780-850-0929","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120256","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1956365.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Deidre","lastname":"Harrison","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":306,"name":"Cody C. LeClair","guid":"654bae1e-285d-4051-80c0-ac419a7aded2","individualid":1880847,"phonetype1":"780-235-1218","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114618","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cody","lastname":"LeClair","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":307,"name":"Tracy L. Sestito","guid":"f2ecf0d3-724d-4c71-82b3-5a473c054ffb","individualid":1478450,"phonetype1":"780-887-4117","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.nowrealestategroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114845","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478450.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tracy","lastname":"Sestito","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":308,"name":"Tom Li","guid":"13b494a3-b37a-46e7-9bb3-2f5330c6604d","individualid":1478543,"phonetype1":"780-970-2288","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.tomli.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601132","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010246.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tom","lastname":"Li","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":309,"name":"Glenn G. Fisher","guid":"23a92f11-ed6c-4231-8c18-a58b7db70140","individualid":1477913,"phonetype1":"780-913-2493","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://www.glennfisher.com","websitetype2":"https://www.facebook.com/glennfisherteam/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396306883","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477913.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Glenn","lastname":"Fisher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":310,"name":"Heather E. Moellering","guid":"75cb4243-38f9-484d-b847-57a63a33f6cf","individualid":1478787,"phonetype1":"780-699-7914","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://www.glennfisher.com","websitetype2":"https://www.facebook.com/glennfisherteam/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396306854","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478787.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Heather","lastname":"Moellering","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":311,"name":"Brenda L. King","guid":"771aa274-d85b-4b2c-8997-c5a5077c14c4","individualid":1949106,"phonetype1":"780-938-6077","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.BrendaKingRealtor.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110358","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brenda","lastname":"King","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":312,"name":"Sonia Tarabay","guid":"07af8b79-1065-4f4d-88b2-3e4e84ca410b","individualid":1868451,"phonetype1":"780-707-6015","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.SONIASELLS.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396475086","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1868451.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sonia","lastname":"Tarabay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":313,"name":"Andrea L. Moen","guid":"f4e83e3b-8302-478b-8a1e-7fb447b68908","individualid":1478788,"phonetype1":"780-246-4266","phonetype2":"","phonetype3":"","phonetype4":"780-486-2126","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782104","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478788.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Andrea","lastname":"Moen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":314,"name":"Kimberly A. Graham","guid":"96b0150b-8c35-48fa-99cf-3b326d659f9b","individualid":1982736,"phonetype1":"780-902-5556","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.kimberlygraham.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124884","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kimberly","lastname":"Graham","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":315,"name":"Kelvin H. Leong","guid":"27c966b8-0a40-421f-aa60-dd3fa1b92e14","individualid":1504093,"phonetype1":"780-668-2938","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.TheGreatHomeSearch.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601769","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelvin","lastname":"Leong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":316,"name":"Lakhwinder Brar","guid":"e4bece08-4bac-4461-86f2-a81c00a1f9d8","individualid":1986107,"phonetype1":"780-935-4565","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://sukhihome.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602794","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lakhwinder","lastname":"Brar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":317,"name":"Sukhwinder Randhawa","guid":"50732629-12d7-40f0-a8a9-7a4ea1e7f1a1","individualid":1479073,"phonetype1":"780-909-5333","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110868","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sukhwinder","lastname":"Randhawa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":318,"name":"Indy P. Khosah","guid":"cd5dbc89-d6eb-4f59-a445-a905499680a3","individualid":1677981,"phonetype1":"780-938-4639","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.indyhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602125","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1677981.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Indy","lastname":"Khosah","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:17","updated_at":"2017-08-11 00:10:17"},{"id":319,"name":"Jeneen L. Marchant","guid":"8daca6e3-843b-4f79-a92e-ad070e633304","individualid":1822851,"phonetype1":"780-904-4240","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114923","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jeneen","lastname":"Marchant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":320,"name":"Gregory G. Johnson","guid":"68e39ee0-4a70-4023-b482-40a8ac1263dc","individualid":1487977,"phonetype1":"780-449-2800","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125273","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gregory","lastname":"Johnson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":321,"name":"Tyler J. Suchan","guid":"bb06d66d-4177-4c76-9115-73038acd0574","individualid":1962424,"phonetype1":"780-945-1318","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.2percentedmonton.com/","websitetype2":"http://www.facebook.com/tyler.suchan.5","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402747387","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tyler","lastname":"Suchan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":322,"name":"Cathy Cookson","guid":"f608ce7a-15cd-4bdf-9b5a-2d6d7344258c","individualid":1935934,"phonetype1":"780-217-2718","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://cathycookson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125029","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cathy","lastname":"Cookson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":323,"name":"Timothy S. Baker","guid":"b195fbaa-cd94-4e2e-87cb-d20b75ed1331","individualid":1934880,"phonetype1":"780-318-2253","phonetype2":"","phonetype3":"","phonetype4":"780-998-0344","phonetype5":"","websitetype1":"http://www.TimBakerRealty.com","websitetype2":"https://www.facebook.com/remaxTimBaker/","websitetype3":"https://www.linkedin.com/in/tim-baker-199ab4132/","websitetype4":"","websitetype5":"","email1":"398430388","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1234341.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Timothy","lastname":"Baker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":324,"name":"Conrad A. Bitangcol","guid":"c625c2a0-f2ee-4df9-980d-c59b2dbd6f8e","individualid":1917530,"phonetype1":"780-271-2664","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.realestateexperience.ca","websitetype2":"https://www.facebook.com/TheEdmontonRealEstateExperience","websitetype3":"","websitetype4":"https://twitter.com/ConradBitangcol","websitetype5":"","email1":"398803549","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Conrad","lastname":"Bitangcol","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":325,"name":"Darlene M. Palmquist","guid":"f2a33743-8914-43d0-a7af-346a57b37a1a","individualid":1477396,"phonetype1":"780-919-8607","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.darlenepalmquist.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117564","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Darlene","lastname":"Palmquist","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":326,"name":"Solomon A. Davies","guid":"26b83bbf-a2f6-4bc2-8593-5b472c5a773b","individualid":1477731,"phonetype1":"780-328-3878","phonetype2":"","phonetype3":"","phonetype4":"888-315-4845","phonetype5":"","websitetype1":"http://solomondavies.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120004","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Solomon","lastname":"Davies","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":327,"name":"Joan Greenough","guid":"8e88cbc2-dc15-4e76-814f-9c6ccb755677","individualid":1478050,"phonetype1":"780-239-9562","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123518","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joan","lastname":"Greenough","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":328,"name":"Nick Jack","guid":"bdbe68f3-05c5-4539-9bf1-ae4aaa45789c","individualid":1521449,"phonetype1":"780-708-7233","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.polarissells.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402712208","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nick","lastname":"Jack","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":329,"name":"Shawna L. Pindar","guid":"7c883e88-2341-4809-86c8-0ffdcb3a745d","individualid":1478999,"phonetype1":"780-455-0777","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.shawnapindar.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112110","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shawna","lastname":"Pindar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":330,"name":"Lori-Anne K. Hayne","guid":"a1001908-d48a-4e53-b6db-fe08203b7d42","individualid":1992860,"phonetype1":"780-239-7755","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122142","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lori-Anne","lastname":"Hayne","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":331,"name":"Darin B. Baxandall","guid":"0276cc34-d050-49f6-8625-2cedbd4130c0","individualid":1477343,"phonetype1":"780-441-5899","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.darinbaxandall.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838840","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477343.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darin","lastname":"Baxandall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":332,"name":"Carolyn N. Knispel","guid":"205c20bc-d1b2-47d7-b9d2-a7cc1dbc0f71","individualid":1485853,"phonetype1":"780-231-9755","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113323","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1485853.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carolyn","lastname":"Knispel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":333,"name":"Luis F. Claro","guid":"9372491a-4139-4bb6-8fd5-1495e921bd82","individualid":2003027,"phonetype1":"780-977-7757","phonetype2":"","phonetype3":"","phonetype4":"780-756-1125","phonetype5":"","websitetype1":"http://www.capcityrealtygroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398662033","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Luis","lastname":"Claro","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":334,"name":"Bruce G. Weiss","guid":"c877ae18-6d83-4a1f-977e-bcce492d16cb","individualid":1479652,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.bruceweiss.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759592","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479652.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bruce","lastname":"Weiss","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":335,"name":"Qin Wang","guid":"29037f55-876c-4517-832c-8a18bf7a3753","individualid":1955595,"phonetype1":"780-952-6881","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602621","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Qin","lastname":"Wang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":336,"name":"Margaret J. Dusterhoft","guid":"fa055e0b-0778-438b-8276-3f77b69a37ed","individualid":1477829,"phonetype1":"780-818-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://buyorsellwithmaggie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397638428","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1107588.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Margaret","lastname":"Dusterhoft","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":337,"name":"Dixie Gushue","guid":"d199ab9d-c08d-427e-a067-ec33878b3a1b","individualid":1478079,"phonetype1":"780-721-5757","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.dixiegushue.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123444","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478079.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dixie","lastname":"Gushue","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":338,"name":"Lori Hunt","guid":"0dd29604-928b-402c-abcc-55e6557a61ea","individualid":1719179,"phonetype1":"780-231-3682","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.lorihunt.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398707382","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lori","lastname":"Hunt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":339,"name":"Paulette M. Maltais","guid":"fa7e3062-08b4-4595-8652-f4a04ffd11f4","individualid":1478639,"phonetype1":"780-907-4550","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.slhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601393","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010604.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Paulette","lastname":"Maltais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":340,"name":"Sam H. Hachem","guid":"993202b9-2612-41c8-9466-540e67dc67a7","individualid":1500193,"phonetype1":"780-660-0350","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.samhachem.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120474","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sam","lastname":"Hachem","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":341,"name":"Michael E. Grekul","guid":"5a528d18-1f8c-4488-9171-6a8a73e044ef","individualid":1535582,"phonetype1":"780-699-1757","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://mikegrekul.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121782","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1144417.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Grekul","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":342,"name":"Stephen W. Segal","guid":"ea64ca84-7585-471b-aee6-c6bc05805de4","individualid":1930775,"phonetype1":"780-405-5548","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.itssold.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113579","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stephen","lastname":"Segal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":343,"name":"Teresa Koziel","guid":"4c37d907-5735-4dba-8474-8badf7600a58","individualid":1478408,"phonetype1":"780-908-1548","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.teresakoziel.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398107848","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1100958.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Teresa","lastname":"Koziel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":344,"name":"Doug M. McRae","guid":"9144b5c7-b186-4fb4-88ca-ce52131cf0f0","individualid":1478734,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112682","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"McRae","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":345,"name":"William Hickey","guid":"abf63b02-5eb6-4814-8eab-cca4ee7f6390","individualid":1481828,"phonetype1":"780-499-3610","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.willhickey.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118655","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1481828.jpg","position":"Associate","permitfreetextemail":0,"firstname":"William","lastname":"Hickey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":346,"name":"Barbara G. Grodaes","guid":"a881b85c-3740-4647-a5c9-4bb4b7039283","individualid":1478063,"phonetype1":"780-914-8804","phonetype2":"","phonetype3":"","phonetype4":"780-756-9991","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396732312","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barbara","lastname":"Grodaes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":347,"name":"Leon Tam","guid":"f7db460c-2ba9-45f4-93d6-8547c4e489e3","individualid":1479444,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111543","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leon","lastname":"Tam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":348,"name":"Sudhir Sam Sahi","guid":"add9bc1f-990c-4aea-9ff4-85821fe2eca3","individualid":1479180,"phonetype1":"780-267-3001","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.Findedmontonproperlistings.com","websitetype2":"http://www.facebook.com/sudhir.s.sahi","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601048","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sudhir Sam","lastname":"Sahi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":349,"name":"Neil C. Rouse","guid":"15d1cb53-4dcf-4847-b6dd-b6a04edd4a01","individualid":1479148,"phonetype1":"780-919-2862","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.neilrouse.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601627","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479148.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Neil","lastname":"Rouse","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":350,"name":"Taryn E. Berndt","guid":"986668f5-a130-402e-b208-7121c21d49ac","individualid":1477380,"phonetype1":"780-951-4181","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400279385","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011990.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Taryn","lastname":"Berndt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":351,"name":"Denise A. Royer","guid":"4f9b9769-ff89-4420-80d4-8bb1400c555d","individualid":1479153,"phonetype1":"780-446-2012","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.royerproperties.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118240","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Denise","lastname":"Royer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":352,"name":"Debbie Keatley","guid":"f5b3c527-822d-4930-ac6c-e707d28c06e0","individualid":1478326,"phonetype1":"780-951-0555","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.DebKeatley.com","websitetype2":"https://www.facebook.com/DebbieKeatleyRealtyInc/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397431019","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478326.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Debbie","lastname":"Keatley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":353,"name":"Rick Lough","guid":"7168b284-564a-4536-ba49-0e766e5289c5","individualid":1478571,"phonetype1":"780-718-2556","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.RickLough.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398749708","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478571.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rick","lastname":"Lough","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":354,"name":"Irina Mierzewski","guid":"ff68ad5b-0572-4648-a7ad-32bb1bdc7022","individualid":1601754,"phonetype1":"780-991-9764","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.irinahomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551370","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1601754.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Irina","lastname":"Mierzewski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":355,"name":"Darrell W. Zapernick","guid":"dd23afad-ae25-40b9-bc98-e11f1057bba9","individualid":1479767,"phonetype1":"780-907-0016","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.dzapernick.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400973276","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Darrell","lastname":"Zapernick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":356,"name":"Mike Muranetz","guid":"f0f5af47-2e22-4c07-90f7-f74e9a909577","individualid":1526028,"phonetype1":"780-242-5229","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://EdmontonWebHomes.com/","websitetype2":"https://www.facebook.com/EdmontonWebHomes/","websitetype3":"http://ca.linkedin.com/in/MikeMuranetz","websitetype4":"https://twitter.com/EdmontonWebHome","websitetype5":"","email1":"399688524","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1138824.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mike","lastname":"Muranetz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":357,"name":"Audrey E. Abuan","guid":"46a6b623-28d4-44d3-b0d8-300440e94f51","individualid":1477222,"phonetype1":"780-910-5179","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://EdmontonWebHomes.com","websitetype2":"https://www.facebook.com/EdmontonWebHomes","websitetype3":"https://ca.linkedin.com/in/audreyabuan","websitetype4":"https://twitter.com/EdmontonWebHome","websitetype5":"","email1":"398803467","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010792.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Audrey","lastname":"Abuan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":358,"name":"Albert J. Kozel","guid":"be7ea901-1882-4775-975e-c693d67a127b","individualid":1478406,"phonetype1":"780-233-3962","phonetype2":"","phonetype3":"","phonetype4":"780-665-6081","phonetype5":"","websitetype1":"http://www.albertkozel.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124628","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1127308.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Albert","lastname":"Kozel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":359,"name":"Ciaran D. O'Neill","guid":"246afe48-45e2-4bb3-894d-baf367278427","individualid":1478911,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.ciaranoneill.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112115","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ciaran","lastname":"O'Neill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":360,"name":"Sarah J. Leib","guid":"731196db-250e-43e6-8b7f-9199b40a438f","individualid":1912564,"phonetype1":"780-913-8322","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.sarahleib.com","websitetype2":"https://www.facebook.com/sarahjleib/#","websitetype3":"https://ca.linkedin.com/in/sarahleib","websitetype4":"","websitetype5":"","email1":"398749725","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1912564.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sarah","lastname":"Leib","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":361,"name":"Alan H. Thom","guid":"e5077a0b-9f29-4e0b-960b-3230c6b6a796","individualid":1479485,"phonetype1":"780-449-2800","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360844","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Alan","lastname":"Thom","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":362,"name":"Brian L. Fedorick","guid":"b433015c-be03-487e-8964-cf3f873483ae","individualid":1477892,"phonetype1":"780-446-3125","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119028","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Fedorick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":363,"name":"Mirella A. Esposito","guid":"7dcc313a-5eb6-4dfa-b39e-5a0d34723a49","individualid":1687417,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.ESPO.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688595","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1173935.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mirella","lastname":"Esposito","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":364,"name":"Joe D. Esposito","guid":"1e660438-86df-4bf3-b2ba-f9ee4f324491","individualid":1852947,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.ESPO.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602259","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1199345.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Joe","lastname":"Esposito","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:18","updated_at":"2017-08-11 00:10:18"},{"id":365,"name":"Stephen A. Koehn","guid":"9d2dc0ca-3e12-4176-a19f-f3bf332f290f","individualid":1863975,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110750","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stephen","lastname":"Koehn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":366,"name":"Kevin Chubey","guid":"417d2d80-6e3a-4a15-a5d5-d1e847eedabd","individualid":1535284,"phonetype1":"780-499-9170","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"http://www.kevinchubey.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117825","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1535284.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Chubey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":367,"name":"Lisa M. Brown","guid":"d6388ab5-0d08-4821-9882-a8dbc9ec6a33","individualid":1659574,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.youredmontonhomes.com","websitetype2":"http://www.facebook.com/YourEdmontonHomes/","websitetype3":"https://ca.linkedin.com/in/lisabrown7","websitetype4":"https://twitter.com/LisaBrownRealty","websitetype5":"","email1":"397526947","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1167478.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lisa","lastname":"Brown","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":368,"name":"Trevor H. Waddell","guid":"850fad91-ced9-4226-8af5-a2a1c5967164","individualid":1600022,"phonetype1":"780-233-6800","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.WaddellSells.com","websitetype2":"https://www.facebook.com/WaddellSells/","websitetype3":"https://www.linkedin.com/feed/","websitetype4":"https://twitter.com/TrevorWaddell","websitetype5":"","email1":"398829247","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1158024.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Trevor","lastname":"Waddell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":369,"name":"Peter M. Leveille","guid":"15bcfaa5-9965-42c6-8753-91207e97508e","individualid":1671043,"phonetype1":"780-951-1064","phonetype2":"","phonetype3":"","phonetype4":"780-487-9481","phonetype5":"","websitetype1":"http://www.abrealtylistings.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123876","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1144397.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Leveille","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":370,"name":"Peter R. Leveille","guid":"7d171c68-82bb-43f4-9a27-de199b07589c","individualid":1671042,"phonetype1":"780-487-4040","phonetype2":"","phonetype3":"","phonetype4":"780-487-9481","phonetype5":"","websitetype1":"http://www.abrealtylistings.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361016","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011161.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Peter","lastname":"Leveille","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":371,"name":"Todd W. Bradley","guid":"9b3c2bad-1dab-486d-91ed-8f99f654db32","individualid":1477473,"phonetype1":"780-465-3180","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.toddanddana.com","websitetype2":"https://www.facebook.com/toddanddana","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908848","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Todd","lastname":"Bradley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":372,"name":"Ashley L. Moore","guid":"7273872f-5ca4-4053-b460-c90e6b51556a","individualid":1725206,"phonetype1":"780-340-5559","phonetype2":"","phonetype3":"","phonetype4":"780-998-7961","phonetype5":"","websitetype1":"http://www.ashleymoore.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400707448","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1175675.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ashley","lastname":"Moore","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":373,"name":"Samir Sawhney","guid":"278a4cc9-7f16-4527-817e-d999cadcf44b","individualid":1479213,"phonetype1":"602-448-9110","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398452250","email2":"","email3":"","email4":"","photo":"","position":"Office Manager","permitfreetextemail":0,"firstname":"Samir","lastname":"Sawhney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":374,"name":"Todd Mansell","guid":"8354d943-9f7f-4228-b431-ed219ff0970e","individualid":1532137,"phonetype1":"780-239-7355","phonetype2":"","phonetype3":"","phonetype4":"780-416-4787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402512920","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Todd","lastname":"Mansell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":375,"name":"Christy M. Cantera","guid":"3c1fd869-0990-448a-b4ef-65fa4114220c","individualid":1899374,"phonetype1":"780-974-5546","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.christycantera.com","websitetype2":"https://www.facebook.com/christycanterarealty/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402777092","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christy","lastname":"Cantera","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":376,"name":"Sheri Lukawesky","guid":"648512eb-226a-487a-b59a-e1f189de2f83","individualid":2019607,"phonetype1":"780-996-0773","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://christycantera.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908937","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sheri","lastname":"Lukawesky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":377,"name":"Sergio Maione","guid":"46db02f3-77ee-4eed-bd5c-6eb4b748b6b6","individualid":1971225,"phonetype1":"780-231-7863","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.sergiomaione.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113790","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sergio","lastname":"Maione","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":378,"name":"Qingbin Li","guid":"7b0e1b0f-98ab-4ca8-977a-976e0f6c581f","individualid":1998268,"phonetype1":"780-937-6536","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116096","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Qingbin","lastname":"Li","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":379,"name":"James J. Knull","guid":"b90145f7-c2b5-4957-b8e0-97b3b10cf55f","individualid":1801993,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.jamesknull.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121698","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"Knull","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":380,"name":"Michelle M. Viney","guid":"a45fb70d-ca37-47a3-8c63-76d6f190844c","individualid":1922802,"phonetype1":"780-490-8139","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120805","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michelle","lastname":"Viney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":381,"name":"Rob G. MacRae","guid":"ce5c0f35-dc29-48e2-b602-2ab608ecdafc","individualid":1478618,"phonetype1":"780-986-8407","phonetype2":"","phonetype3":"","phonetype4":"780-986-4494","phonetype5":"","websitetype1":"http://www.macrae-sells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122784","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011399.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rob","lastname":"MacRae","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":382,"name":"Ed S. Massa","guid":"67486e3f-edcb-4e32-bbf4-9be02d0d7f79","individualid":1673494,"phonetype1":"780-993-2409","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.EdMassa.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829268","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ed","lastname":"Massa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":383,"name":"Laura C. Lambert","guid":"eca03b1d-88a5-4f2c-9103-9bc121d51675","individualid":1743711,"phonetype1":"780-940-8852","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://lauralambert.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109125","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Laura","lastname":"Lambert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":384,"name":"Adam Wilson","guid":"7392c3b6-8f3a-4f85-b895-171f0ff11f6c","individualid":2021156,"phonetype1":"780-887-2162","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.adamtwilson.com","websitetype2":"https://www.facebook.com/WilsonYegre/","websitetype3":"http://www.linkedin.com/in/adam-wilson-88842b7a","websitetype4":"https://twitter.com/WilsonYegre","websitetype5":"","email1":"399688858","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1300937.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Adam","lastname":"Wilson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":385,"name":"Steve Balay","guid":"9ad772ed-1fd4-437b-b264-eb151d0730f4","individualid":1477310,"phonetype1":"780-456-5656","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://stevebalay.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117582","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011832.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Balay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":386,"name":"Jason A. Thomas","guid":"c77d2b39-43c4-4f33-8afd-6910034403ea","individualid":1479491,"phonetype1":"780-499-5696","phonetype2":"","phonetype3":"","phonetype4":"780-431-1600","phonetype5":"","websitetype1":"http://www.jasonthomas.ca","websitetype2":"","websitetype3":"http://ca.linkedin.com/in/jason-thomas-69626714","websitetype4":"http://twitter.com/edmontonian","websitetype5":"","email1":"398829178","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479491.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Thomas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":387,"name":"Jasen Courtepatte","guid":"cfd86f0f-78ad-4276-bb3a-2f26663c4095","individualid":1477680,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://calljtoday.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361072","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jasen","lastname":"Courtepatte","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":388,"name":"Danica Hubbard","guid":"285f54ab-bb20-4bb6-8c31-85adc25c5859","individualid":2007740,"phonetype1":"780-884-1009","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://danicahubbard.com","websitetype2":"https://www.facebook.com/danicahubbardrealestate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116791","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/2007740.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Danica","lastname":"Hubbard","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":389,"name":"Jodie M. Allen","guid":"c1597046-593c-418d-877a-de1465f49e2c","individualid":1477249,"phonetype1":"780-906-0993","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.jodieallen.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396920870","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477249.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jodie","lastname":"Allen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":390,"name":"Alicia Andreasen","guid":"4feec63b-bce6-4797-86e6-8cc1f93f20f0","individualid":1944914,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.LivinginEdmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908895","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1240539.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alicia","lastname":"Andreasen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":391,"name":"Sherri L. Naslund Dawson","guid":"379589d7-e670-42e7-afb8-4c673d6471ac","individualid":1478864,"phonetype1":"780-239-0514","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.sherrinaslund.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111715","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sherri","lastname":"Naslund Dawson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":392,"name":"Karen L. Kulyk","guid":"b7817f73-186c-4868-b488-527dd5776f6c","individualid":1842337,"phonetype1":"780-983-6896","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.sellingbeaumont.com","websitetype2":"http://www.facebook.com/sellingbeaumont/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733624","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1842337.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karen","lastname":"Kulyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":393,"name":"Penny J. Gairdner","guid":"dc887cb8-56af-498e-bbfb-17a23703c92f","individualid":1789202,"phonetype1":"780-720-3462","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.sellingbeaumont.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398685182","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Penny","lastname":"Gairdner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":394,"name":"Yuriy Fleysher","guid":"d35568d3-c3f2-4f85-b6ea-94bbcfbd94b1","individualid":1477923,"phonetype1":"780-982-2248","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400046639","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477923.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Yuriy","lastname":"Fleysher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":395,"name":"Grant Pankiw","guid":"4bd43f3e-e73c-496f-9960-2c9b6950ac06","individualid":1478944,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.grantpankiw.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109516","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Grant","lastname":"Pankiw","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":396,"name":"Daniel J. Boticki","guid":"6c10dc8c-fba4-4bc6-aa99-e836625f27f3","individualid":1919700,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122474","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daniel","lastname":"Boticki","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":397,"name":"Jane E. Kelly","guid":"e065e900-ea8e-41f1-8457-4f136ce4539a","individualid":1478332,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.janekellysells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361121","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1100380.gif","position":"Associate","permitfreetextemail":0,"firstname":"Jane","lastname":"Kelly","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":398,"name":"Catherine G. Karleen","guid":"a7cc029b-32f9-4c10-82a0-8bbea1624cff","individualid":2009369,"phonetype1":"780-318-3925","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://ckarleenrealty.ca/","websitetype2":"https://www.facebook.com/CathyKarleenRealEstate/","websitetype3":"","websitetype4":"https://twitter.com/cathykarleen","websitetype5":"","email1":"398662042","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Catherine","lastname":"Karleen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":399,"name":"Lynn Lowe","guid":"6be45439-6c99-4e5c-9797-78f9df25de1f","individualid":1478575,"phonetype1":"780-974-7352","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.encoresells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117944","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478575.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lynn","lastname":"Lowe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":400,"name":"Lawrence Chung","guid":"c66a5468-2cb4-4320-be8a-49ebe4a80467","individualid":1477626,"phonetype1":"780-604-0900","phonetype2":"","phonetype3":"","phonetype4":"780-437-5256","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601323","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lawrence","lastname":"Chung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":401,"name":"Eddy A. Jomha","guid":"04d6c6fe-84a4-4978-9de9-653430a04a0c","individualid":1884484,"phonetype1":"780-709-7555","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398781766","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eddy","lastname":"Jomha","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":402,"name":"Billy M. Jomha","guid":"82174a14-6b0d-4f51-b860-9b0f10186dba","individualid":1882314,"phonetype1":"780-710-8876","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.jomha.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602309","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1882314.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Billy","lastname":"Jomha","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":403,"name":"Jennifer E. Murphy","guid":"7e543dca-5579-42d0-9159-42ce8decc3fb","individualid":1907210,"phonetype1":"780-710-4328","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602411","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1907210.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Murphy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":404,"name":"Matteo P. Saccomanno","guid":"fc1c05d9-e187-4b81-b64b-11d21d9c5ff5","individualid":1975555,"phonetype1":"780-266-1166","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.selledmontonhomes.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602741","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1262237.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Matteo","lastname":"Saccomanno","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":405,"name":"Adam Huggi","guid":"be9db037-0712-4e9b-850d-0dae97d026b2","individualid":2030519,"phonetype1":"780-729-6611","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681937","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Adam","lastname":"Huggi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":406,"name":"Justin J. Vega","guid":"fd6cd1af-0ca1-4ed8-8f43-ed6532fd018b","individualid":1479593,"phonetype1":"780-710-3979","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402747352","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Vega","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":407,"name":"Holly Kowalchuk","guid":"18e86af5-e91f-4385-ac88-f9d7bf39b23c","individualid":1719383,"phonetype1":"780-884-6116","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.macmillanrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602155","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Holly","lastname":"Kowalchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":408,"name":"Nathan P. Clark","guid":"a884bd31-d508-4102-93a0-9408804ce532","individualid":1566632,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111834","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nathan","lastname":"Clark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":409,"name":"Gary Kirkham","guid":"98b3949e-6922-40c8-9a72-c178f98dbe4a","individualid":1478361,"phonetype1":"780-995-2400","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.gkirkham.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402325109","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011007.gif","position":"Broker","permitfreetextemail":0,"firstname":"Gary","lastname":"Kirkham","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":410,"name":"Eden H. Hampson","guid":"f326313c-0c23-4697-b409-4f8f844e27ab","individualid":1478102,"phonetype1":"780-438-3336","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.EdenHampson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688304","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eden","lastname":"Hampson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":411,"name":"Christopher E. Hampson","guid":"13c6245b-7114-4097-a83a-7918d87902d8","individualid":1597263,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123226","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christopher","lastname":"Hampson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:19","updated_at":"2017-08-11 00:10:19"},{"id":412,"name":"Suong L. Tran","guid":"57d80c37-4003-4f16-874b-71dd24d38c4d","individualid":1975175,"phonetype1":"780-802-0703","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://shirleytran.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401635061","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1261958.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Suong","lastname":"Tran","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":413,"name":"Julian P. Szklarz","guid":"ea9b66c4-7c6c-4c78-8aaa-5ee498598668","individualid":1479440,"phonetype1":"780-483-0601","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"http://www.juliansells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124650","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479440.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Julian","lastname":"Szklarz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":414,"name":"Oriana L. Cronin","guid":"3738b10d-902d-4fa4-aea3-2d9407db7e39","individualid":1477700,"phonetype1":"780-934-5099","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"http://www.juliansells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120386","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477700.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Oriana","lastname":"Cronin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":415,"name":"Morgan A. Moen","guid":"7f9ea01e-30d0-4f82-bc56-a9a8afc86707","individualid":1478789,"phonetype1":"780-935-9200","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112176","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Morgan","lastname":"Moen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":416,"name":"Wayne Moen","guid":"69ae370b-7309-4822-866b-a8a52ebc8e16","individualid":1478790,"phonetype1":"780-504-6789","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.waynemoen.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124902","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wayne","lastname":"Moen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":417,"name":"David H. Luong","guid":"2a12e984-4a6b-4be5-917f-5b784ecf50ce","individualid":1830615,"phonetype1":"780-995-6526","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/daluong","websitetype3":"https://www.linkedin.com/in/luong","websitetype4":"http://twitter.com/#!/luongdave","websitetype5":"","email1":"398551375","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1195810.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Luong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":418,"name":"Chelsea M. Polgar","guid":"0a40a89b-9c3b-4873-af89-e0b05686648e","individualid":2011738,"phonetype1":"780-298-9737","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969419","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chelsea","lastname":"Polgar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":419,"name":"Jessie L. McCracken","guid":"5043807f-dbb2-4971-8fdc-0dc3fa4e5e36","individualid":1945634,"phonetype1":"780-222-8864","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"http://www.sarajessie.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402260585","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1241033.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Jessie","lastname":"McCracken","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":420,"name":"Lynne K. Griffiths","guid":"11bd678e-d532-4221-964f-12602c54f2be","individualid":1478061,"phonetype1":"780-887-8864","phonetype2":"","phonetype3":"","phonetype4":"403-536-6989","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117976","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lynne","lastname":"Griffiths","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":421,"name":"Keir W. McIntyre","guid":"e8113a04-3f84-4283-b640-66d4593db549","individualid":1591852,"phonetype1":"780-777-2890","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"http://www.sarasotarealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111615","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Keir","lastname":"McIntyre","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":422,"name":"Kristin M. Boser","guid":"1a51d274-aff2-453b-ae0b-e64605fed4cc","individualid":1640790,"phonetype1":"780-298-0766","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"http://www.sarasotarealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119628","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kristin","lastname":"Boser","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":423,"name":"Janice L. Scott","guid":"97534936-b4ae-4fab-9c19-6392dc6ff05f","individualid":1991371,"phonetype1":"780-970-7268","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.scottedmontonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122101","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1991371.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Janice","lastname":"Scott","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":424,"name":"Lesa M. Patermann","guid":"adca1c74-d53f-4abc-8374-469625fd0833","individualid":1592690,"phonetype1":"780-710-7253","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.lesapatermann.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112332","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lesa","lastname":"Patermann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":425,"name":"Laura Green","guid":"a69c72bd-02fe-4dad-9fe1-5b4c41374459","individualid":1478048,"phonetype1":"780-915-2816","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.lauragreen.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120950","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011920.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Laura","lastname":"Green","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":426,"name":"Elan D. Lynes","guid":"14f0db8d-854d-4730-8d4f-474ffcdbfb2c","individualid":1933499,"phonetype1":"780-970-3616","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.brentmacintosh.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115372","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1233520.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Elan","lastname":"Lynes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":427,"name":"Kendell M. Olkanych","guid":"06c1c178-1492-4a24-8def-f901d0f40473","individualid":1662814,"phonetype1":"780-913-1340","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.olkanych.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120766","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kendell","lastname":"Olkanych","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":428,"name":"Terrie M. Reekie","guid":"906a3f0f-2abb-4aaf-a958-306b864a36e2","individualid":1479089,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.terrie.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601104","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010317.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Terrie","lastname":"Reekie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":429,"name":"Hai H. Ly","guid":"ab8c9bd7-81b2-4ab7-864e-d8ae1972203b","individualid":1970519,"phonetype1":"780-238-8838","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121637","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Hai","lastname":"Ly","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":430,"name":"Doug A. Donnelly","guid":"4519f9f0-7b5f-4ce1-bff3-b14c4c3526ff","individualid":1477789,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.thedocteam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361155","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1117248.gif","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"Donnelly","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":431,"name":"Monte P. Gannon","guid":"e8acbd53-132a-4a2b-8dde-a283a78b9cff","individualid":1748383,"phonetype1":"780-952-8541","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.gannonyeg.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118307","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Monte","lastname":"Gannon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":432,"name":"Cindy L. Gannon","guid":"ddc7230a-42f1-4d20-862f-4b856d4d30da","individualid":1931245,"phonetype1":"780-975-3918","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.gannonyeg.com","websitetype2":"https://www.facebook.com/GannonYeg/","websitetype3":"","websitetype4":"https://twitter.com/gannonyeg","websitetype5":"","email1":"398430381","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cindy","lastname":"Gannon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":433,"name":"Gordon D. Reekie","guid":"cac5a308-bd05-4110-aca8-b4a79f0f8aaa","individualid":1566894,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.terrie.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111966","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1149419.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Gordon","lastname":"Reekie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":434,"name":"Larry D. Hahn","guid":"bd4c5596-5b01-4d51-86d5-3db1ed5906f2","individualid":1478089,"phonetype1":"780-990-4342","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.larryhahn.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111090","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Larry","lastname":"Hahn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":435,"name":"Jessica E. Jones","guid":"a4a192e1-e27f-4875-ab13-8b9b499dc6fe","individualid":1478289,"phonetype1":"780-983-9777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.propertiesbyjones.com","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/jessjonesedm","websitetype5":"","email1":"398387348","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jessica","lastname":"Jones","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":436,"name":"Christopher Proctor","guid":"2cad1d36-ebf0-4329-935b-c8eefee9ae7c","individualid":1839358,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.proctorteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396688087","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1197462.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christopher","lastname":"Proctor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":437,"name":"Patti Proctor","guid":"80d827ea-de2e-496c-b00a-d700f7f6ad78","individualid":1479043,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111760","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011019.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Patti","lastname":"Proctor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":438,"name":"Tahnee Botten","guid":"902a4e48-d8a3-49f2-b60e-cf5b0b776653","individualid":1871101,"phonetype1":"780-237-8245","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"http://www.weselledmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110578","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tahnee","lastname":"Botten","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":439,"name":"Bill Martens","guid":"4968853b-ca79-40f5-9bb1-ee06ba63b5c9","individualid":1478655,"phonetype1":"780-913-1990","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121871","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Martens","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":440,"name":"Sara J. Kalke","guid":"6e5a3b1c-7ba8-4b2d-bf10-757f9ef5c402","individualid":1791953,"phonetype1":"780-710-7669","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.sarakalke.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110742","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1791953.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sara","lastname":"Kalke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":441,"name":"Glen Teghtmeyer","guid":"56bc6871-bbc7-437f-9a40-a5b147d18b99","individualid":1479465,"phonetype1":"780-916-7171","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.glensells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688338","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Glen","lastname":"Teghtmeyer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":442,"name":"Johnny V. Bede","guid":"0f121311-8918-4f49-bdb7-dc4afe55a027","individualid":1910565,"phonetype1":"780-490-5006","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://encoresells.com/agent-8919-Johnny_Bede.html","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602415","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Johnny","lastname":"Bede","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":443,"name":"Rad Ugljesic","guid":"73882006-cfe3-4ef3-b0e2-8c1688002ec9","individualid":1479558,"phonetype1":"780-907-8184","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.radu.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398331934","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010676.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rad","lastname":"Ugljesic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":444,"name":"Frank Filice","guid":"ce1ce904-ad53-4626-b80d-9ac2c4ac243a","individualid":1477901,"phonetype1":"780-993-7737","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.frankfilice.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402693171","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Frank","lastname":"Filice","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":445,"name":"Joan M. McFall","guid":"429482b1-16dd-4906-b4a2-82e67e6c9b60","individualid":1599085,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.joanmcfall.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122857","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joan","lastname":"McFall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":446,"name":"Byron G. Bray","guid":"baa62b00-4a4a-4626-b898-b8cff72d9258","individualid":1477482,"phonetype1":"780-916-9640","phonetype2":"","phonetype3":"","phonetype4":"780-987-2131","phonetype5":"","websitetype1":"http://www.realestateindevon.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113379","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011048.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Byron","lastname":"Bray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":447,"name":"June M. Fediuk","guid":"30dc3420-1abd-45c5-acbb-d78e0d6bfb91","individualid":1477891,"phonetype1":"780-818-5863","phonetype2":"","phonetype3":"","phonetype4":"780-437-5321","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119731","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477891.jpg","position":"Associate","permitfreetextemail":0,"firstname":"June","lastname":"Fediuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":448,"name":"Billy Assaf","guid":"72df48ec-971e-48c0-a602-a921b03486d7","individualid":1908025,"phonetype1":"780-964-8444","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.billyassafsellshomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124382","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Billy","lastname":"Assaf","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":449,"name":"Ravi S. Duhra","guid":"02cf3863-7e74-47ea-a8ab-e4f2f7e95525","individualid":1957385,"phonetype1":"855-881-8680","phonetype2":"","phonetype3":"","phonetype4":"866-881-8680","phonetype5":"","websitetype1":"https://jumptolisting.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396596889","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Ravi","lastname":"Duhra","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":450,"name":"Inderpal Sokhey","guid":"4de85430-aeca-4215-925e-5da29c53aadf","individualid":1951189,"phonetype1":"780-566-1981","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398577605","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Inderpal","lastname":"Sokhey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":451,"name":"Ron M. Goryniuk","guid":"6da5fd00-b254-41a3-8102-d58b27324c7c","individualid":1478033,"phonetype1":"780-441-1596","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.rongoryniuk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118226","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478033.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Goryniuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":452,"name":"Gurpreet S. Ghatehora","guid":"a7f3713d-9b74-4582-b85a-8374b7b790bb","individualid":1670052,"phonetype1":"780-951-6530","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.edmontonhomesonsale.com","websitetype2":"https://www.facebook.com/pages/Edmonton-Real-Estate/1403659683184755?ref=hl","websitetype3":"https://www.linkedin.com/in/gurpreet-ghatehora-6517b21b/","websitetype4":"https://twitter.com/yeghomesonsale","websitetype5":"","email1":"398733588","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gurpreet","lastname":"Ghatehora","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":453,"name":"Meadow Kenney","guid":"63701365-33ce-4059-ae07-23c6a9e10333","individualid":2007525,"phonetype1":"780-271-4845","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116779","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1289564.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Meadow","lastname":"Kenney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":454,"name":"Madeline M. Sarafinchan","guid":"0fe586cd-d06e-4138-bcdb-848e546f6c96","individualid":1479197,"phonetype1":"780-913-6595","phonetype2":"","phonetype3":"","phonetype4":"780-481-7711","phonetype5":"","websitetype1":"http://www.jayman.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125109","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011164.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Madeline","lastname":"Sarafinchan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":455,"name":"Chelsea K. Wooley","guid":"deadcdea-9f48-4efa-b966-6cbcc74b38c7","individualid":1479196,"phonetype1":"780-904-5276","phonetype2":"","phonetype3":"","phonetype4":"780-481-7711","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110201","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1129104.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chelsea","lastname":"Wooley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":456,"name":"Marty J. Weishaupt","guid":"51e33862-9f9d-490f-a351-8654317d94a9","individualid":1950043,"phonetype1":"780-850-1595","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"http://movewithmarty.realtor","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398662019","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1950043.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marty","lastname":"Weishaupt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":457,"name":"Biljana Ceklic","guid":"8ae8ff62-eab3-4bb2-baca-c3d7967c6430","individualid":1834049,"phonetype1":"780-977-7304","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.biljanahomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759867","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1196616.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Biljana","lastname":"Ceklic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":458,"name":"Wilson W. Lam","guid":"4a81bd93-2657-4fca-9a78-97a980887ced","individualid":1478460,"phonetype1":"780-499-0033","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://wendyandwilson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601213","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478460.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Wilson","lastname":"Lam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":459,"name":"Wendy L. Theberge","guid":"71375d1f-4a02-4449-92e1-248dad70912e","individualid":1597265,"phonetype1":"780-278-7355","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://wendyandwilson.com","websitetype2":"https://www.facebook.com/wendyandwilson","websitetype3":"","websitetype4":"https://twitter.com/soldgirl","websitetype5":"","email1":"398551358","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1597265.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Wendy","lastname":"Theberge","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":460,"name":"Norma M. Fersovich","guid":"277703c1-a832-49d1-b908-08d0432bd08b","individualid":1477897,"phonetype1":"780-908-5779","phonetype2":"","phonetype3":"","phonetype4":"780-455-8314","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115469","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011181.gif","position":"Broker","permitfreetextemail":0,"firstname":"Norma","lastname":"Fersovich","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":461,"name":"Geneva K. Tetreault","guid":"f5b81ef7-9a23-42a8-8008-26e1c9a88ad3","individualid":1479476,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.genevatetreault.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117688","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1108394.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Geneva","lastname":"Tetreault","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":462,"name":"Jordan C. Daoust","guid":"b946b77e-4ee2-4e46-b5c9-81d07d7922a6","individualid":1987787,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114110","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jordan","lastname":"Daoust","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":463,"name":"Kathy L. Jer","guid":"8d0cbb6a-aeb0-4da6-96e9-41abd49bee5a","individualid":2010311,"phonetype1":"780-499-6924","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117004","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kathy","lastname":"Jer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":464,"name":"Jaclyn N. Horne","guid":"b3e1fefc-d7b8-4128-9d3b-b2fbe05d6c25","individualid":1478199,"phonetype1":"780-405-1014","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.SmartMovesYEG.com","websitetype2":"https://www.facebook.com/jaclyn.horne.9","websitetype3":"https://www.linkedin.com/in/jaclyn-horne-bba34852","websitetype4":"","websitetype5":"","email1":"396832802","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jaclyn","lastname":"Horne","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":465,"name":"Kristopher J. Heuven","guid":"0054a132-55fc-4106-93dc-f61796a27e84","individualid":1880264,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.kristopherjheuven.com","websitetype2":"https://www.facebook.com/KristopherJHeuven/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402117869","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1880264.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kristopher","lastname":"Heuven","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":466,"name":"Sonia A. Lyonnais","guid":"c16e20b9-0cfa-4087-b194-2ba6a037d0fb","individualid":1860118,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.sonialyonnais.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602272","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1200713.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sonia","lastname":"Lyonnais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":467,"name":"Joshua L. Tkachuk","guid":"a0af2831-9a10-4e0c-bdad-d5e5c6115867","individualid":1951019,"phonetype1":"780-913-1068","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120862","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joshua","lastname":"Tkachuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":468,"name":"Lee Dziwenka","guid":"fd42bb37-333e-4e21-a988-843a6bb28c83","individualid":1967712,"phonetype1":"780-975-8622","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.leedziwenka.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115407","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lee","lastname":"Dziwenka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":469,"name":"Sherri M. Clarke","guid":"25bbcd3e-b32f-4cac-be25-37ec589dcffa","individualid":1987067,"phonetype1":"780-717-1308","phonetype2":"","phonetype3":"","phonetype4":"780-447-0157","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397740908","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1987067.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sherri","lastname":"Clarke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":470,"name":"Ivan J. Abelar","guid":"d527d078-d917-4ed3-bc20-e4d01ceff3cc","individualid":1566232,"phonetype1":"780-953-5251","phonetype2":"","phonetype3":"","phonetype4":"780-465-0679","phonetype5":"","websitetype1":"http://www.realestateedmonton.net","websitetype2":"https://www.facebook.com/EdmontonRealEstatePage/","websitetype3":"https://www.linkedin.com/in/ivanabelar/","websitetype4":"https://twitter.com/EdmontonRealty","websitetype5":"","email1":"398829239","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1149102.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ivan","lastname":"Abelar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":471,"name":"Tammy A. Booth","guid":"12673c2e-0f0b-4088-afc2-00b115c22c4b","individualid":1940545,"phonetype1":"780-994-0605","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://tammy.booth.2percentrealty.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398577600","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1940545.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tammy","lastname":"Booth","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":472,"name":"Jane Li","guid":"5cf74d38-cd44-4559-acee-3cef7bacdaa9","individualid":1599890,"phonetype1":"780-695-9588","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.janeli.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113487","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1599890.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jane","lastname":"Li","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:20","updated_at":"2017-08-11 00:10:20"},{"id":473,"name":"Jonathan C. Hull","guid":"4536d31e-4691-4270-b25a-20828fedccd8","individualid":1478222,"phonetype1":"780-221-2129","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://jonhull.ca","websitetype2":"https://www.facebook.com/JonHull2PercentRealtyPro/","websitetype3":"https://www.linkedin.com/nhome/?trk=","websitetype4":"","websitetype5":"","email1":"402811599","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Jonathan","lastname":"Hull","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":474,"name":"Stuart D. Neal","guid":"08e68dfb-33a9-4d48-b164-6c65780b1c45","individualid":1480670,"phonetype1":"780-760-2014","phonetype2":"","phonetype3":"","phonetype4":"780-760-2021","phonetype5":"","websitetype1":"http://www.ambergatehomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398610016","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1098386.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Stuart","lastname":"Neal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":475,"name":"Anita L. Rivest","guid":"12ca1ece-fad2-4ae9-8b7e-68870b8e8b8c","individualid":1755956,"phonetype1":"780-970-2789","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.edmontonhomesource.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109966","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anita","lastname":"Rivest","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":476,"name":"Ryan R. Sellers","guid":"332a26a6-b8f8-46eb-9e4b-7f738753e10d","individualid":1520256,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.ryansellers.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113104","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1520256.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Sellers","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":477,"name":"Brad Deviller","guid":"8529276d-66d5-4945-9451-6f8b03259aa4","individualid":1477761,"phonetype1":"780-966-6675","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://braddeviller.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121431","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477761.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Deviller","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":478,"name":"John H. Drebit","guid":"7495845d-c3ce-47cd-81fd-abb71231a016","individualid":1775059,"phonetype1":"780-886-7017","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.johndrebit.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120752","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Drebit","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":479,"name":"Harold T. Vasileff","guid":"453ff7d7-23f2-4761-a69b-4ac73f83589f","individualid":1479589,"phonetype1":"780-238-8565","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268649","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Harold","lastname":"Vasileff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":480,"name":"Wade W. Klimchuk","guid":"1d9e3bf7-706c-4224-a214-961f28f69550","individualid":1478366,"phonetype1":"780-498-6400","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.WadeKlimchuk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110421","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wade","lastname":"Klimchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":481,"name":"Rob D. Jastrzebski","guid":"13958ab4-f5ce-4751-885c-55e772e7e7f1","individualid":1562210,"phonetype1":"780-222-8222","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.robjhomes.com","websitetype2":"https://www.facebook.com/rob.jastrzebski.7","websitetype3":"","websitetype4":"https://twitter.com/RobJHomes","websitetype5":"","email1":"397601847","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rob","lastname":"Jastrzebski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":482,"name":"Justin D. Layton","guid":"e1e90df5-043c-4bf3-a4aa-0552b5bb3164","individualid":1635011,"phonetype1":"780-906-0672","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.alledmontonproperties.com","websitetype2":"https://www.facebook.com/JustinLaytonReMaxRiverCity/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759754","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1635011.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Layton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":483,"name":"Randy B. Bayrack","guid":"aface4d7-25a7-485e-8246-b2059c6d4ac6","individualid":1477347,"phonetype1":"780-995-5381","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.bayrack.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398626680","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477347.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Randy","lastname":"Bayrack","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":484,"name":"Joginder S. Pandher","guid":"5f7d5de2-9dd0-400a-a19e-73a07639fd03","individualid":1629268,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.joepandher.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397431025","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joginder","lastname":"Pandher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":485,"name":"Lindsay S. Parsons","guid":"e36d7254-d1da-497c-bbff-ef71ab088e66","individualid":1978436,"phonetype1":"780-975-9190","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398749736","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1978436.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lindsay","lastname":"Parsons","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":486,"name":"Lorraine M. Mah","guid":"fe5dd4da-9258-4a5e-95f0-6f43831ceb6a","individualid":1478624,"phonetype1":"780-905-1179","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://lorrainemah.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398175955","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478624.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lorraine","lastname":"Mah","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":487,"name":"Natasha M. Locke","guid":"3020defc-2bda-46dd-8d1b-1bda46d78aa5","individualid":1891871,"phonetype1":"780-953-2295","phonetype2":"","phonetype3":"","phonetype4":"780-425-3765","phonetype5":"","websitetype1":"http://www.natashalocke.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123700","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Natasha","lastname":"Locke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":488,"name":"Azmina Ladha","guid":"cbf7d4b0-2817-4b31-a6da-c7b5c9fc2da3","individualid":1478451,"phonetype1":"780-993-7977","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838901","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1121455.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Azmina","lastname":"Ladha","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":489,"name":"Steven J. Kuchmak","guid":"874efaf6-5a64-40f5-bf5f-c560e804150d","individualid":1568781,"phonetype1":"780-975-8326","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.edmontonhomefinders.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110245","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1150476.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steven","lastname":"Kuchmak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":490,"name":"Nadia Osman","guid":"c5323fa8-5d4c-4d98-a215-15f1a5157933","individualid":1960591,"phonetype1":"780-238-0017","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.nadiaosman.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124862","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nadia","lastname":"Osman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":491,"name":"Shelley M. Littlefair","guid":"26cb8afe-2564-4673-b9f4-c655661291e0","individualid":1586992,"phonetype1":"780-221-2979","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.shelleylittlefair.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402325119","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1586992.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shelley","lastname":"Littlefair","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":492,"name":"Corey R. Christenson","guid":"c923d7d2-e3b9-4d46-b184-588431d483d1","individualid":1477620,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.coreysells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120047","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011326.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Corey","lastname":"Christenson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":493,"name":"Alex Ward","guid":"e5cc1c9e-4eb9-4b90-878a-7cb1652aa1ca","individualid":1998421,"phonetype1":"780-267-2625","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.awardrealty.ca","websitetype2":"https://www.facebook.com/AwardRealtyTeam/","websitetype3":"https://www.linkedin.com/in/awardrealtyteam/","websitetype4":"https://twitter.com/Award_Realty_AB","websitetype5":"","email1":"401269059","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1281646.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alex","lastname":"Ward","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":494,"name":"Diana Chu","guid":"0dbca985-1f77-4552-b150-47ce9f6054f3","individualid":1873584,"phonetype1":"780-707-8886","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602285","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1873584.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Diana","lastname":"Chu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":495,"name":"Curtis J. Leibel","guid":"96af6aab-cfbc-453a-9237-05f3ef1aeadc","individualid":1906763,"phonetype1":"780-932-6789","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.curtisinvests.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109155","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1906763.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Curtis","lastname":"Leibel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":496,"name":"Jon D. Sand","guid":"ee16659c-2dc6-412f-b314-f93b838d4c5c","individualid":1988727,"phonetype1":"780-245-6479","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969391","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1988727.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jon","lastname":"Sand","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":497,"name":"Bruce S. MacPherson","guid":"3444055a-4914-495f-897b-9c29dcd0d331","individualid":1478617,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.EdmontonHouses.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402569840","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478617.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bruce","lastname":"MacPherson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":498,"name":"Abe Hering","guid":"d72700f4-6073-4482-ab0e-463be5a7cd31","individualid":1478151,"phonetype1":"780-915-1799","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.abehering.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401025151","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Abe","lastname":"Hering","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":499,"name":"Robert J. Leishman","guid":"cd1d6607-52f5-464e-84c2-896f419cfc48","individualid":1741215,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123635","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Leishman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":500,"name":"Andy T. Huynh","guid":"48917bb7-e048-4d45-b942-c4dcbd547188","individualid":2004586,"phonetype1":"780-707-0598","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116555","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Andy","lastname":"Huynh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":501,"name":"Melody R. Kilbank","guid":"334ae2ab-f562-420b-a912-ff91e4b04818","individualid":1478348,"phonetype1":"780-893-9987","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.melodykilbank.com","websitetype2":"http://www.facebook.com/melodykilbank/","websitetype3":"http://www.linkedin.com/pub/melody-kilbank/10/913/227","websitetype4":"http://www.twitter.com/MelodyKilbank","websitetype5":"","email1":"398387340","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Melody","lastname":"Kilbank","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":502,"name":"Syndon E. Brown","guid":"0fbc91c4-120f-41ab-a4fa-77dcaecfe1bd","individualid":1958966,"phonetype1":"780-619-9843","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119689","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1958966.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Syndon","lastname":"Brown","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":503,"name":"Art P. Kominek","guid":"17872e56-68c4-4fd5-be58-63d21ca1d083","individualid":1897167,"phonetype1":"780-700-2121","phonetype2":"","phonetype3":"","phonetype4":"780-756-9991","phonetype5":"","websitetype1":"http://www.art-homes.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/artur-kominek-9a1a2415/","websitetype4":"","websitetype5":"","email1":"399688654","email2":"","email3":"","email4":"","photo":"","position":"Office Manager","permitfreetextemail":0,"firstname":"Art","lastname":"Kominek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":504,"name":"Russ Slemko","guid":"6687f98a-0007-4d10-b1e8-11204fe8389f","individualid":1479313,"phonetype1":"780-446-5385","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.russslemko.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111720","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Russ","lastname":"Slemko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":505,"name":"Prabhjot Thind","guid":"622e928a-ed78-428e-9f69-93db992bc022","individualid":2030282,"phonetype1":"780-235-4086","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681919","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Prabhjot","lastname":"Thind","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":506,"name":"Gillian R. Kirkland","guid":"37c30e1b-bbf9-4ecb-9971-986ec0f68fcb","individualid":1884951,"phonetype1":"780-902-9850","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111340","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gillian","lastname":"Kirkland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":507,"name":"Jody A. Lambertus","guid":"f585ca7d-90b6-4866-89f2-31d04015ad07","individualid":1987541,"phonetype1":"780-399-5114","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.century21vantage.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121270","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jody","lastname":"Lambertus","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":508,"name":"Nicole J. Cooper","guid":"f2bf0e5e-eb6a-49c5-877a-6778e23bf8e4","individualid":1921992,"phonetype1":"780-264-1436","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113566","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nicole","lastname":"Cooper","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":509,"name":"Kevin M. Klein","guid":"9f462118-c453-4cf9-acd2-422ecb2ba56a","individualid":1985983,"phonetype1":"780-242-7501","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402777144","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Klein","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":510,"name":"Kevin W. O'Neill","guid":"486d6dee-9b46-4cdd-affa-8f91fbe2d3fd","individualid":1496652,"phonetype1":"780-995-7325","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.kevinoneill.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401372037","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"O'Neill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":511,"name":"Dave B. Johnston","guid":"3c6396a1-63e2-41d8-9efc-996a3e59d94b","individualid":1478285,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.johnstonhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121959","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Johnston","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":512,"name":"Norm R. Yarwood","guid":"3bdc3c62-9d35-4928-9675-c71ec6fa978b","individualid":1479743,"phonetype1":"780-913-3310","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123830","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Norm","lastname":"Yarwood","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":513,"name":"Jasmina Colic","guid":"81bea27f-44cf-421a-9a66-d89078ca2e27","individualid":1870640,"phonetype1":"780-267-1752","phonetype2":"","phonetype3":"","phonetype4":"780-451-3940","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112622","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jasmina","lastname":"Colic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":514,"name":"Jay J. Tomlinson","guid":"eb11de4b-f08d-441e-b3f1-74634436acd8","individualid":1917910,"phonetype1":"780-904-9646","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.jtomlinson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399716683","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jay","lastname":"Tomlinson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":515,"name":"Linh Hebert","guid":"06cca64f-61d8-4598-88cb-3f766e41bf2e","individualid":1478139,"phonetype1":"780-498-2888","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110793","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Linh","lastname":"Hebert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":516,"name":"Mark G. Stratton","guid":"89073aee-b7cd-4225-a0ff-2aeb5495d1c5","individualid":1646383,"phonetype1":"780-446-5592","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400832851","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1646383.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Stratton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":517,"name":"Sarah L. Keats","guid":"6cf89565-db89-4ac4-9a39-82e27c3581e5","individualid":1860731,"phonetype1":"780-934-8514","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://sarahkeats.remax.ca","websitetype2":"http://www.facebook.com/sarah.dulmagekeats","websitetype3":"","websitetype4":"https://twitter.com/sarahLkeats","websitetype5":"","email1":"396732176","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1860731.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sarah","lastname":"Keats","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":518,"name":"Deb M. Styles","guid":"c949a10e-b6c8-49f8-aaa6-d4e7d8428414","individualid":1918158,"phonetype1":"780-909-3080","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.debstyles.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114240","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1918158.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Deb","lastname":"Styles","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":519,"name":"Deloris M. Rahier","guid":"11e78940-b941-4928-8879-6e2410fd04b4","individualid":1479063,"phonetype1":"780-975-7986","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.homesonweb.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401212419","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479063.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Deloris","lastname":"Rahier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":520,"name":"Shelley R. Beaubien","guid":"0d08f577-0315-4a63-96b0-5690537ea0c8","individualid":2016631,"phonetype1":"780-887-5538","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/srbeaubien","websitetype3":"https://www.linkedin.com/in/shelley-beaubien-201490125/","websitetype4":"https://twitter.com/SRBeaubien","websitetype5":"","email1":"402513022","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1297851.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shelley","lastname":"Beaubien","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":521,"name":"Clinton J. Tindall","guid":"644b85a6-c6cc-421d-b4d9-ce4040d73c73","individualid":1479511,"phonetype1":"780-991-5978","phonetype2":"","phonetype3":"","phonetype4":"780-986-4494","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111697","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479511.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Clinton","lastname":"Tindall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":522,"name":"Serge Bourgoin","guid":"7b33f211-bd26-4352-9432-2cb0baf3d0cf","individualid":1530702,"phonetype1":"780-995-6520","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.edmonton-real-estate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396306833","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Serge","lastname":"Bourgoin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":523,"name":"Leonard C. Burt","guid":"e2867c06-5b22-4311-88a2-d5991c721aa5","individualid":1892552,"phonetype1":"780-938-0779","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://lennyburt.ca","websitetype2":"https://www.facebook.com/Lenny-Burt-Real-Estate-177089915672802/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400832879","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leonard","lastname":"Burt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":524,"name":"Judy L. Bishop","guid":"e6ecde52-5869-4639-a032-77b2774db32e","individualid":1477407,"phonetype1":"780-289-6151","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.judybishop.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661891","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011917.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Judy","lastname":"Bishop","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":525,"name":"Kira Harrington","guid":"73b91530-aadd-49b4-9050-59c056166a55","individualid":1486760,"phonetype1":"780-554-6192","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.kiraharrington.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601733","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1486760.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kira","lastname":"Harrington","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":526,"name":"Dallas Moravec","guid":"4bc1458e-83e4-482e-81f3-c80055ee33f5","individualid":1478806,"phonetype1":"780-707-7191","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.dallasm.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400158232","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478806.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dallas","lastname":"Moravec","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":527,"name":"Twyla D. Lalonde","guid":"523b171e-1b31-497d-b82c-406ba91cb158","individualid":1937127,"phonetype1":"780-777-3963","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110344","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Twyla","lastname":"Lalonde","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":528,"name":"Benita E. Pashko","guid":"6f755979-6809-4dad-9977-09398af12057","individualid":1478958,"phonetype1":"780-887-0978","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.benitasellshomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121929","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Benita","lastname":"Pashko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":529,"name":"Steve Chun","guid":"fb0bdc85-a69e-4733-a0c5-0dd0f5a32c21","individualid":2024250,"phonetype1":"780-920-3215","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.780RealEstate.ca","websitetype2":"https://www.facebook.com/stevedoesrealty/","websitetype3":"https://www.linkedin.com/in/stevedoesrealty","websitetype4":"https://twitter.com/stevedoesrealty","websitetype5":"","email1":"397603005","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1303996.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Chun","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":530,"name":"Sam Elias","guid":"f0b9ae85-3fb9-46f6-a293-d803f3e3b61b","individualid":1477851,"phonetype1":"780-995-0555","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.samelias.ca","websitetype2":"https://www.facebook.com/TeamSamElias/","websitetype3":"https://ca.linkedin.com/in/sam-elias-59557815","websitetype4":"https://twitter.com/SamEliasRealty","websitetype5":"","email1":"397672713","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477851.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sam","lastname":"Elias","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":531,"name":"Mark J. Cassidy","guid":"4dea422d-641a-466a-9787-a8c91cd5535e","individualid":1477568,"phonetype1":"780-699-9278","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.markcassidy.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123463","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010276.gif","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Cassidy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:21","updated_at":"2017-08-11 00:10:21"},{"id":532,"name":"Tracy D. Loveridge","guid":"e43a5810-bf25-4121-ba11-530ea4252757","individualid":1480373,"phonetype1":"780-906-3161","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.teamjet.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117811","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1480373.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tracy","lastname":"Loveridge","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":533,"name":"Jeremy R. McKain","guid":"45031172-544e-4f97-81d7-b3ada8b18c45","individualid":1929412,"phonetype1":"780-449-2800","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.teamjet.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114048","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1929412.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeremy","lastname":"McKain","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":534,"name":"Olivia M. Hu","guid":"7e538303-abca-484d-b61e-bf87f0c404d9","individualid":1782473,"phonetype1":"780-716-2829","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.oliviahu.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119449","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Olivia","lastname":"Hu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":535,"name":"Robyn J. Fisher","guid":"a28b577c-3c77-47b8-891a-67b6e7bd2d15","individualid":1898441,"phonetype1":"780-718-6042","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"http://www.soldinyeg.ca","websitetype2":"https://www.facebook.com/RobynSellsYEG/","websitetype3":"https://www.linkedin.com/in/robyn-fisher-41156b3b/","websitetype4":"https://twitter.com/RobynSellsYEG","websitetype5":"","email1":"401969282","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1898441.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robyn","lastname":"Fisher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":536,"name":"Melanie R. Jordan","guid":"9a4a72d6-acdb-4d8d-a8f5-efccb1472cb2","individualid":1981505,"phonetype1":"780-667-4500","phonetype2":"","phonetype3":"","phonetype4":"780-963-0197","phonetype5":"","websitetype1":"http://melaniejordan.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396993073","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1267086.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Melanie","lastname":"Jordan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":537,"name":"Bradley P. Bosker","guid":"e4c56879-03bb-4730-9ac0-793b16099bba","individualid":1966820,"phonetype1":"780-437-2030","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"http://www.weselledmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110097","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bradley","lastname":"Bosker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":538,"name":"Wayne T. Ogloff","guid":"30f9d5a7-6b53-4d81-9fc1-e484ec5ebc1b","individualid":1478916,"phonetype1":"780-446-1750","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.wayneogloff.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396169083","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478916.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Wayne","lastname":"Ogloff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":539,"name":"Jerad A. Cox","guid":"ce79c4b1-6af5-43ff-9a5d-c87636886bed","individualid":1501840,"phonetype1":"780-708-5750","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.primeedmontonrealestate.com","websitetype2":"https://www.facebook.com/primeedmontonrealestate","websitetype3":"","websitetype4":"https://twitter.com/primeyegre","websitetype5":"","email1":"396707973","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jerad","lastname":"Cox","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":540,"name":"David M. Moriarity","guid":"f59d9aab-5169-4910-b03f-ffeddd951e37","individualid":1900981,"phonetype1":"780-298-2395","phonetype2":"","phonetype3":"","phonetype4":"780-458-1515","phonetype5":"","websitetype1":"http://www.davidmoriarity.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109711","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Moriarity","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":541,"name":"Helison S. Aniyi","guid":"7b9e5f61-0494-4006-9524-f4922f0bc0d2","individualid":1977855,"phonetype1":"587-708-0261","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.yegrealestatepal.ca","websitetype2":"https://www.facebook.com/Helison.aniyi/?ref=bookmarks","websitetype3":"https://www.linkedin.com/feed/","websitetype4":"","websitetype5":"","email1":"398759936","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Helison","lastname":"Aniyi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":542,"name":"Ashley S. Dalgleish","guid":"2deabd7d-c7d4-4862-bd09-f29aa12c6490","individualid":1648169,"phonetype1":"780-504-3555","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.ashleysellshomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119763","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1648169.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ashley","lastname":"Dalgleish","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":543,"name":"Rosanna A. Fischer","guid":"dfbcba28-4454-4c0e-8073-9df8c8f5bba2","individualid":1478684,"phonetype1":"780-418-4525","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.TheFischerTeam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601529","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1099848.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rosanna","lastname":"Fischer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":544,"name":"Rashid Ahmad","guid":"7a5a372a-5785-4c92-ab07-0d60b0ee9d06","individualid":1480370,"phonetype1":"780-909-5666","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.rashidhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117806","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1131971.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rashid","lastname":"Ahmad","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":545,"name":"Mary L P Mok","guid":"ae5ea33a-7782-4963-b675-7ff119e4f0c9","individualid":1889533,"phonetype1":"780-952-1223","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602334","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mary","lastname":"Mok","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":546,"name":"Hassan S. Al Hammouri","guid":"56a58165-ed4d-4834-b6c8-0803bd3054ce","individualid":1625885,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.edmontonhappyhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807723","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Hassan","lastname":"Al Hammouri","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":547,"name":"Chapman Im","guid":"ff877ab0-def0-435a-865a-179c52afe824","individualid":1478240,"phonetype1":"780-914-1919","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.century21edmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111257","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478240.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chapman","lastname":"Im","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":548,"name":"Pat Hansard","guid":"1495e3ab-5ec6-4e1e-8dce-ba6dfcce52c2","individualid":1481389,"phonetype1":"780-886-4168","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"http://www.pathansard.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397316334","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1481389.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Pat","lastname":"Hansard","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":549,"name":"Chris C. Akins","guid":"60a12a5d-fc55-42f8-8faf-77ef4dbd8e0d","individualid":1477241,"phonetype1":"780-919-8411","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.chrisakins.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118231","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101025.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Akins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":550,"name":"Kent Clark","guid":"81c60490-3fe9-4254-bbaf-0bd57ad356c5","individualid":1477638,"phonetype1":"780-239-4489","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.thenextgeneration.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124664","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kent","lastname":"Clark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":551,"name":"James G. Knowlton","guid":"b4f3d289-8188-4c51-a08a-05ee46ae88c4","individualid":1478373,"phonetype1":"780-239-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.thenextgeneration.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124669","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"Knowlton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":552,"name":"Chantell R. Plaisant-Grandy","guid":"7a1408d2-3da1-48e9-9848-1e2eff7d4cae","individualid":1566134,"phonetype1":"780-231-5079","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.thenextgeneration.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551341","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chantell","lastname":"Plaisant-Grandy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":553,"name":"Dan Cholak","guid":"83532bf2-ea56-4133-a9f1-986895de6f17","individualid":1477609,"phonetype1":"780-895-7777","phonetype2":"","phonetype3":"","phonetype4":"780-640-9333","phonetype5":"","websitetype1":"http://www.realtyadvisorsalberta.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400628478","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dan","lastname":"Cholak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":554,"name":"Daniel Breier","guid":"e8a32723-48f4-4298-a683-106fb04aa9c8","individualid":1868775,"phonetype1":"780-983-7173","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119318","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daniel","lastname":"Breier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":555,"name":"Lynne M. MacDonald","guid":"838a10bc-e281-4a45-b4d8-ae1aab21ba54","individualid":1478595,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.lynnemacdonald.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396517005","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lynne","lastname":"MacDonald","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":556,"name":"Leroy L. Warden","guid":"ee5cda6e-c194-407a-88c6-20d2a2d0864d","individualid":1479637,"phonetype1":"780-916-6100","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398265520","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leroy","lastname":"Warden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":557,"name":"Ryan P. Dutka","guid":"9c084d06-f473-4843-b775-01cb6e67f8b6","individualid":1477831,"phonetype1":"780-988-0001","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.ryandutka.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111773","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477831.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Dutka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":558,"name":"Maria M. Dey","guid":"6b638b7d-f14e-4c0b-9793-04d7f3715dbe","individualid":1733977,"phonetype1":"780-297-4108","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.mdey.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402983121","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Maria","lastname":"Dey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":559,"name":"Carmen D. Tetrault-Girardin","guid":"3f2ad65b-d86d-408a-9261-035080d88193","individualid":1479474,"phonetype1":"780-242-7580","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123105","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carmen","lastname":"Tetrault-Girardin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":560,"name":"Harmony E. Terin","guid":"abef3047-4bb1-4004-8b37-7f0f36227912","individualid":1644787,"phonetype1":"780-297-1439","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.leroywarden.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602044","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Harmony","lastname":"Terin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":561,"name":"Pina Garofalo","guid":"627f33da-6c48-4713-925f-6b459acf4d9a","individualid":1598475,"phonetype1":"780-970-1169","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.pinashomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111988","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Pina","lastname":"Garofalo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":562,"name":"Sheldon Casavant","guid":"6a337066-9c90-4a0f-a0bb-2e9cdf758ee6","individualid":2036412,"phonetype1":"780-416-0070","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.realtyyeg.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401669045","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1312955.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sheldon","lastname":"Casavant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":563,"name":"Shelly D. Reddy","guid":"0ecdb3a1-c80b-493a-9c96-b98c8319b35b","individualid":1479086,"phonetype1":"780-919-5842","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.shellyreddy.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838868","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1098479.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shelly","lastname":"Reddy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":564,"name":"George W. Van De Walle","guid":"20d7de87-babd-4d49-9d5d-bd05db51c836","individualid":1479571,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.georgevandewalle.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"403011358","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"George","lastname":"Van De Walle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":565,"name":"Nigel Nethersole","guid":"c19d47eb-bd70-4bf6-ae4f-3a6c76d93517","individualid":1595143,"phonetype1":"780-271-6300","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733561","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1595143.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nigel","lastname":"Nethersole","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":566,"name":"Patrick D. Fields","guid":"81de41a2-7ba4-457b-8346-7f14aecd727f","individualid":1477900,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.EdmontonHomeDeals.com","websitetype2":"http://bit.ly/2hrIbYj","websitetype3":"https://ca.linkedin.com/in/patrick-fields-4986a66b","websitetype4":"https://twitter.com/ISellEdmonton","websitetype5":"","email1":"396328916","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477900.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Patrick","lastname":"Fields","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":567,"name":"Daniel S. Rowland","guid":"b9d4e8ba-50e5-4e1e-9bf4-e626ef4a45ed","individualid":1991135,"phonetype1":"780-361-3027","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.rdrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688766","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daniel","lastname":"Rowland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":568,"name":"Eddy A. D'Ambrosio","guid":"9c8474e7-a276-4d29-9a80-0c7825d63894","individualid":2004879,"phonetype1":"780-232-7914","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116583","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eddy","lastname":"D'Ambrosio","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":569,"name":"Dwayne K. Patrie","guid":"a83531f3-8bd6-4ff3-886d-a6ec630923c9","individualid":1485167,"phonetype1":"780-451-0303","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.empireteam.ca","websitetype2":"https://www.facebook.com/DwaynePatrieRemax/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807699","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dwayne","lastname":"Patrie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":570,"name":"Aaron P. Dulmage","guid":"118e11d0-371e-480a-81b6-997719b2e2b1","individualid":2003563,"phonetype1":"780-983-1575","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.niceagents.ca/meet-the-team/aaron-dulmage/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116478","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Aaron","lastname":"Dulmage","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":571,"name":"Xiaosong Lu","guid":"574e2c1d-f854-450f-bfc8-02f0e98599b3","individualid":1885088,"phonetype1":"780-729-2088","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.westerncanadarealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602314","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Xiaosong","lastname":"Lu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":572,"name":"Robert S. Sand","guid":"7c4595ac-4bee-4272-81a1-b951c0f32741","individualid":1479190,"phonetype1":"780-264-3630","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.teamsand.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688350","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Sand","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":573,"name":"Christophe J. Sadelain","guid":"80064387-632f-40bd-902b-9c06293ab0e9","individualid":1479176,"phonetype1":"780-908-2660","phonetype2":"","phonetype3":"","phonetype4":"780-451-3940","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601473","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christophe","lastname":"Sadelain","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":574,"name":"John P. Carle","guid":"17505489-c422-48fe-8f6e-9d1a1c01052e","individualid":1477555,"phonetype1":"780-937-7534","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.NiceAgents.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121911","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Carle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":575,"name":"Ben R. Officer","guid":"3071567f-2a7d-4bd2-aab5-9c603af48cdd","individualid":1570000,"phonetype1":"780-266-4418","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.NiceAgents.ca","websitetype2":"https://www.facebook.com/NiceAgents/","websitetype3":"","websitetype4":"https://twitter.com/benofficer","websitetype5":"","email1":"400253157","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1150906.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ben","lastname":"Officer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":576,"name":"Birgit M. Yaciuk","guid":"b877655e-9c02-45eb-8d4c-27d70453824a","individualid":1479735,"phonetype1":"780-995-2421","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.birgityaciuk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601332","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479735.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Birgit","lastname":"Yaciuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":577,"name":"Christine L. Shwetz","guid":"8de01232-55d6-40e0-86de-e9a9f1670375","individualid":1956141,"phonetype1":"780-903-6917","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112061","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christine","lastname":"Shwetz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":578,"name":"Tina St Laurent","guid":"25fd04f4-e23c-4496-8be5-bcb726e0e160","individualid":1956366,"phonetype1":"780-863-1323","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122455","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tina","lastname":"St Laurent","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":579,"name":"Natalie M. Ambrozuk","guid":"770a47e2-0426-409e-b736-6cce8c401a58","individualid":1918572,"phonetype1":"780-554-5923","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113228","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Natalie","lastname":"Ambrozuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":580,"name":"Jolene M. Langelle","guid":"e1d0326a-10bc-4d87-8170-461f0f3992eb","individualid":1588658,"phonetype1":"780-910-1317","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.jolenelangelle.com","websitetype2":"https://www.facebook.com/JoleneLangelleREMAX/","websitetype3":"https://www.linkedin.com/in/jolene-langelle-6b71b418/","websitetype4":"https://twitter.com/jolenelangelle","websitetype5":"","email1":"400158237","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1588658.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jolene","lastname":"Langelle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":581,"name":"Azar Maygoni","guid":"1b9d0562-37bb-4621-a97a-ba0d3c3a1186","individualid":1478679,"phonetype1":"780-907-4415","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.azarmaygoni.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838858","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1096244.gif","position":"Associate","permitfreetextemail":0,"firstname":"Azar","lastname":"Maygoni","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":582,"name":"Jack Broadfoot","guid":"3b967967-d7b9-4e21-ba1e-d10f6a18256b","individualid":1477499,"phonetype1":"780-945-1413","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.jackbroadfoot.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396832775","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jack","lastname":"Broadfoot","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":583,"name":"Delores Knudsen","guid":"60943993-a87e-4ad3-8ff8-dc357ea2c632","individualid":1478375,"phonetype1":"780-940-4554","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.dkrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124515","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478375.JPG","position":"Associate","permitfreetextemail":0,"firstname":"Delores","lastname":"Knudsen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":584,"name":"Byron J. Clark","guid":"05a853a9-d2a4-459b-b061-320847c0cd22","individualid":1477634,"phonetype1":"780-884-1499","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.nowrealestategroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115526","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Byron","lastname":"Clark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:22","updated_at":"2017-08-11 00:10:22"},{"id":585,"name":"Lorne Clark","guid":"f6e56a69-f414-45dc-8679-b4cb5c453c4c","individualid":1477639,"phonetype1":"780-504-9941","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.lorneclark.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124214","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011470.gif","position":"Associate","permitfreetextemail":0,"firstname":"Lorne","lastname":"Clark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":586,"name":"Stanley Quang","guid":"c0b2da8d-a803-4d2a-9aee-b6e60066b3e1","individualid":1479054,"phonetype1":"780-716-1638","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.stanleyquang.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601407","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011085.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Stanley","lastname":"Quang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":587,"name":"Jazmin K. Laframboise","guid":"18cfc292-fbfe-4cbb-ad84-353f848b4346","individualid":1969209,"phonetype1":"780-995-9938","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397082849","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1969209.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jazmin","lastname":"Laframboise","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":588,"name":"Paul E. Paiva","guid":"a61fdfdd-fb49-43aa-85af-05b1c988ee78","individualid":1975102,"phonetype1":"780-217-1114","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402325127","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Paiva","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":589,"name":"Angela Krause","guid":"885f2081-4cf6-405d-8660-5a2a76ca10dd","individualid":2002799,"phonetype1":"780-920-7965","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399941353","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1285731.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Angela","lastname":"Krause","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":590,"name":"Connor M. McAuley","guid":"ca468832-4bae-4b70-8813-46acbcd32183","individualid":2011928,"phonetype1":"780-267-8680","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://connorsellshomes.ca","websitetype2":"https://www.facebook.com/2percentrealtypro.connor.mcauley/","websitetype3":"https://ca.linkedin.com/in/connormcauley2percentrealty","websitetype4":"","websitetype5":"","email1":"398812187","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1293405.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Connor","lastname":"McAuley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":591,"name":"Jackson Ho","guid":"9bda69fa-0d53-4c59-af0d-217ad4d6c4c7","individualid":1992068,"phonetype1":"780-906-1338","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.jacksonho.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602851","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jackson","lastname":"Ho","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":592,"name":"Stuart W. Reid","guid":"125ed842-d71d-4f4b-a6ea-5e1e669ba3c6","individualid":1957284,"phonetype1":"780-982-3639","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://goo.gl/EAU6rv","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782243","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1957284.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Stuart","lastname":"Reid","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":593,"name":"Wendy M. Lam","guid":"803236b9-3e18-4fa6-9113-a2e4ab0e8a14","individualid":1585268,"phonetype1":"780-993-6828","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.wendylam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398265564","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wendy","lastname":"Lam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":594,"name":"Travis J. Hawryluk","guid":"f483fba6-a590-4726-b2ed-d22747e16cb6","individualid":1782472,"phonetype1":"780-962-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.travishawryluk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759852","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Travis","lastname":"Hawryluk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":595,"name":"Tanner R. Hawryluk","guid":"037db0da-f627-4488-b109-11a6f579c4e1","individualid":1878192,"phonetype1":"780-962-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.tannerhawryluk.com","websitetype2":"http://www.facebook.com/tannerhawrylukrealestate","websitetype3":"","websitetype4":"http://www.twitter.com/tannerhawryluk","websitetype5":"","email1":"396108909","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tanner","lastname":"Hawryluk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":596,"name":"Alan H. Gee","guid":"cf63b7c6-a614-4770-9532-aa1cdbcf83d8","individualid":1477987,"phonetype1":"780-498-2187","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.alangee.com","websitetype2":"https://www.facebook.com/alangeeandassociates/","websitetype3":"https://www.linkedin.com/in/alan-gee-23b41519?trk=hp-identity-headline","websitetype4":"","websitetype5":"","email1":"397057908","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011748.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alan","lastname":"Gee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":597,"name":"Michelle P. Chau","guid":"a4d09a73-f98a-41aa-8916-3dad2c0f15d1","individualid":1594492,"phonetype1":"780-893-3579","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.michellechau.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601927","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michelle","lastname":"Chau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":598,"name":"Clint B. Kilkenny","guid":"5f04eed4-4cc1-49cd-ae8a-94a59a3861cc","individualid":1833162,"phonetype1":"780-887-7854","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.trustedrealtygroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117382","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1833162.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Clint","lastname":"Kilkenny","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":599,"name":"Derek Hulewicz","guid":"67706b9a-a594-493a-82d6-f6c69e9ec8f9","individualid":1792587,"phonetype1":"780-220-4224","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.edmontonhomesweb.com","websitetype2":"https://www.facebook.com/edmontonhomesweb/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124783","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Derek","lastname":"Hulewicz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":600,"name":"Yinka B. Balogun","guid":"cfc4b434-2f55-4648-b6d9-3e90e9b87562","individualid":1477314,"phonetype1":"780-951-3207","phonetype2":"","phonetype3":"","phonetype4":"780-437-5474","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122187","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Yinka","lastname":"Balogun","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":601,"name":"Shireen I. Sahim","guid":"331221f3-8aaa-4471-a300-bf84b750eed8","individualid":1586850,"phonetype1":"780-498-2482","phonetype2":"","phonetype3":"","phonetype4":"780-451-0312","phonetype5":"","websitetype1":"http://www.buyandsellwithshireen.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397177109","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shireen","lastname":"Sahim","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":602,"name":"Jim D. Strobl","guid":"6ec32604-95e8-4382-971f-aef16b0e90bc","individualid":1479416,"phonetype1":"780-906-0009","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.jimstrobl.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121666","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jim","lastname":"Strobl","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":603,"name":"Denis G. Rowley","guid":"39aad43e-3b8b-49f7-9634-75811cf142c3","individualid":1479150,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.denisrowley.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360956","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Denis","lastname":"Rowley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":604,"name":"Chris K. Karampelas","guid":"b68f7a54-f376-4926-9fac-80da39d178f9","individualid":1661715,"phonetype1":"780-937-7653","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://karampelassells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123886","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Karampelas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":605,"name":"Ajdin Susa","guid":"5aad4c3f-bdb9-4e53-ba6c-7175f1b83b61","individualid":1876318,"phonetype1":"780-905-4788","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109689","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1876318.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ajdin","lastname":"Susa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":606,"name":"Dawn K. Fraser","guid":"725715c9-1e22-4e77-bd37-728fd026a534","individualid":1534928,"phonetype1":"780-221-7568","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.dawnfraser.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402117833","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1534928.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dawn","lastname":"Fraser","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":607,"name":"George M. Fahmy","guid":"0382a4ea-35ef-42c0-a79a-29b779acb63e","individualid":1990329,"phonetype1":"780-483-0601","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121293","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"George","lastname":"Fahmy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":608,"name":"Christopher R. Mazurak","guid":"fbcabcf6-db98-41f5-8333-35dd6d534f1f","individualid":1998342,"phonetype1":"780-910-6160","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.chrissellshomes.ca","websitetype2":"https://www.facebook.com/Chris-Mazurak-2-Realty-Pro-1695709517327490/","websitetype3":"https://www.linkedin.com/in/chris-mazurak-8baa58110/","websitetype4":"https://twitter.com/ChrisMazurak","websitetype5":"","email1":"400807260","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christopher","lastname":"Mazurak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":609,"name":"Karen G. Stanko","guid":"6b817625-06e0-4c29-b273-7c539593cb18","individualid":1660369,"phonetype1":"780-297-3132","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.buyedmontonproperty.com","websitetype2":"https://www.facebook.com/BuyEdmontonProperty/","websitetype3":"https://ca.linkedin.com/in/karen-stanko-47002117","websitetype4":"https://twitter.com/stankokaren?lang=en","websitetype5":"","email1":"398829260","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1660369.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karen","lastname":"Stanko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":610,"name":"Leisa G. Hansen","guid":"074d608b-4635-4312-a2b5-4cd6e9090669","individualid":1478108,"phonetype1":"780-915-6903","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115133","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478108.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Leisa","lastname":"Hansen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":611,"name":"Ralph M. Polowich","guid":"b6c0b14c-8a73-473b-8269-be5c7aade841","individualid":1479012,"phonetype1":"780-970-7653","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.ralphpolowich.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397638418","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ralph","lastname":"Polowich","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":612,"name":"Sandy Pon","guid":"b83b37b4-a0ba-4814-9f38-06e40ad022e8","individualid":1479015,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.SandyPon.com","websitetype2":"","websitetype3":"","websitetype4":"http://twitter.com/sandyponrealty","websitetype5":"","email1":"398781680","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479015.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandy","lastname":"Pon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":613,"name":"Francis Fan","guid":"ea3b01bf-b588-4ec6-b208-d7a07bda9817","individualid":1477884,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.francisfan.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360984","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477884.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Francis","lastname":"Fan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":614,"name":"Beverly M. Bremness","guid":"cc4ba7fd-81f5-4d8a-89a5-f3712b8f4ca8","individualid":1720981,"phonetype1":"780-217-1750","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.bevbremness.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115592","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Beverly","lastname":"Bremness","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":615,"name":"Harpreet Gill","guid":"fd74675f-46bd-4480-9de0-db109bb5646d","individualid":2030525,"phonetype1":"780-993-3029","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681962","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1308125.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Harpreet","lastname":"Gill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":616,"name":"John W. Acevedo","guid":"3a6f0d61-8408-4815-a30e-9a205f6f94e0","individualid":1919847,"phonetype1":"587-987-3636","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"http://www.TheAcevedoTeam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397363326","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1226292.jpg","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Acevedo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":617,"name":"Kimberley J. Acevedo","guid":"9eccd70e-1173-4cc7-941e-4d03f60fd74d","individualid":2004810,"phonetype1":"780-975-3636","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401463661","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/2004810.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kimberley","lastname":"Acevedo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":618,"name":"Kelly P. Mackey","guid":"bb743a7f-7a35-44f9-a748-34c110be255e","individualid":1536866,"phonetype1":"780-445-8845","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118687","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Mackey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":619,"name":"Craig A. Watson","guid":"89296717-9c05-4f71-a213-09062e754ea8","individualid":1869272,"phonetype1":"780-906-9949","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.watsonsells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110326","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1869272.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Watson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":620,"name":"Les Phillips","guid":"e8fa697e-ce66-4ae6-a578-85cb4fdaa8ca","individualid":1478990,"phonetype1":"780-498-2648","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.lesphillips.ca","websitetype2":"","websitetype3":"","websitetype4":"http://lesphillips18","websitetype5":"","email1":"398685162","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478990.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Les","lastname":"Phillips","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":621,"name":"Rennaye B. Miller","guid":"9bb9c54d-b4e9-4828-a34b-6a96ff7a68c3","individualid":1502040,"phonetype1":"780-965-1408","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.rennayemiller.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399204208","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1136006.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rennaye","lastname":"Miller","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":622,"name":"Nora G. Ragadio","guid":"eabffd4a-7b31-4aab-8b69-de2a3e73e3cc","individualid":2016957,"phonetype1":"403-681-8778","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118854","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nora","lastname":"Ragadio","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":623,"name":"Valerie L. Climie","guid":"602b0a75-5c4a-4844-a712-733f2c9f8667","individualid":1885505,"phonetype1":"780-445-0590","phonetype2":"","phonetype3":"","phonetype4":"780-465-0679","phonetype5":"","websitetype1":"http://www.callval.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118352","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1208792.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Valerie","lastname":"Climie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":624,"name":"Rhonda M. Minchau","guid":"c8a6fb1c-1bb2-4891-b755-0dbdc77a044b","individualid":2024491,"phonetype1":"780-490-8839","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://mcleodrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401635072","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rhonda","lastname":"Minchau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":625,"name":"Daniel M. Israel","guid":"3bfa8a59-988e-47d2-9821-7b02847276be","individualid":1970974,"phonetype1":"780-905-9747","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.communityyeg.ca","websitetype2":"https://www.facebook.com/Community-Real-Estate-Solutions-263502740707158/","websitetype3":"https://www.linkedin.com/in/danny-israel-64b194b/","websitetype4":"https://twitter.com/communityyeg","websitetype5":"","email1":"398143867","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daniel","lastname":"Israel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":626,"name":"Franco Maione","guid":"74365d0b-8cb9-4572-a0ee-b19c84bc1714","individualid":1962969,"phonetype1":"780-975-3339","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.francomaione.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759927","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Franco","lastname":"Maione","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":627,"name":"Justin L. Griffith","guid":"e5482bb5-8b3d-47e3-87dd-3df1035af920","individualid":1949540,"phonetype1":"780-217-7117","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.JustinGriffith.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110069","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1949540.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Griffith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:23","updated_at":"2017-08-11 00:10:23"},{"id":628,"name":"Craig P. Berke","guid":"f656485d-f62d-4fae-abdd-ac5595b61104","individualid":1858741,"phonetype1":"780-460-0421","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.craigberke.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117254","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1858741.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Berke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":629,"name":"Che Taylor","guid":"bdb09b88-56b7-4f01-8857-0d17d84a520e","individualid":1479459,"phonetype1":"780-984-1639","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.chetaylor.com","websitetype2":"https://www.facebook.com/che.taylor.71","websitetype3":"https://www.linkedin.com/in/che-taylor-a5a820a2/","websitetype4":"","websitetype5":"","email1":"402777033","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1108658.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Che","lastname":"Taylor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":630,"name":"Janet E. Acheson","guid":"00cbf4ca-aeb0-4beb-9d52-a3830dddd761","individualid":1477225,"phonetype1":"780-298-0755","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"http://www.sarasotarealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121916","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Janet","lastname":"Acheson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":631,"name":"Kelley Hajar","guid":"a755e5f4-4330-4be5-8c51-7362894edd43","individualid":2006527,"phonetype1":"780-965-1250","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116679","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelley","lastname":"Hajar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":632,"name":"Dianna Miketon","guid":"7fbc131c-638d-4b7d-a1a5-51ac8dd2d417","individualid":2033261,"phonetype1":"780-862-5125","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400158274","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1310353.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dianna","lastname":"Miketon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":633,"name":"Cheryl Gaulden","guid":"741c4610-e353-40e8-86cb-f17e04e3e898","individualid":1477986,"phonetype1":"780-235-0120","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.cherylgaulden.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397316311","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010283.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"Gaulden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":634,"name":"Leacroft A. Alexander","guid":"3aeb7554-4618-474c-ae38-99d1508253b7","individualid":1477246,"phonetype1":"780-910-2940","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.leaalexander.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120417","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leacroft","lastname":"Alexander","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":635,"name":"Dave R. Donley","guid":"6004f420-f3a5-4afe-9fdb-86a8b939b394","individualid":1477787,"phonetype1":"780-918-4389","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120344","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011931.gif","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Donley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":636,"name":"Rob W. Coble","guid":"6e50d70f-1157-4e08-9cf4-4ec4abe4e503","individualid":1477650,"phonetype1":"780-278-4100","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://edmontonandarea.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115205","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011506.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rob","lastname":"Coble","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":637,"name":"Trevor B. Roszell","guid":"0eb3883c-c3a1-4bb6-a31b-382ed5ceaf0e","individualid":1593576,"phonetype1":"780-668-2274","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.trevorsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114543","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trevor","lastname":"Roszell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":638,"name":"Devin K. Lavallee","guid":"6bdb6401-9853-42da-9944-89254233af77","individualid":1964874,"phonetype1":"780-937-8721","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://devinlavallee.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402406572","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1253496.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Devin","lastname":"Lavallee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":639,"name":"Kathy Sobh","guid":"6a414977-e04d-40dc-b0da-29eae38250fe","individualid":1570492,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400229980","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1151146.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kathy","lastname":"Sobh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":640,"name":"Rick A. Reinhardt","guid":"6b8d77c0-d9fe-49fd-9cfc-47cd114515c6","individualid":1527008,"phonetype1":"780-991-8030","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.homesbyrick.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109576","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1527008.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rick","lastname":"Reinhardt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":641,"name":"Hakam Aulakh","guid":"323b6569-e93f-4605-a898-65f6de735625","individualid":1934787,"phonetype1":"780-239-1841","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123746","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Hakam","lastname":"Aulakh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":642,"name":"Gordie Ell","guid":"fc47d83f-c618-4215-b3b7-e4af2c24e0ed","individualid":1477853,"phonetype1":"780-497-2921","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.GordieEll.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733359","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010227.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Gordie","lastname":"Ell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":643,"name":"Stephen H. Lau","guid":"b9c8a3b3-7107-4d5c-9465-5c4b609d766e","individualid":1798806,"phonetype1":"780-905-8282","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edmontonhomepros.ca","websitetype2":"","websitetype3":"http://www.linkedin.com/in/stephenlau","websitetype4":"http://www.twitter.com/edmhomepros","websitetype5":"","email1":"398478926","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stephen","lastname":"Lau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":644,"name":"Marianna N. Nikolaev","guid":"0132bf3c-3d72-4488-91c3-7ccd8d7af871","individualid":1947414,"phonetype1":"780-940-9593","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.mariannanikolaev.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807775","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marianna","lastname":"Nikolaev","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":645,"name":"Mike Chadha","guid":"646a1907-7e3d-4d54-bee4-992152d5cb96","individualid":1532346,"phonetype1":"780-907-2737","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.mikechadha.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601663","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1532346.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mike","lastname":"Chadha","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":646,"name":"Daca Resnjak-Savka","guid":"cdc5426f-c79c-4f81-9138-82bcbb59be25","individualid":1621551,"phonetype1":"780-909-7009","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://dragica.abmls.mlxchange.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601992","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daca","lastname":"Resnjak-Savka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":647,"name":"Brad Warkentin","guid":"d96b476b-969f-458a-8cd5-edfc636fa6c7","individualid":1479639,"phonetype1":"780-913-3537","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.bradwarkentin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397340939","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011681.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Warkentin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":648,"name":"Adam J. Benke","guid":"44556037-4afd-42ff-9e24-a6901003f336","individualid":1990102,"phonetype1":"780-221-6106","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602839","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Adam","lastname":"Benke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":649,"name":"Ben S. Oosterveld","guid":"c42dcfe5-4f5e-419a-8820-e86dff64148e","individualid":1921993,"phonetype1":"587-269-3333","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.teamoosterveld.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114965","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ben","lastname":"Oosterveld","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":650,"name":"Dwight L. Hayes","guid":"cdcb5db2-d1ce-4237-8be4-e05cece803c9","individualid":1923814,"phonetype1":"780-394-3232","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.dwighthayes.com","websitetype2":"https://www.facebook.com/dwighthayesrealestate/","websitetype3":"https://www.linkedin.com/in/dwight-hayes-a9328317/","websitetype4":"https://twitter.com/ddddhayes","websitetype5":"","email1":"401268930","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1228229.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dwight","lastname":"Hayes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":651,"name":"Renee Y. Brown","guid":"450dc2fd-e402-46f3-a8b1-3abda47a35a3","individualid":1477508,"phonetype1":"780-905-7773","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.reneebrown.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111198","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477508.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Renee","lastname":"Brown","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":652,"name":"Janice I. Sutherland","guid":"9f54e2ef-c8ff-4187-b524-c5c3ae185cfb","individualid":1479423,"phonetype1":"780-267-2277","phonetype2":"","phonetype3":"","phonetype4":"780-416-4787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402512885","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Janice","lastname":"Sutherland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":653,"name":"Samuel K. Ling","guid":"5387c2ca-1c35-41d1-bc6d-3a6e9e876345","individualid":1478551,"phonetype1":"780-990-8698","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.samling.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601199","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Samuel","lastname":"Ling","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":654,"name":"Cindi Knight","guid":"ba7671a1-80fa-49d9-8e02-00562da2b54c","individualid":1478371,"phonetype1":"780-460-6060","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.TheRealtyWiz.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112185","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478371.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cindi","lastname":"Knight","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":655,"name":"William R. Woytenko","guid":"63130582-4da9-4af1-8d9e-ee62dee52f58","individualid":1479727,"phonetype1":"780-238-7002","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.billwoytenko.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117758","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"William","lastname":"Woytenko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":656,"name":"Peshal K. Bastola","guid":"4611cde7-7d62-4b7b-b6c5-16ac2612eddf","individualid":1997487,"phonetype1":"780-399-6361","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116023","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Peshal","lastname":"Bastola","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":657,"name":"Curtis A. Singh","guid":"aed4a2bc-9c12-4ab4-a83c-d17f6e603421","individualid":1814314,"phonetype1":"780-554-1241","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.greateredmontongroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397057903","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Curtis","lastname":"Singh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":658,"name":"Tina K. Fournier","guid":"13c198d2-73ed-4dda-8597-64dd1379c822","individualid":1532348,"phonetype1":"780-695-0542","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.TinaFournier.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401212466","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tina","lastname":"Fournier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":659,"name":"Lovette D. Zacharuk","guid":"17029e3d-0dd7-404e-a3fe-728d39adbe52","individualid":1479762,"phonetype1":"780-278-3700","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109840","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lovette","lastname":"Zacharuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":660,"name":"Stefani F. Schell","guid":"6313038d-c6d2-4fdc-802b-c82b0533db01","individualid":1974359,"phonetype1":"780-298-0728","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"http://www.sarasotarealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111437","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stefani","lastname":"Schell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":661,"name":"Michelle J. Fogolin","guid":"1a69803e-d66e-4ceb-82b4-5bd71e98f61e","individualid":1602030,"phonetype1":"780-460-2222","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108864","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michelle","lastname":"Fogolin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":662,"name":"Jeff Tidswell","guid":"fad70e6a-70b8-463b-99db-8bee07e22f89","individualid":1479506,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.jefftidswell.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360716","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011880.gif","position":"Associate","permitfreetextemail":0,"firstname":"Jeff","lastname":"Tidswell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":663,"name":"Norm Cholak","guid":"f4f372fd-df49-41dd-b87c-fd884f4ff3ca","individualid":1477611,"phonetype1":"780-991-1313","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.normcholak.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117732","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011910.gif","position":"Associate","permitfreetextemail":0,"firstname":"Norm","lastname":"Cholak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":664,"name":"Corey McEwen","guid":"2f6db495-e74b-478c-a5c5-9b9c6cd9aba9","individualid":1898732,"phonetype1":"780-850-4004","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.coreymcewen.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117397","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1898732.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Corey","lastname":"McEwen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":665,"name":"Azra Niksic","guid":"5f30a26f-95d6-4a3f-84f3-4d040a79b6c2","individualid":1672151,"phonetype1":"780-232-8208","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602097","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1170563.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Azra","lastname":"Niksic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":666,"name":"Gerald H. Bourret","guid":"ac13e186-0736-4d44-a2dc-801de3c6bd61","individualid":1903864,"phonetype1":"780-990-5825","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.geraldsellshouses.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397941410","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gerald","lastname":"Bourret","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":667,"name":"Diane C. Danks","guid":"463b1c47-b619-4356-8612-4049e81480ee","individualid":1477723,"phonetype1":"780-905-9068","phonetype2":"","phonetype3":"","phonetype4":"780-459-0235","phonetype5":"","websitetype1":"http://www.dianedanks.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396755048","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Diane","lastname":"Danks","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":668,"name":"William D. Mcnamara","guid":"29e5be17-b7bf-4607-afd2-2c9f97ff0219","individualid":1986939,"phonetype1":"780-916-5974","phonetype2":"","phonetype3":"","phonetype4":"780-483-4943","phonetype5":"","websitetype1":"http://www.gordonwrking-assoc.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119932","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"William","lastname":"Mcnamara","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:24","updated_at":"2017-08-11 00:10:24"},{"id":669,"name":"Liu Dong","guid":"2f1afbd4-fce9-4dd4-97bf-d47e88590129","individualid":2010236,"phonetype1":"780-885-4668","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116996","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Liu","lastname":"Dong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":670,"name":"Craig D. Stenersen","guid":"352e57b0-f22a-4b62-97b4-258eddba0ab8","individualid":1479389,"phonetype1":"780-233-9939","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.working4u.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397082865","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1130752.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Stenersen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":671,"name":"Allon D. Habinski","guid":"514feabc-d018-4586-b6e0-59edafe1e7f2","individualid":1644907,"phonetype1":"780-707-1600","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398196550","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Allon","lastname":"Habinski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":672,"name":"Kelly A. Grant","guid":"1c6de51f-729f-4e7a-9d39-4e96b8e43cf6","individualid":1676274,"phonetype1":"780-242-2469","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397290939","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Grant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":673,"name":"Doug Smilski","guid":"c220d88f-0bc4-4eb1-b36d-e2e097ee2149","individualid":1479319,"phonetype1":"780-982-7653","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.dougsmilski.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125133","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1100967.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"Smilski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":674,"name":"Danh Tran","guid":"b185ce3e-ec3e-4d53-bb68-71564c8885c1","individualid":1479529,"phonetype1":"780-473-3191","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124223","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Danh","lastname":"Tran","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":675,"name":"Linda M. Kennedy","guid":"9293093a-5151-4e6c-b68e-9fb50472642c","individualid":1987182,"phonetype1":"780-712-5999","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115424","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Linda","lastname":"Kennedy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":676,"name":"Brendan T. Hewitt","guid":"ede1b3f3-4d66-4fa4-853e-2a8835114842","individualid":2012067,"phonetype1":"780-667-4839","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400505289","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brendan","lastname":"Hewitt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":677,"name":"Angela D. Tassone","guid":"45fd1ea1-350f-4ae8-a0cc-50dbcd21a322","individualid":1999282,"phonetype1":"780-394-0567","phonetype2":"","phonetype3":"","phonetype4":"780-401-3446","phonetype5":"","websitetype1":"http://www.sellerinvite.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116215","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Angela","lastname":"Tassone","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":678,"name":"Gregory L. Warwa","guid":"e23452e7-fd0f-44fe-9a87-e496451e7fb2","individualid":1479643,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361029","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011980.gif","position":"Associate","permitfreetextemail":0,"firstname":"Gregory","lastname":"Warwa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":679,"name":"Hao Zhou","guid":"94a25fbe-bf0d-4d41-bb44-be3eb0dce7d8","individualid":1949280,"phonetype1":"780-885-5176","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602596","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1949280.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Hao","lastname":"Zhou","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":680,"name":"Justin Tazi","guid":"43c7865a-b0ea-469e-89bd-5c44bb18a77f","individualid":1479463,"phonetype1":"780-975-3044","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"http://www.justintazi.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122168","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1118205.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Tazi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":681,"name":"Christine Tetreault","guid":"21a2c6d5-b650-4a69-bd8b-c736cc1bb5f0","individualid":2031317,"phonetype1":"780-268-4888","phonetype2":"","phonetype3":"","phonetype4":"403-536-6989","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682055","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1308882.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christine","lastname":"Tetreault","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":682,"name":"Lori Caines","guid":"5ba8acc4-b3b4-400a-98bf-21178d94a91f","individualid":1486023,"phonetype1":"780-984-5674","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.loricaines.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122195","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lori","lastname":"Caines","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":683,"name":"Garett D. Mclean","guid":"14fa7392-cba2-4d26-9dd0-94cbfc85c88a","individualid":1988852,"phonetype1":"780-271-7846","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118131","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Garett","lastname":"Mclean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":684,"name":"Matthew D. Ridyard","guid":"6bff11f1-a3ff-4079-badb-8d4ce6dc1fdc","individualid":1950543,"phonetype1":"780-232-7015","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://homesofedmonton.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400432563","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matthew","lastname":"Ridyard","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":685,"name":"Joshua W. Tesolin","guid":"24e107d8-dccf-4edf-9354-d937f507a544","individualid":1743712,"phonetype1":"780-271-5544","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"http://www.JoshTesolin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110993","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1743712.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Joshua","lastname":"Tesolin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":686,"name":"Atul S. Kaushal","guid":"96fefd65-aada-4ca8-934b-601bd4b17805","individualid":1957662,"phonetype1":"587-983-3644","phonetype2":"","phonetype3":"","phonetype4":"403-450-8419","phonetype5":"","websitetype1":"http://www.zolo.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602638","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1957662.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Atul","lastname":"Kaushal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":687,"name":"Shane Gwilliam","guid":"9bdfc92a-8f84-472b-ab57-ab17a86b066c","individualid":1478081,"phonetype1":"780-893-5602","phonetype2":"","phonetype3":"","phonetype4":"780-425-6379","phonetype5":"","websitetype1":"http://www.sablerealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112863","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1124382.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shane","lastname":"Gwilliam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":688,"name":"Stephen A. Fabiyi","guid":"a98dbc2d-b171-4b14-b0ad-4eec5c974b52","individualid":1894701,"phonetype1":"780-952-7379","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.stephenkfabiyi.com","websitetype2":"http://www.facebook.com/stephenfabiyi","websitetype3":"https://www.linkedin.com/in/stephen-fabiyi-abrr-srsr-e-pror-2b424b39","websitetype4":"https://twitter.com/YEG_SF_REALTOR1","websitetype5":"","email1":"398387377","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stephen","lastname":"Fabiyi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":689,"name":"Patrick C. Au","guid":"4a898425-a65e-45a2-956d-69fc7c4bd36c","individualid":1477285,"phonetype1":"780-990-8087","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121662","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Patrick","lastname":"Au","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":690,"name":"Kevin Sha","guid":"98b5e2fe-75a1-4cfe-a8fb-cc19893c213b","individualid":1988637,"phonetype1":"780-800-9939","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"http://www.kevinsha.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402512994","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1272680.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Sha","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":691,"name":"Brian L. Macleod","guid":"245ad73f-23ad-4060-8c7f-e91c9b6e8266","individualid":1946887,"phonetype1":"780-288-3410","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.brianrealestate.ca","websitetype2":"https://business.facebook.com/BrianRealEstate","websitetype3":"https://ca.linkedin.com/in/brianrealestate","websitetype4":"https://twitter.com/BrianM_ReMax","websitetype5":"","email1":"400458865","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1241861.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Macleod","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":692,"name":"Steve D. Whetham","guid":"9f41f3cc-413f-40ea-adc4-4c11a03af076","individualid":1479663,"phonetype1":"780-722-2888","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.outstandinginyeg.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908854","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479663.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Whetham","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":693,"name":"Mel W. Knott","guid":"f6286684-7178-4791-ba59-61eeb8c06219","individualid":1478372,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.melknott.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402485114","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478372.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mel","lastname":"Knott","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":694,"name":"Chen P. Keng","guid":"d4a55bf6-5d76-4b55-8534-99ddebbfa1c8","individualid":1526310,"phonetype1":"780-708-0036","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.edmproperties.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143766","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1138994.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chen","lastname":"Keng","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":695,"name":"Tony G. Leiva","guid":"16a1dec2-1330-40fc-8ffb-6d778bc2ce9f","individualid":1478518,"phonetype1":"780-504-2577","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.tonyleiva.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118606","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478518.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tony","lastname":"Leiva","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":696,"name":"Sally Munro","guid":"1201a6f3-3709-4ba1-9bd5-46ebb21b3045","individualid":1478840,"phonetype1":"780-441-5457","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.sallymunro.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121023","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478840.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sally","lastname":"Munro","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":697,"name":"Erick S. Yip","guid":"05c36381-7b84-45df-b78c-0e87060083c9","individualid":1479747,"phonetype1":"780-619-6197","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://erickyip.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117763","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479747.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Erick","lastname":"Yip","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":698,"name":"Sue Gaudin","guid":"b645c80c-4499-4644-a50a-f02beaa0f039","individualid":1477985,"phonetype1":"780-909-3780","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://egaudisu.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113688","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sue","lastname":"Gaudin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":699,"name":"Lacey L. Cossette","guid":"21a03a76-aefa-41ce-9729-9e1baecd6392","individualid":2020643,"phonetype1":"780-271-1517","phonetype2":"","phonetype3":"","phonetype4":"587-523-8578","phonetype5":"","websitetype1":"http://www.thefoundryrealestateco.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399818732","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1300510.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lacey","lastname":"Cossette","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":700,"name":"Cathy Currie","guid":"ed1054df-4066-40f4-ac38-f8938004d9fb","individualid":1584759,"phonetype1":"780-232-2178","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.cathycurrie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399818675","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cathy","lastname":"Currie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":701,"name":"Ed Zabinski","guid":"3e1e0529-aa7b-4905-9c32-aaa6a80a57b5","individualid":1479761,"phonetype1":"780-498-1575","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.E-Z.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401918693","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011539.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ed","lastname":"Zabinski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":702,"name":"Lena M. Mills","guid":"c04d7b77-2ca4-42d8-ba5c-864dce0afdbe","individualid":1889532,"phonetype1":"780-974-5362","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.lenamills.ca","websitetype2":"https://www.facebook.com/lenamillsrealestate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838957","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1889532.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lena","lastname":"Mills","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":703,"name":"Carter Masse","guid":"404f2200-3110-43dd-880a-3ded1ab26d8b","individualid":1892556,"phonetype1":"780-297-9901","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.cartermasse.com","websitetype2":"https://www.facebook.com/profile.php?id=100008774747959","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759872","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1892556.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carter","lastname":"Masse","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":704,"name":"Jodi L F Dahl","guid":"9cb89a4d-b735-49ac-9496-d53d87506ee3","individualid":1876315,"phonetype1":"780-263-9007","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118343","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jodi","lastname":"Dahl","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":705,"name":"Stan Gallant","guid":"ddc9d859-c399-4a03-b775-7def9a0ebd94","individualid":1477972,"phonetype1":"780-298-9125","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.realestatesalesedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661896","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477972.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Stan","lastname":"Gallant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:25","updated_at":"2017-08-11 00:10:25"},{"id":706,"name":"Dan J. Kiryluk","guid":"6e1bd37b-60b2-4454-9060-0c8b2e936d84","individualid":1591685,"phonetype1":"780-962-4950","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397267473","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1154182.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dan","lastname":"Kiryluk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":707,"name":"Carole-Anne Brown","guid":"0eadc92c-cdad-4dd2-9ee5-828d19555f6c","individualid":1477505,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120395","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carole-Anne","lastname":"Brown","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":708,"name":"Donna Van Lier-Grieve","guid":"2d79528c-2e8c-4147-a312-9863795ac88f","individualid":1479576,"phonetype1":"780-720-2100","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.homesedmonton.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115111","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Donna","lastname":"Van Lier-Grieve","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":709,"name":"Al H. Allos","guid":"e7d0e15f-aa04-4da1-9230-5a3234bcd7d6","individualid":1658844,"phonetype1":"780-709-4567","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.edmontonsales.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661958","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Al","lastname":"Allos","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":710,"name":"Greg B. Rosychuk","guid":"6dc3fd60-8ee0-4359-9340-528e6bf7e6a7","individualid":1960049,"phonetype1":"587-589-4734","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.gregrosychuk.com","websitetype2":"http://www.facebook.com/rosychuksellsedmonton","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396920875","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1960049.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Greg","lastname":"Rosychuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":711,"name":"Justin E. Lafavor","guid":"29bd407d-e748-44a2-b480-a69123d6b737","individualid":1588119,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.EmpowerRealEstateGroup.com","websitetype2":"http://www.facebook.com/EmpowerRealEstateGroup/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398685176","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Lafavor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":712,"name":"Sandra Umrysh","guid":"f1786f55-20c5-4ac3-b1ab-f386f2caf94a","individualid":2009682,"phonetype1":"780-667-7699","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116968","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1291409.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandra","lastname":"Umrysh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":713,"name":"Adrian Nedelec","guid":"fd2e1c2a-a0b2-4be0-988d-246091cca5c0","individualid":2027707,"phonetype1":"780-966-4471","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398577641","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Adrian","lastname":"Nedelec","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":714,"name":"Ahmad S. Sai","guid":"26988ee3-5f8a-4106-89e7-7d1772bf8dcd","individualid":1646382,"phonetype1":"780-982-1119","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.ahmadsai.com","websitetype2":"https://www.facebook.com/ahmadsaihomes/?ref=aymt_homepage_panel","websitetype3":"https://www.linkedin.com/in/ahmadsai/","websitetype4":"https://twitter.com/ahmadsai","websitetype5":"","email1":"398733580","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1646382.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ahmad","lastname":"Sai","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":715,"name":"Milan Galandak","guid":"720e66a6-1339-4c29-a0b8-e18779b46a51","individualid":1688364,"phonetype1":"780-974-6373","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.rivercityteam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688600","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1174015.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Milan","lastname":"Galandak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":716,"name":"Vesna Farnden","guid":"9a1bee80-8ea9-4a2e-ac0d-4316b561c259","individualid":1477886,"phonetype1":"780-616-1536","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.vesnafarnden.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398801938","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477886.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Vesna","lastname":"Farnden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":717,"name":"Tyler J. Fiege","guid":"fb2071b6-6a83-483f-a655-72ec2c4770af","individualid":1665058,"phonetype1":"780-297-6065","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://tylerfiege.com","websitetype2":"https://www.facebook.com/tylerfiegerealty/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399801184","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1665058.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tyler","lastname":"Fiege","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":718,"name":"Kevin X. Bureau","guid":"05bac902-f6d8-4de5-9de3-5f9f0e45ff25","individualid":2015543,"phonetype1":"780-938-8326","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118729","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Bureau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":719,"name":"Frederick E. Trommeshauser","guid":"db3f8438-efc2-4bdb-a7d2-792bc3d0187c","individualid":1790508,"phonetype1":"780-962-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.fredt.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122447","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1790508.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Frederick","lastname":"Trommeshauser","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":720,"name":"Tushar Bhutani","guid":"2dcd4fec-e4b2-4d92-a6a3-aba461c93b5c","individualid":1998163,"phonetype1":"780-707-6221","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.TusharBhutani.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688799","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tushar","lastname":"Bhutani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":721,"name":"Samuel Ireland","guid":"5b0a28a4-ac61-41d8-b0fe-5ade3e89d3d1","individualid":1478242,"phonetype1":"780-893-5483","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edmontonrealestateguys.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108973","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478242.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Samuel","lastname":"Ireland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":722,"name":"Sara J. Hunter","guid":"b970a8cf-e1b4-4e0f-a7fc-3df3417a53e3","individualid":1478230,"phonetype1":"780-233-8900","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.sarahunter.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120979","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sara","lastname":"Hunter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":723,"name":"Kristyn Rost","guid":"6f31ff11-df14-4ade-b391-cc47a69add75","individualid":2034941,"phonetype1":"780-655-4979","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969463","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kristyn","lastname":"Rost","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":724,"name":"Brittany M. Primeau","guid":"dc3ad65b-dff1-482c-97dc-1099be9cee3b","individualid":1966719,"phonetype1":"587-989-0935","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.lifebeyondthekeys.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398636117","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1254739.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brittany","lastname":"Primeau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":725,"name":"Paul S. Chell","guid":"0cfe491d-b9d2-49b2-99b2-2e5a452e85a0","individualid":1978832,"phonetype1":"780-916-9316","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.paulchell.com","websitetype2":"https://www.facebook.com/Paul-Chell-Real-Estate-734889979947505/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396667387","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1978832.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Chell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":726,"name":"Gerry M. Footz","guid":"39fe630b-17cc-4d24-844b-2b242107f00a","individualid":1477926,"phonetype1":"780-983-3694","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.gerryfootz.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118523","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gerry","lastname":"Footz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":727,"name":"Magdalena E. Luczak","guid":"0394a60e-9a96-4609-a087-c067c498281b","individualid":1725205,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.homeswithmagda.com","websitetype2":"https://www.facebook.com/HomeswithMagda/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759818","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1725205.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Magdalena","lastname":"Luczak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":728,"name":"Amit Duggal","guid":"767068f9-cf54-4948-9b5c-0a59d3523d21","individualid":1477815,"phonetype1":"780-982-0190","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"http://www.amitduggal.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402795183","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101920.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Amit","lastname":"Duggal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":729,"name":"Susan E. Horon","guid":"b85b58ed-e20b-406b-ab1e-42e98d6c6130","individualid":1478200,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.susanhoron.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361150","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478200.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Susan","lastname":"Horon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":730,"name":"Kamal Kang","guid":"3b5bf095-f63f-4ebe-a835-c190baddd5ea","individualid":2031315,"phonetype1":"780-934-1429","phonetype2":"","phonetype3":"","phonetype4":"403-450-8419","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400973330","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kamal","lastname":"Kang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":731,"name":"Richard J. Faucher","guid":"1e1f092c-08ba-4e75-852a-b50491a8b0ce","individualid":1637566,"phonetype1":"780-387-1101","phonetype2":"","phonetype3":"","phonetype4":"780-436-2510","phonetype5":"","websitetype1":"http://www.richardfaucher.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117325","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1637566.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Richard","lastname":"Faucher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":732,"name":"Aaron J. Affolter","guid":"24042061-7a98-47e0-a705-4a45ab12ffa4","individualid":1891156,"phonetype1":"780-554-2244","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.yegproperties.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123695","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1211675.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Aaron","lastname":"Affolter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":733,"name":"Joanna F. Affolter","guid":"36303bda-9977-4a1c-a895-5d4b9a19cc53","individualid":1681782,"phonetype1":"780-554-4503","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.yegproperties.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759787","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joanna","lastname":"Affolter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":734,"name":"David Lam","guid":"73abc043-cb28-4c53-8700-01e4c9049046","individualid":2027288,"phonetype1":"780-919-7319","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.edmestates.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398307034","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1306688.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Lam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":735,"name":"Jeff J. Lorenz","guid":"cc3eb796-a2b5-409e-b407-093f6f5c0e11","individualid":1478568,"phonetype1":"780-640-1150","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.lorenzteam.com","websitetype2":"https://www.facebook.com/jeff.lorenz1?fref=ts","websitetype3":"http://www.linkedin.com/in/jefflorenz","websitetype4":"https://twitter.com/Jeff_Lorenz","websitetype5":"","email1":"398781693","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101785.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeff","lastname":"Lorenz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":736,"name":"Brittany L. Collard","guid":"387836c9-a3c6-417e-a792-05545cc647b8","individualid":1972400,"phonetype1":"780-464-7700","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.lorenzteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112065","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brittany","lastname":"Collard","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":737,"name":"Jefri C. Estrada","guid":"6dd69342-6d1a-437f-845f-fd5565381a6b","individualid":1529711,"phonetype1":"780-239-4717","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118303","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jefri","lastname":"Estrada","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":738,"name":"Jeremy J. Amyotte","guid":"aaa2bd17-8d4d-4899-93e3-40771731d057","individualid":1690214,"phonetype1":"780-232-7170","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.jeremyamyotte.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121142","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1690214.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeremy","lastname":"Amyotte","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":739,"name":"Lisa-Marie Davies","guid":"e2c8b20c-b447-416f-8b77-2e9741cf08f1","individualid":1952243,"phonetype1":"780-906-5472","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.jeremyamyotte.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118388","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1952243.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lisa-Marie","lastname":"Davies","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":740,"name":"Russ D. McLaughlin","guid":"c1b0b595-1989-4213-9cd4-53545f5f79ac","individualid":1478719,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.HomesByRuss.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360721","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Russ","lastname":"McLaughlin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:26","updated_at":"2017-08-11 00:10:26"},{"id":741,"name":"Chris Mooney","guid":"09eef5ce-4a92-4b62-b705-f109034fa822","individualid":1478800,"phonetype1":"780-232-3386","phonetype2":"","phonetype3":"","phonetype4":"866-318-7048","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400707316","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010464.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Chris","lastname":"Mooney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":742,"name":"Cathy Nguyen","guid":"704ce81e-fe26-4082-ab01-78426c7baefe","individualid":1900982,"phonetype1":"780-906-0188","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401025176","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1217392.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cathy","lastname":"Nguyen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":743,"name":"Brendan B. McNeilly","guid":"dfebbb34-9489-4d1e-a6d2-ca4506ac6010","individualid":1930581,"phonetype1":"780-242-8028","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.findedmontonareahomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812138","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brendan","lastname":"McNeilly","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":744,"name":"David F. Demian","guid":"667f2b14-ff4c-49fb-b284-efc15815510d","individualid":1942719,"phonetype1":"780-462-5000","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.feelgoodrealestate.com","websitetype2":"https://www.facebook.com/DavidDemianRealtor/","websitetype3":"https://ca.linkedin.com/in/daviddemian","websitetype4":"","websitetype5":"","email1":"397602538","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1239173.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Demian","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":745,"name":"Bill A. Taylor","guid":"e2e522fd-a3d9-4911-b1e7-01c963b60bce","individualid":1479458,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360848","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Taylor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":746,"name":"Anne E. Fry","guid":"64effc6e-0cc1-441c-a08d-2efeca5b16ac","individualid":1477957,"phonetype1":"780-445-4534","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.annefry.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111783","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anne","lastname":"Fry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":747,"name":"Debbie Seegmiller","guid":"2ee18f2b-f1ab-4834-ace1-e5394b93c504","individualid":2008705,"phonetype1":"780-719-1526","phonetype2":"","phonetype3":"","phonetype4":"403-520-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116895","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Debbie","lastname":"Seegmiller","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":748,"name":"Trish Vandermeer","guid":"dc64879c-1d04-4d7e-ad86-5bd1d0cc4d06","individualid":1592556,"phonetype1":"780-909-9972","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109254","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trish","lastname":"Vandermeer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:10:27","updated_at":"2017-08-11 00:10:27"},{"id":749,"name":"Ho-Long Ho","guid":"9f56a358-57d7-43a9-b9c5-52e6ec61144a","individualid":1478173,"phonetype1":"780-909-2218","phonetype2":"","phonetype3":"","phonetype4":"780-416-4787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402512845","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ho-Long","lastname":"Ho","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:01","updated_at":"2017-08-11 00:12:01"},{"id":750,"name":"Catherine J. Brooker","guid":"366feeac-9482-4c09-9f1b-02ffce857e8e","individualid":1817371,"phonetype1":"780-886-3866","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118322","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Catherine","lastname":"Brooker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":751,"name":"Christopher S. Keeler","guid":"54cd2185-4199-4894-a175-5a6d56b619be","individualid":2013476,"phonetype1":"780-293-6674","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.chriskeeler.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759990","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christopher","lastname":"Keeler","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":752,"name":"David M. Ozubko","guid":"9808e847-5836-4e19-a1be-95b1e4628b56","individualid":1982145,"phonetype1":"780-966-8227","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.davesells.ca","websitetype2":"https://www.facebook.com/DaveSells.ca/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397883402","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1982145.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Ozubko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":753,"name":"Kim F. Martin","guid":"820689bf-4187-4ce1-a777-43c943165976","individualid":1478658,"phonetype1":"780-305-4557","phonetype2":"","phonetype3":"","phonetype4":"780-674-5933","phonetype5":"","websitetype1":"http://www.continental-realty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111811","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Kim","lastname":"Martin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":754,"name":"Dan D. Sigouin","guid":"7aba5596-1e1e-4c3e-bf7e-c860c2d91ff4","individualid":1929341,"phonetype1":"780-668-0187","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110010","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dan","lastname":"Sigouin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":755,"name":"Paul D. Gravelle","guid":"d796bb17-f4d2-4d60-94ed-d55b2c723167","individualid":1534782,"phonetype1":"780-490-5006","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://gravellesells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118006","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1534782.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Gravelle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":756,"name":"Taras Vanovskyy","guid":"ca956538-4102-4336-9484-fa725b1b6685","individualid":1734622,"phonetype1":"780-686-6658","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396805806","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Taras","lastname":"Vanovskyy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":757,"name":"Barry Hoffman","guid":"f273d35d-1715-4624-ad15-b56ded70a5a8","individualid":1478179,"phonetype1":"780-414-1414","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.hoffmanrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119363","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barry","lastname":"Hoffman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":758,"name":"Deena J. Caputo","guid":"b3ceff18-8b34-47b4-bbb5-32e994215aa9","individualid":1960117,"phonetype1":"780-278-2522","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://deenacaputo.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115000","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Deena","lastname":"Caputo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":759,"name":"Sandy G. Rhyason","guid":"1bf230cc-28a1-48fb-80c3-2e937c3cfdce","individualid":1479100,"phonetype1":"780-910-1345","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.callsandy.ca","websitetype2":"http://callsandy","websitetype3":"http://callsandy","websitetype4":"http://callsandy","websitetype5":"","email1":"396130160","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010219.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandy","lastname":"Rhyason","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":760,"name":"Riaz S. Ali","guid":"c21f1bf2-46db-4b07-af7a-66aa16deec85","individualid":1601512,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.Riazsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110531","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Riaz","lastname":"Ali","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":761,"name":"Carlo Cimino","guid":"43e55e88-34bf-41e2-96e5-67bea3c7471e","individualid":1960950,"phonetype1":"780-993-9650","phonetype2":"","phonetype3":"","phonetype4":"780-437-5474","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602661","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carlo","lastname":"Cimino","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":762,"name":"Felicia A. Dean","guid":"1fdb2413-2233-4fc5-aabb-a8763eab0da4","individualid":1771692,"phonetype1":"780-289-6670","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://deanandosmond.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117372","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1771692.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Felicia","lastname":"Dean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":763,"name":"Jennifer A. Osmond","guid":"bbb36468-e37d-48f9-9aa9-0ae897b3bcf7","individualid":1915426,"phonetype1":"780-289-6671","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241813","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1915426.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Osmond","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":764,"name":"Nichola Elise Ryhanen","guid":"8445a6c2-b7f7-4c48-873a-5340405afa01","individualid":1741603,"phonetype1":"780-504-1182","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.nicholaelise.com","websitetype2":"https://www.facebook.com/NicholaElise","websitetype3":"https://ca.linkedin.com/in/nichola-elise-ryhanen-354b8a92","websitetype4":"https://twitter.com/Nichola_Elise","websitetype5":"","email1":"396643418","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1179345.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nichola Elise","lastname":"Ryhanen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":765,"name":"Cynthia Wickens","guid":"e07d3a3c-d827-4f9a-a27f-a611d875266c","individualid":2030704,"phonetype1":"780-718-1598","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682013","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cynthia","lastname":"Wickens","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":766,"name":"Karen Duggan","guid":"69160912-4dce-4b28-a19c-112bea84d88f","individualid":1966076,"phonetype1":"780-929-8600","phonetype2":"","phonetype3":"","phonetype4":"780-929-9272","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/loriduggangateway/","websitetype3":"https://ca.linkedin.com/in/karen-duggan-6a195769","websitetype4":"https://twitter.com/KDugganGateway","websitetype5":"","email1":"396276622","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1254251.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karen","lastname":"Duggan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":767,"name":"Lori K. Duggan","guid":"9be3f977-efd4-4e97-a2a1-219f13bbb989","individualid":1477817,"phonetype1":"780-929-8600","phonetype2":"","phonetype3":"","phonetype4":"780-929-9272","phonetype5":"","websitetype1":"http://www.royallepage.ca/loriduggan","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112295","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477817.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lori","lastname":"Duggan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":768,"name":"Maria Carmen P. Ponticilla","guid":"53597ada-a10d-4ff7-8887-8859657d2807","individualid":1966823,"phonetype1":"780-885-6655","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115015","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Maria Carmen","lastname":"Ponticilla","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":769,"name":"Colleen J. Terlson","guid":"0024a4fe-931b-45c8-84a7-d29ef657ea19","individualid":1945836,"phonetype1":"780-803-8600","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://colleenterlson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122032","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Colleen","lastname":"Terlson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":770,"name":"Marvin W. Sommers","guid":"8bf09003-029d-466f-8162-56d71a629c2b","individualid":1479338,"phonetype1":"780-915-4980","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://marvinsommers.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111498","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011908.gif","position":"Associate","permitfreetextemail":0,"firstname":"Marvin","lastname":"Sommers","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":771,"name":"Natesha E. Francis-Sambury","guid":"35c76faa-b5a7-412d-a9de-ac8789b8219f","individualid":1597390,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.nateshashomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551365","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1597390.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Natesha","lastname":"Francis-Sambury","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":772,"name":"Jacquie C. Smith","guid":"4629582d-7ba2-4c5b-89e4-38c1dba312e2","individualid":1969265,"phonetype1":"780-887-6493","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.2percentrealtypro.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125089","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jacquie","lastname":"Smith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":773,"name":"Sid Yar","guid":"cebff84a-1864-4d41-ac8b-36e989dfa919","individualid":1810132,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.SidYar.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782173","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1810132.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sid","lastname":"Yar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":774,"name":"Donald R. Unger","guid":"c703bce0-9fc4-439f-9efd-0ac08083d7b5","individualid":1998622,"phonetype1":"780-486-6999","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401616828","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Donald","lastname":"Unger","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":775,"name":"Dean Throness","guid":"e8d09519-a747-4787-ba71-b68c61af1f8f","individualid":1479504,"phonetype1":"780-965-8168","phonetype2":"","phonetype3":"","phonetype4":"780-756-9991","phonetype5":"","websitetype1":"http://www.deant.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111184","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dean","lastname":"Throness","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":776,"name":"Tannas Rejaei","guid":"3e678308-3330-477a-8272-67d9d3b0b71e","individualid":1991794,"phonetype1":"780-885-8267","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.tannasrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122106","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tannas","lastname":"Rejaei","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":777,"name":"Selena Cheung","guid":"b6efab87-207e-496d-8f75-4c4347320b7a","individualid":1808979,"phonetype1":"780-893-7129","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"http://www.wealthyhome.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401212498","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Selena","lastname":"Cheung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":778,"name":"Elizabeth W. Schellenberg","guid":"460af6a7-524a-4774-92f8-9ad65c088bf8","individualid":1960121,"phonetype1":"780-884-8282","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111418","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Elizabeth","lastname":"Schellenberg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":779,"name":"Mir I. Khan","guid":"6adb1000-4f89-45bc-91a7-13431d2662b3","individualid":1892817,"phonetype1":"780-964-4190","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.homesandgardensrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396393941","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mir","lastname":"Khan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":780,"name":"David C. St Jean","guid":"16f89fe2-f38f-44bf-bb46-d11756b18e73","individualid":1502675,"phonetype1":"780-964-7653","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.DavidStJean.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908859","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1502675.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"St Jean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":781,"name":"Camron Rahmanian","guid":"dc02803a-6735-4b00-8e66-6030d53dbdaf","individualid":1975554,"phonetype1":"780-907-9678","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115862","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Camron","lastname":"Rahmanian","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":782,"name":"Pat J. Boulton","guid":"de87a8ef-001a-4f70-be3f-9bf3e237e53b","individualid":1477455,"phonetype1":"780-451-1685","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124463","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477455.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Pat","lastname":"Boulton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":783,"name":"Jing Qu","guid":"687faf39-4f84-44c3-9e24-017a4c2738d1","individualid":1965344,"phonetype1":"587-938-8899","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602679","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jing","lastname":"Qu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":784,"name":"Chrystal L. Smith","guid":"73327413-c264-4aae-8719-5062568b51b0","individualid":1883071,"phonetype1":"780-722-1211","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.chrystalsmithrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112762","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chrystal","lastname":"Smith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":785,"name":"Brody S. McIntyre","guid":"7bfc8235-a5d7-4d4c-ba80-ce4a010e1da8","individualid":1478708,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.themcintyres.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838891","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brody","lastname":"McIntyre","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:02","updated_at":"2017-08-11 00:12:02"},{"id":786,"name":"Roderick S. McIntyre","guid":"95e2a406-6fc3-4d21-88c5-6738b10811f5","individualid":1478709,"phonetype1":"780-699-5295","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123473","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Roderick","lastname":"McIntyre","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":787,"name":"Patrick Palaypay","guid":"6523f6b2-9ec4-4d1b-b7c6-164803bc0a8e","individualid":1979650,"phonetype1":"780-238-4388","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114708","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Patrick","lastname":"Palaypay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":788,"name":"Iris T. Gillies","guid":"5b7d1429-2b5b-4a7d-b23a-ccd2d3f888be","individualid":1905878,"phonetype1":"780-953-4747","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120813","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Iris","lastname":"Gillies","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":789,"name":"Taylor R. Soroka","guid":"8753d542-67a5-46e4-8500-6d79984552bc","individualid":2001811,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.irisandtaylor.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116337","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Taylor","lastname":"Soroka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":790,"name":"Ash H. Somani","guid":"04bd2cd2-a4c4-4123-91bd-2a17dfef5204","individualid":1937016,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://propertyadvisors.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122490","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ash","lastname":"Somani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":791,"name":"Shahir Bhanji","guid":"474454e8-8774-4860-a73b-5a70583d6776","individualid":1477388,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.PropertyAdvisors.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733498","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1111764.gif","position":"Associate","permitfreetextemail":0,"firstname":"Shahir","lastname":"Bhanji","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":792,"name":"Carole A. Chatterley","guid":"40c9856e-fc25-449c-9154-b68011069b34","individualid":1477589,"phonetype1":"780-906-9226","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.carolechatterley.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400832771","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carole","lastname":"Chatterley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":793,"name":"Phillip Morin","guid":"0cf07892-aa5e-44b2-a02d-12ef2fe24732","individualid":2030702,"phonetype1":"780-908-9297","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682005","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Phillip","lastname":"Morin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":794,"name":"Robert Eskiw","guid":"cfd9b15a-6d21-4562-8b27-f87abca534b4","individualid":1477876,"phonetype1":"780-406-1200","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.homeinedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122001","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477876.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Eskiw","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":795,"name":"Shawna Eskiw","guid":"32bd0ef7-236a-4d87-9b41-74d6ed40eef4","individualid":1875171,"phonetype1":"780-668-0617","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.homeinedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113013","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1875171.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shawna","lastname":"Eskiw","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":796,"name":"Jim Dhillon","guid":"39f2c177-78b6-4e8f-8641-33cf2cc7236e","individualid":1984554,"phonetype1":"780-952-2995","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602785","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1269548.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jim","lastname":"Dhillon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":797,"name":"Deo B. Gahiza","guid":"d343db56-acb1-401e-9a9f-68c546091b30","individualid":1526027,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.deogahiza.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361248","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Deo","lastname":"Gahiza","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":798,"name":"James Knutson","guid":"888c53b5-341f-47f4-b55a-f939943615b5","individualid":2030700,"phonetype1":"780-499-1812","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681997","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1308442.jpg","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"Knutson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":799,"name":"Joana Funk","guid":"ccd8d09e-9336-4914-b1a9-140987c89ae5","individualid":1477961,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.joanafunk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401393104","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joana","lastname":"Funk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":800,"name":"Bharat B. Agnihotri","guid":"b400d98b-0ad5-4efc-b709-c94531da23b5","individualid":1477235,"phonetype1":"780-966-3536","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.bharatagnihotri.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119174","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477235.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bharat","lastname":"Agnihotri","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":801,"name":"Myles Blewett","guid":"789721ea-cd26-4861-be19-e0c9ed64129b","individualid":1477426,"phonetype1":"780-446-4643","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.MylesBlewett.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114395","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Myles","lastname":"Blewett","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":802,"name":"Larry J. McTaggart","guid":"55d87f1b-cb00-4063-8dd0-92623c71f3e9","individualid":1478738,"phonetype1":"780-906-3222","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.nowrealestategroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117788","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Larry","lastname":"McTaggart","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":803,"name":"Peter D. Schalin","guid":"ee93f742-f248-40b2-ae9c-f27f5d6143ab","individualid":1479217,"phonetype1":"780-243-7000","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.peterdschalin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120381","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479217.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Schalin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":804,"name":"Holden B. Engley","guid":"13b4bbac-c941-4ccd-a7ed-d4e5a213ad52","individualid":1477863,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.holdenengley.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361047","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Holden","lastname":"Engley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":805,"name":"Bob Siffledeen","guid":"602fe93a-8fb4-4534-b260-a797e06c7822","individualid":1479294,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361077","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bob","lastname":"Siffledeen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":806,"name":"Dustin Batuik","guid":"f17e18e9-2549-4e42-a760-bbb9ce3f92bd","individualid":1477341,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://dustinrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120296","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477341.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dustin","lastname":"Batuik","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":807,"name":"Edris A. Azizi","guid":"9f5781b9-62f1-42a8-a2f3-ba71043471e9","individualid":1643554,"phonetype1":"780-756-7275","phonetype2":"","phonetype3":"","phonetype4":"780-756-1125","phonetype5":"","websitetype1":"http://www.capcityrealtygroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602035","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Edris","lastname":"Azizi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":808,"name":"Susan C. Janzen","guid":"67026c96-819c-4b1e-abb3-ee30ffd87bc4","individualid":1478258,"phonetype1":"780-893-7989","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.susanjanzen.com","websitetype2":"http://www.facebook.com/Edmontonhomessusanjanzen/?fref=ts","websitetype3":"http://www.linkedin.com/in/susan-janzen-b-ed-5940988/","websitetype4":"https://twitter.com/Suesellshomes?lang=en","websitetype5":"","email1":"401268748","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478258.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Susan","lastname":"Janzen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":809,"name":"Ian K. Robertson","guid":"d3d81c52-0f1e-4196-b16f-d365c5e7b82d","individualid":1479117,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.robertsonfirst.ca","websitetype2":"https://www.facebook.com/robertsonfirst/","websitetype3":"","websitetype4":"https://twitter.com/RobertsonFirst","websitetype5":"","email1":"396123437","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479117.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ian","lastname":"Robertson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":810,"name":"Moe Charara","guid":"d41397e5-abc5-4ebd-8d43-1b03f991b690","individualid":1477586,"phonetype1":"780-707-4848","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://experiencerealtygroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400022347","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Moe","lastname":"Charara","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":811,"name":"Ray Elwenni","guid":"86b1874a-9cd6-4da9-82c7-7aea27e0f27d","individualid":1646965,"phonetype1":"780-964-8881","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.ExperienceRealtyGroup.com","websitetype2":"https://www.facebook.com/experiencerealtygroup/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119757","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ray","lastname":"Elwenni","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":812,"name":"Alexander Germann","guid":"a13947c7-3699-4cc7-880d-446352f7f865","individualid":2027708,"phonetype1":"587-778-0471","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"http://www.facebook.com/AlexanderGermannREMAX/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688903","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1307051.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alexander","lastname":"Germann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":813,"name":"Christian I. Bailey","guid":"1d427c9d-56f7-43f5-9063-6ce267328e9d","individualid":1991133,"phonetype1":"780-490-6730","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"http://facebook.com/realtorhalifax","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759963","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christian","lastname":"Bailey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":814,"name":"Karan Khanna","guid":"55eefe89-5f26-4030-a4a1-0954f552e6e6","individualid":2012482,"phonetype1":"780-782-1828","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117118","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Karan","lastname":"Khanna","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":815,"name":"Jaclyn Baillie","guid":"20c0965f-6d0e-4582-b71d-c594ea9c1a76","individualid":2028159,"phonetype1":"780-243-3645","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.jaclynbaillie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398594250","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jaclyn","lastname":"Baillie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":816,"name":"Daniel J. Smith","guid":"949ee4fc-2bb5-46dd-8a78-b096819d6c32","individualid":1971036,"phonetype1":"780-991-1406","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119902","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daniel","lastname":"Smith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":817,"name":"Cory S. Lucas","guid":"9b3c0365-11b3-4c6b-a269-352cb4f346a2","individualid":1896495,"phonetype1":"780-289-5096","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.lucasrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121805","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1214792.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cory","lastname":"Lucas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":818,"name":"Ian S. Fletcher","guid":"687780e2-71d8-467d-b8ae-2c8b4a2bf047","individualid":1629792,"phonetype1":"780-913-4663","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edmontonrealtyadvisors.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119747","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ian","lastname":"Fletcher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":819,"name":"Ricardo D. Brito","guid":"157d8679-8584-41d6-9576-4bc5dd1e0f0f","individualid":1957475,"phonetype1":"780-802-3300","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.ricardobrito.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602633","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ricardo","lastname":"Brito","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":820,"name":"Jamie M. Savage","guid":"8751fc83-40f3-4047-808a-eee850a3d88e","individualid":1665466,"phonetype1":"780-718-8058","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://jamiesavage.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117338","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jamie","lastname":"Savage","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":821,"name":"Sunny Sahni","guid":"04ba2ca7-652f-4b47-b9ba-46c6840caf61","individualid":1636515,"phonetype1":"780-993-9787","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122975","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sunny","lastname":"Sahni","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":822,"name":"Shauna S. Ylagan","guid":"bb02888d-eea0-47ad-beb1-fe7ab555b380","individualid":1994007,"phonetype1":"780-938-3146","phonetype2":"","phonetype3":"","phonetype4":"780-437-5256","phonetype5":"","websitetype1":"http://www.shaunaylagan.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688783","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shauna","lastname":"Ylagan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":823,"name":"Patti Kudrinko","guid":"c50ce094-e35b-49d3-8a33-a9b5ad981107","individualid":1478428,"phonetype1":"780-498-2059","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109847","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478428.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Patti","lastname":"Kudrinko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":824,"name":"Merica Berthiaume-Kennedy","guid":"1560ed07-821a-4e56-b649-db72f97f367d","individualid":1935405,"phonetype1":"780-485-7464","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://mericakennedy.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397638447","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Merica","lastname":"Berthiaume-Kennedy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:03","updated_at":"2017-08-11 00:12:03"},{"id":825,"name":"John L. Mattiello","guid":"5ec38692-0996-47b3-b43e-4bdcab1c1312","individualid":1478673,"phonetype1":"780-953-7388","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.teammattiello.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601502","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478673.jpg","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Mattiello","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":826,"name":"Joanna Benvenuto","guid":"433d730f-a284-4c5b-a9fe-1c22c8fbae5c","individualid":1725474,"phonetype1":"780-920-4258","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110279","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1725474.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Joanna","lastname":"Benvenuto","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":827,"name":"Bruno F. Schiavon","guid":"d2d451cd-ed7b-482d-a2f9-d3c0bd821a7c","individualid":1755081,"phonetype1":"780-964-2342","phonetype2":"","phonetype3":"","phonetype4":"587-523-8578","phonetype5":"","websitetype1":"http://www.thefoundryrealestateco.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118053","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1183212.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bruno","lastname":"Schiavon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":828,"name":"Murray A. Glick","guid":"2fd829ef-0115-4a99-b7e5-516a5f6c2d31","individualid":1478010,"phonetype1":"780-990-4313","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.glickandglick.com","websitetype2":"http://glickandglick.com/","websitetype3":"https://ca.linkedin.com/in/murray-glick-266b2b10","websitetype4":"https://twitter.com/murrayglick?lang=en","websitetype5":"","email1":"398803449","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478010.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Murray","lastname":"Glick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":829,"name":"Seth A. Glick","guid":"482e674d-b0b2-4667-870d-2797e981e3d4","individualid":1982488,"phonetype1":"780-909-4313","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.glickandglick.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602772","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1267690.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Seth","lastname":"Glick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":830,"name":"Khal Moustarah","guid":"e184b49d-6215-4a74-9686-996cf69a5023","individualid":1981112,"phonetype1":"780-266-3696","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123331","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Khal","lastname":"Moustarah","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":831,"name":"Sterling A. Preddie","guid":"8ae74767-32bb-4d86-a708-fe73b6bd5704","individualid":1479035,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402795174","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Sterling","lastname":"Preddie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":832,"name":"Michele A. Wuerch","guid":"ab0a8bc9-7558-4d66-9a9b-d669e3603d37","individualid":1992715,"phonetype1":"780-217-5685","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.edmontonhomesales.ca","websitetype2":"https://www.facebook.com/@edmontonhomesales.ca","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402406593","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1992715.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michele","lastname":"Wuerch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":833,"name":"Teresa L. Hall","guid":"3b527541-db21-47ee-af43-34df0534560c","individualid":1537516,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://teresahall.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110922","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Teresa","lastname":"Hall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":834,"name":"Lori L. Sorge","guid":"80b89fbb-093c-4da8-b10d-48a63217f96f","individualid":1719180,"phonetype1":"780-910-6325","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109962","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lori","lastname":"Sorge","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":835,"name":"Lori Cartmell","guid":"7f1b0cce-ebbe-42e9-abaf-51d602ccfbd8","individualid":1477567,"phonetype1":"780-288-9696","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110171","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477567.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lori","lastname":"Cartmell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":836,"name":"Shairing Vashum","guid":"f77a65b6-ea53-4e70-b343-bbbda61dae96","individualid":2025265,"phonetype1":"780-885-3466","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397155065","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shairing","lastname":"Vashum","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":837,"name":"Shaun Ho","guid":"2eb2022d-f3cc-412c-bba1-8e69681f0bb6","individualid":1557375,"phonetype1":"780-709-8081","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.shaunho.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398776067","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shaun","lastname":"Ho","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":838,"name":"Sam Lau","guid":"f78ccd38-376b-45d7-9178-6d7c8217bc09","individualid":1935305,"phonetype1":"780-945-9981","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edmontonhomepros.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602524","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sam","lastname":"Lau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":839,"name":"Colleen A. Roenspies","guid":"8fb6cef2-fe2e-4b1b-87ae-3fed45c70f73","individualid":1479127,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.colleenroenspies.ca","websitetype2":"https://www.facebook.com/Colleen-Roenspies-The-Real-in-Realtor-100262066720579/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601298","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479127.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Colleen","lastname":"Roenspies","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":840,"name":"James H. Mabey","guid":"a0a60aae-00d6-4855-8f14-37d46f40bd8a","individualid":1566130,"phonetype1":"780-264-6471","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.mabeyahome.com","websitetype2":"https://www.facebook.com/j.h.mabey","websitetype3":"https://ca.linkedin.com/in/jamabey","websitetype4":"https://twitter.com/MabeyAHome","websitetype5":"","email1":"399688540","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1149014.jpg","position":"Broker","permitfreetextemail":0,"firstname":"James","lastname":"Mabey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":841,"name":"Fion F. Pon","guid":"8c12ba97-3888-42e1-987f-b376ca05dbe2","individualid":1479014,"phonetype1":"780-970-2823","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601566","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1107599.gif","position":"Associate","permitfreetextemail":0,"firstname":"Fion","lastname":"Pon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":842,"name":"Jo A. Blumenthal","guid":"19a2706a-e1ee-491e-b438-bdfbeae395cd","individualid":1528442,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121075","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jo","lastname":"Blumenthal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":843,"name":"Raj Prasad","guid":"3af611a7-380e-4b7c-9ba9-39971c6f8ddb","individualid":1479033,"phonetype1":"780-918-7324","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681649","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Raj","lastname":"Prasad","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":844,"name":"Sunny Sidhu","guid":"64b8976e-829b-42bc-a73e-709fe0d7cdcf","individualid":1599317,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.theREALsunnysidhu.com","websitetype2":"http://facebook.com/sunnysidhuremax","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759738","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1157617.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sunny","lastname":"Sidhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":845,"name":"Dave R. Dry","guid":"dcd7b752-15df-4664-8209-4a6d2490cc86","individualid":1757414,"phonetype1":"780-446-3727","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.davedryhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109975","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Dry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":846,"name":"Ayaz A. Bhanji","guid":"0729fb6e-3899-4731-ab3e-77df978dc056","individualid":1477387,"phonetype1":"780-641-1320","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.edmontoncommercialproperties.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113693","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1102216.gif","position":"Broker","permitfreetextemail":0,"firstname":"Ayaz","lastname":"Bhanji","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":847,"name":"Jeremiah H. Townsend","guid":"fbb72d9f-f918-417b-855b-0a125712eb04","individualid":1631189,"phonetype1":"780-995-9864","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://jeremiahtownsend.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602010","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jeremiah","lastname":"Townsend","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":848,"name":"Richard M. Halabi","guid":"8ef342ad-b913-4682-881a-db40b4ce2716","individualid":1565932,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.yeghouse.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113456","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Halabi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":849,"name":"Rhonda L. Kruhlak","guid":"07939883-d38e-430f-8d19-c27da7ad9d21","individualid":1993719,"phonetype1":"780-719-3221","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.rhondakruhlak.com","websitetype2":"https://www.facebook.com/RhondaKruhlakRealEstate/","websitetype3":"","websitetype4":"https://twitter.com/RhondaKruhlak","websitetype5":"","email1":"396688147","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1276753.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rhonda","lastname":"Kruhlak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":850,"name":"Daryl R. Abram","guid":"c46f4b65-c4d8-4884-8a6b-7f1d0363569f","individualid":2030694,"phonetype1":"780-231-8991","phonetype2":"","phonetype3":"","phonetype4":"780-986-4494","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681899","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daryl","lastname":"Abram","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":851,"name":"Geoff Gold","guid":"d34286cf-d400-44f4-a755-539d87dee72e","individualid":1982591,"phonetype1":"780-988-7865","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122066","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Geoff","lastname":"Gold","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":852,"name":"Chelsea M. Foster","guid":"d6c41feb-d694-4d5c-8ef7-8d9c5994cc23","individualid":1912418,"phonetype1":"780-914-1271","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.albertaonfire.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125015","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chelsea","lastname":"Foster","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":853,"name":"Rachelle Cusworth","guid":"523b866f-fefe-4bb8-b0b2-a0ea381d6be4","individualid":1588115,"phonetype1":"780-932-3843","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.cusworth.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111939","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1588115.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rachelle","lastname":"Cusworth","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":854,"name":"Surrenda S. Stark","guid":"cefc58cb-76eb-4895-860f-ac4d2a995d3f","individualid":1940635,"phonetype1":"780-984-6467","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"http://www.surrendastark.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396596894","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Surrenda","lastname":"Stark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":855,"name":"Santosh Nayyer","guid":"90bf328b-494b-45aa-9e10-4f214e3525ee","individualid":1478866,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://santoshnayyer.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601270","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011926.gif","position":"Associate","permitfreetextemail":0,"firstname":"Santosh","lastname":"Nayyer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":856,"name":"Manik Bahl","guid":"63f26b5e-31c1-4d46-9224-5039f110e89c","individualid":2031462,"phonetype1":"780-257-6666","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402069054","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Manik","lastname":"Bahl","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:04","updated_at":"2017-08-11 00:12:04"},{"id":857,"name":"Faisal Rajan","guid":"7bb09f2b-e92d-404a-bb1e-57f60badb275","individualid":1728835,"phonetype1":"780-708-3115","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.myedmontonagent.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112591","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1728835.JPG","position":"Associate","permitfreetextemail":0,"firstname":"Faisal","lastname":"Rajan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":858,"name":"Marc L. Perras","guid":"ea13c7d9-a141-4d89-8406-823f958dcd2a","individualid":1478984,"phonetype1":"780-478-5478","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.marcperras.com","websitetype2":"https://www.facebook.com/YEGListingscom-163679327170563/","websitetype3":"https://www.linkedin.com/in/marc-perras-8520a121/","websitetype4":"","websitetype5":"","email1":"398801931","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478984.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marc","lastname":"Perras","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":859,"name":"Geordie M. Morison","guid":"8e0445f1-b765-4b69-aa8d-ffbd4c422cd0","individualid":1992280,"phonetype1":"780-222-9666","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.yeglistings.com","websitetype2":"https://www.facebook.com/YEGListingscom-163679327170563/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602860","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Geordie","lastname":"Morison","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":860,"name":"Mahmoodur Rahman","guid":"628c25f1-88df-424d-89d4-c8cf1f4cc080","individualid":1741934,"phonetype1":"780-907-3578","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.mrahmanhome4u.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402485132","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mahmoodur","lastname":"Rahman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":861,"name":"Chris T. Blower","guid":"20ab28da-9ea4-4ff4-99e0-43d3fc52d431","individualid":1477430,"phonetype1":"780-909-2040","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112205","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Blower","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":862,"name":"Jessica L. Kibambe","guid":"66fa3bfb-d5bb-423f-80c7-22f0ebfcf6be","individualid":2019876,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://jkibamberealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398577629","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jessica","lastname":"Kibambe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":863,"name":"Courtney M. Boyd","guid":"5d516ec3-3b0a-48e6-8ad7-3f66bfd2c44c","individualid":1929244,"phonetype1":"780-554-6774","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124823","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Courtney","lastname":"Boyd","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":864,"name":"Soolgi Moon","guid":"f624fbe4-4390-4d7f-a5d6-60bf223c7632","individualid":1919492,"phonetype1":"780-993-5430","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398685187","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Soolgi","lastname":"Moon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":865,"name":"Kevin B. Grenier","guid":"5e421fec-4bdc-46c8-95d7-42ac22bb991c","individualid":1586247,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.kevingrenier.com","websitetype2":"https://www.facebook.com/KevinGrenierREALTOR/","websitetype3":"https://www.linkedin.com/in/kevingrenier/","websitetype4":"https://twitter.com/KevinGrenier1","websitetype5":"","email1":"398306985","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1152729.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Grenier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":866,"name":"Lawrence K. Lee","guid":"f176ed24-ff37-4550-a9ce-1ef9b8a0ba87","individualid":1478509,"phonetype1":"780-461-0140","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109051","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lawrence","lastname":"Lee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":867,"name":"Nathan R. Mol","guid":"391315e2-1ab7-4a24-9791-8e3924b4d693","individualid":1816214,"phonetype1":"780-486-8655","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"https://www.livrealestate.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/edmonton/","websitetype4":"https://twitter.com/nathanmol","websitetype5":"","email1":"398661993","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1816214.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nathan","lastname":"Mol","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":868,"name":"Troy S. Haymour","guid":"4247729b-5c29-43b2-9eed-3d4947bbb950","individualid":1757721,"phonetype1":"780-604-3144","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.TroyHaymour.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112021","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1183706.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Troy","lastname":"Haymour","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":869,"name":"Hao Jin","guid":"93ce0027-5b73-42d7-be85-e00613a8b28a","individualid":2000703,"phonetype1":"780-485-3010","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602936","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1284073.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Hao","lastname":"Jin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":870,"name":"Arthur Jastrzebski","guid":"630f2246-f86f-4773-a9c7-73f78a2450ba","individualid":1478261,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.HomesByArthur.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551325","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478261.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Arthur","lastname":"Jastrzebski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":871,"name":"Sue King","guid":"10426775-7915-450f-b82d-d6238e438f12","individualid":1957282,"phonetype1":"780-951-1784","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.sue.king.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113269","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1248562.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sue","lastname":"King","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":872,"name":"Peter B. Taylor","guid":"77be4a32-77ad-4b7f-8825-f5e40a203da3","individualid":1486945,"phonetype1":"780-916-7653","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.petersellshomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398803490","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1134180.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Taylor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":873,"name":"Scott J. Macmillan","guid":"fe72b797-637c-4725-ab25-f8ef06a9b70d","individualid":1478614,"phonetype1":"780-970-8489","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.macmillanteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118202","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1098028.gif","position":"Associate","permitfreetextemail":0,"firstname":"Scott","lastname":"Macmillan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":874,"name":"Pep Tavano","guid":"4efa95cb-694c-440c-8062-d98ed6a10151","individualid":1992475,"phonetype1":"780-399-3624","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.peptavano.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602866","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Pep","lastname":"Tavano","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":875,"name":"Tom L. Gariano","guid":"d6f61e65-9b67-4f3b-b495-162fdce27b80","individualid":1477981,"phonetype1":"780-993-5656","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://tomgariano.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601025","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011823.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tom","lastname":"Gariano","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":876,"name":"Craig F. Copeland","guid":"b09f0808-9325-4793-b65e-9b0a83aa85ff","individualid":2016446,"phonetype1":"780-885-7100","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688840","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Copeland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":877,"name":"Sean C. Rampersaud","guid":"41904ac5-97a9-4d64-84a1-b846d2b6e18b","individualid":1918573,"phonetype1":"780-278-4847","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.buyedmontonhome.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113232","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1918573.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sean","lastname":"Rampersaud","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":878,"name":"Nadir Yegani","guid":"2b84af21-4057-4cad-a6ff-4cdadce6c143","individualid":1486363,"phonetype1":"780-902-8183","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/Nadir-Yegani-Realty-Executives-North-Star-362920143767631/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688503","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nadir","lastname":"Yegani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":879,"name":"Craig W. Robb","guid":"3a0d6c80-146c-49ee-a46d-63f0c611a7d2","individualid":1978570,"phonetype1":"780-297-1049","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113795","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Robb","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":880,"name":"Anthony Cheung","guid":"d5125a47-c522-4f98-a60f-6ae41f0c8661","individualid":1477596,"phonetype1":"780-498-1166","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.youtube.com/user/anthonycheungsells","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733432","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477596.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Anthony","lastname":"Cheung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":881,"name":"Dennis G. Philps","guid":"acd1b8f5-1474-4bbe-a424-ca047f426aa5","individualid":1478993,"phonetype1":"780-993-2290","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.edmonton-homesearch.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733442","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478993.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dennis","lastname":"Philps","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":882,"name":"Terrance J. De Villa","guid":"48341f82-4ad1-4d45-8db0-7225ad54b9de","individualid":1988787,"phonetype1":"780-710-6104","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.devillahomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118459","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Terrance","lastname":"De Villa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":883,"name":"Dyianna Devilla","guid":"48f29e05-a8cc-4db8-90b5-d83f589d47d0","individualid":1477760,"phonetype1":"780-710-8738","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.devillahomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110478","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dyianna","lastname":"Devilla","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":884,"name":"Brian Cheston","guid":"df30a9f9-0378-440f-98da-8cef3ec15366","individualid":1477595,"phonetype1":"780-717-3178","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.briancheston@re/max.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120032","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477595.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Cheston","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":885,"name":"Ryan J. Boser","guid":"be931f11-fbd1-49f5-a48d-486ed38bb296","individualid":1858959,"phonetype1":"780-460-2222","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"http://www.sarasotarealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119668","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Boser","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":886,"name":"Greg G. McDannold","guid":"eb2d26a9-2ad6-4ad6-ab9f-e1d57cdc6e6a","individualid":1525901,"phonetype1":"780-908-4786","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.weknowyeg.ca","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/@weknowyeg","websitetype5":"","email1":"396574232","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1525901.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Greg","lastname":"McDannold","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":887,"name":"Jackie T. Burgess","guid":"c3742003-61b4-4ca6-a4ea-506b90a13bb2","individualid":1985923,"phonetype1":"780-952-9937","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113834","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jackie","lastname":"Burgess","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":888,"name":"Brandon M. Lai","guid":"141bb77d-69b8-43ea-b403-efb0ba4dd5ba","individualid":1900121,"phonetype1":"780-405-8495","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398936578","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brandon","lastname":"Lai","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":889,"name":"Kathy M. Massie","guid":"6f2d13be-4321-4533-892a-cf3d061747b9","individualid":1848978,"phonetype1":"780-717-2953","phonetype2":"","phonetype3":"","phonetype4":"780-986-6662","phonetype5":"","websitetype1":"http://www.kathymassie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123275","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1848978.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kathy","lastname":"Massie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":890,"name":"Michelle D. Budnyk","guid":"ef2bc867-fd69-49d3-9629-aa7d5930ffd3","individualid":1924927,"phonetype1":"780-717-8283","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.brianandmichellesell.com","websitetype2":"https://www.facebook.com/Michelle-Budnyk-Associate-Broker-Realty-Executives-Masters-155475787935441/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402485137","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1228822.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michelle","lastname":"Budnyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":891,"name":"Craig E. Finnman","guid":"fc129ccd-a8c1-4502-8cdc-538e1a0afdb3","individualid":1641993,"phonetype1":"780-982-1589","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.CraigSold.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114558","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1165197.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Finnman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":892,"name":"Michael H. Schmidt","guid":"9076ec56-b9c7-4582-97b5-97bc549ed834","individualid":1677043,"phonetype1":"780-289-4866","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400707438","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1677043.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Schmidt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":893,"name":"Kerri K. Hunter","guid":"8e0fdd70-5ce3-4f50-b54e-ead1fa32463a","individualid":1986454,"phonetype1":"780-756-7653","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396755136","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kerri","lastname":"Hunter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":894,"name":"Cathy L. Hawkins","guid":"afe70282-acdb-475c-8e8e-0ce6c3fe73b4","individualid":1478127,"phonetype1":"780-439-9066","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397600984","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cathy","lastname":"Hawkins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":895,"name":"Wayne J. Gordy","guid":"4fe7d177-5256-4493-8ce6-3046ad44141a","individualid":1478031,"phonetype1":"780-439-9066","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110687","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wayne","lastname":"Gordy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:05","updated_at":"2017-08-11 00:12:05"},{"id":896,"name":"Kelly L. Grant","guid":"b00d0f6d-501d-45f8-9a34-7841bedd21ac","individualid":1560185,"phonetype1":"780-414-6100","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.KellyGrant.ca","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/K_GRANT_REALTOR","websitetype5":"","email1":"402512889","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1560185.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Grant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":897,"name":"Karen Heron","guid":"97391f81-bc26-4f50-9907-ddd9bd1793b0","individualid":1478153,"phonetype1":"780-719-9523","phonetype2":"","phonetype3":"","phonetype4":"780-451-0312","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124253","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478153.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karen","lastname":"Heron","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":898,"name":"Rhonda C. Navratil","guid":"0e31b5ed-5167-404c-aabc-8124d5585de1","individualid":1478865,"phonetype1":"780-953-9777","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.trendsinhomes.com","websitetype2":"https://www.facebook.com/rhonda.navratil.5","websitetype3":"https://ca.linkedin.com/in/rhondanavratil","websitetype4":"https://twitter.com/rhondanavratil","websitetype5":"","email1":"396596936","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1032925.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rhonda","lastname":"Navratil","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":899,"name":"TRACY BRANDINGEN","guid":"d21c65ae-9054-49a0-8c3a-a222805fdf3b","individualid":1903519,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-672-4048","phonetype5":"","websitetype1":"http://www.remaxtopsellercamrose.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402403843","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1218747.jpg","position":"Associate","permitfreetextemail":0,"firstname":"TRACY","lastname":"BRANDINGEN","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":900,"name":"Geri Zimmel","guid":"2d29b34f-3557-4e49-887e-1fb1f0f0ab20","individualid":1533248,"phonetype1":"780-995-1866","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.gzimmel.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109212","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Geri","lastname":"Zimmel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":901,"name":"Bill Wong","guid":"7409b131-dd3d-498b-90a2-2bee47936ab1","individualid":1479714,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://billwongrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733354","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011157.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Wong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":902,"name":"Matt J. Walker","guid":"395b4831-3116-43e2-9af5-bc5c6cfb8251","individualid":1733481,"phonetype1":"780-952-6288","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.mattwalker.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759836","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matt","lastname":"Walker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":903,"name":"Sheryol L. Shera","guid":"3697bd23-2eee-402e-97ec-612031b65aee","individualid":1883163,"phonetype1":"780-499-9172","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.sheryolrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398707392","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1883163.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sheryol","lastname":"Shera","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":904,"name":"Lee A. Yule","guid":"8932e6f8-84fd-4c04-88db-5972c0d851b2","individualid":1479759,"phonetype1":"780-497-1138","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.leeyule.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111755","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lee","lastname":"Yule","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":905,"name":"Norm Paul","guid":"0182f77f-9498-4ca2-911b-8c0cf6e21e67","individualid":1478963,"phonetype1":"780-990-8924","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.normpaul.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396993056","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Norm","lastname":"Paul","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":906,"name":"Kimberly M. LeClair","guid":"f75128e8-f8cb-4576-8847-4ccb8c7900f1","individualid":1478502,"phonetype1":"780-995-1218","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.theleclairgroup.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398936550","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kimberly","lastname":"LeClair","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":907,"name":"Brad Richardson","guid":"1cc4287d-4d4d-4d3d-945e-d9687048a701","individualid":1942300,"phonetype1":"780-720-9430","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://bradrichardson.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124552","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1942300.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Richardson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":908,"name":"Chris Grey","guid":"c44a6d99-ac26-4879-adeb-1e126d95d014","individualid":1478057,"phonetype1":"780-970-4002","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.chrisgrey.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112190","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011530.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Grey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":909,"name":"Amy Long","guid":"dc2cd968-8cf9-4fae-975b-d42b35b17384","individualid":1986387,"phonetype1":"780-667-9879","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.amylong.ca","websitetype2":"https://www.facebook.com/amylongrealestate/","websitetype3":"https://ca.linkedin.com/in/amylongrealestate","websitetype4":"","websitetype5":"","email1":"397602799","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amy","lastname":"Long","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":910,"name":"Abe M. Othman","guid":"6438bb0e-8642-427b-ac6f-f0e5023c908f","individualid":1876317,"phonetype1":"780-918-0509","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733633","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Abe","lastname":"Othman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":911,"name":"Mike Halaby","guid":"f7d4c2b5-0681-4c2b-b84b-107c83168c67","individualid":1478094,"phonetype1":"780-919-9170","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.mikehalaby@hotmail.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121939","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011824.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mike","lastname":"Halaby","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":912,"name":"Marilou P. Bihasa","guid":"4fe5964f-330e-477b-9459-4af5d718fffe","individualid":1948248,"phonetype1":"780-938-8878","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113769","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1948248.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marilou","lastname":"Bihasa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":913,"name":"Benjamin R. Loates","guid":"d6179744-2f3f-4dc7-9ad8-6427d699ead3","individualid":1972501,"phonetype1":"780-887-1019","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401269034","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Benjamin","lastname":"Loates","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":914,"name":"Manoj K. Sharma","guid":"c9ceedc6-a90a-4694-a827-d5a1a223a631","individualid":1966459,"phonetype1":"780-293-7211","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602683","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Manoj","lastname":"Sharma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":915,"name":"Laryssa M. Semaka","guid":"9d912a46-164e-4256-bcec-b1f8d5bac0f1","individualid":1987479,"phonetype1":"780-235-1375","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.kennedyrealestate.ca","websitetype2":"https://www.facebook.com/laryssasemakakennedyrealtor/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398307010","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Laryssa","lastname":"Semaka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":916,"name":"Carrie A. Jordan","guid":"9d5bf100-29aa-40f4-b7a5-b13e99421c1f","individualid":1834948,"phonetype1":"780-297-5328","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398785747","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1834948.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carrie","lastname":"Jordan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":917,"name":"Jennifer M. Kennedy","guid":"513fc44a-38a4-4656-ad79-500e1c2f4276","individualid":1570671,"phonetype1":"780-920-0709","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.kennedyrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400947433","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1570671.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Kennedy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":918,"name":"Ning Fu","guid":"eb6254be-5438-4b1b-bc53-4fa2ccbf8b60","individualid":1989940,"phonetype1":"780-233-5772","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115433","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ning","lastname":"Fu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":919,"name":"Robert J. Fyfe","guid":"1f78e836-157c-42b4-ac0c-abf294d9c7d7","individualid":1971749,"phonetype1":"780-700-4075","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.citylinkteam.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396306838","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1971749.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Fyfe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":920,"name":"Shari D. Love","guid":"270349ab-c635-48e8-9c92-7f808dc48a45","individualid":1595017,"phonetype1":"780-619-9649","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edmontonproperties.net","websitetype2":"https://www.facebook.com/Edmonton-Properties-323110071101172/","websitetype3":"https://www.linkedin.com/in/shari-love-3bab1344/","websitetype4":"https://twitter.com/JayAndShariLove","websitetype5":"","email1":"397480285","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1155751.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shari","lastname":"Love","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":921,"name":"Jay K. Love","guid":"58453283-5d25-4756-8d5b-f2693d902726","individualid":1585090,"phonetype1":"780-686-1350","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edmontonproperties.net","websitetype2":"https://www.facebook.com/Edmonton-Properties-323110071101172/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396688203","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1152501.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jay","lastname":"Love","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":922,"name":"Lorri L. Brewer","guid":"5ab65218-dd0c-4975-bd73-5848406933b5","individualid":1477677,"phonetype1":"780-756-7653","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"https://www.infiniterealtyservice.com","websitetype2":"https://www.facebook.com/InfiniteRealtyService/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402747336","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1100953.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Lorri","lastname":"Brewer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":923,"name":"Jimmy Halabi","guid":"f00c29e9-8870-43c4-85e7-b386a60e6d0d","individualid":1935024,"phonetype1":"780-915-8080","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.jimmyhalabi.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114671","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jimmy","lastname":"Halabi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":924,"name":"Bev O'Shea-Thomas","guid":"49633dcf-21b4-4eec-9a46-4937cb3ed5a4","individualid":1478912,"phonetype1":"780-445-8267","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.EdmontonCityHomes.com","websitetype2":"https://www.facebook.com/teamosheathomas/?ref=aymt_homepage_panel","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398609985","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bev","lastname":"O'Shea-Thomas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":925,"name":"Laddi Padda","guid":"fa845673-37a9-47ed-a082-1098caf886d4","individualid":1669884,"phonetype1":"780-667-6767","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120780","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Laddi","lastname":"Padda","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":926,"name":"Adam E. Bree","guid":"8b4d6142-c94b-4a73-b99f-32474e4a846e","individualid":1769577,"phonetype1":"780-289-9447","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.adambree.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124778","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1186016.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Adam","lastname":"Bree","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":927,"name":"Tammie L. Savage","guid":"e56f3482-70b7-44a0-a1ec-4832255c54d7","individualid":1885317,"phonetype1":"780-914-5777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://edmonton-realestatepro.com","websitetype2":"https://www.facebook.com/tammie.savage.13/about?lst=692002065%3A100006204048111%3A1490896808","websitetype3":"https://ca.linkedin.com/in/tammie-savage-03801023","websitetype4":"","websitetype5":"","email1":"398807745","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1885317.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tammie","lastname":"Savage","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":928,"name":"Celeste M. Vieville","guid":"49c91c2c-ac10-4c58-9ccb-ec52853a9bee","individualid":1980141,"phonetype1":"780-994-0453","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782248","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Celeste","lastname":"Vieville","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:06","updated_at":"2017-08-11 00:12:06"},{"id":929,"name":"Dmytro Petrushchak","guid":"ba287feb-ac2c-45d9-898c-bc2d15041f65","individualid":1917909,"phonetype1":"780-995-3801","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402588550","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1225683.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dmytro","lastname":"Petrushchak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":930,"name":"Doug Best","guid":"493d246c-a06b-4a9c-82d3-b1f6131b2a25","individualid":1477384,"phonetype1":"780-431-1900","phonetype2":"","phonetype3":"","phonetype4":"780-431-1600","phonetype5":"","websitetype1":"http://www.simplydbest.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121344","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477384.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"Best","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":931,"name":"Mark B. Kornell","guid":"42b84af9-b356-4feb-bd03-9378b4bf7d33","individualid":1478392,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360732","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Kornell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":932,"name":"Cam Morrison","guid":"6ee87403-a846-4e19-8699-c31bbec1c216","individualid":1478818,"phonetype1":"780-720-2265","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.cammorrison.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118631","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cam","lastname":"Morrison","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":933,"name":"Sean Nykolyshyn","guid":"1b2a1290-d8c1-437d-9bbe-258f3259264a","individualid":1526633,"phonetype1":"780-298-6956","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://snykolyshyn.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113712","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1139233.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sean","lastname":"Nykolyshyn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":934,"name":"Sarju P. Ranjit","guid":"c834e165-3e24-4463-9d37-889e158a8cdc","individualid":2003943,"phonetype1":"780-292-4705","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402260598","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sarju","lastname":"Ranjit","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":935,"name":"Ben Schindel","guid":"248e12ea-1529-4ffe-9a99-118142bdd0ec","individualid":1479221,"phonetype1":"780-951-7525","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.dreamhomes101.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601080","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ben","lastname":"Schindel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":936,"name":"Ying Kit Yu","guid":"302cfb7b-5ebf-452d-826d-996982cf7cfc","individualid":1992477,"phonetype1":"780-966-2203","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602871","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1275821.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ying Kit","lastname":"Yu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":937,"name":"Jennifer A. Elander Bianchini","guid":"1ca6af01-39cd-411c-a937-70f2ec91b55a","individualid":1949884,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.homefinderedmonton.com","websitetype2":"https://www.facebook.com/JenniferElanderBinachiniREALTOR/?ref=settings","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733685","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1244234.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Elander Bianchini","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":938,"name":"Alison Murray","guid":"dfd4e5e6-c0f3-403f-b8c0-a34b10c900b1","individualid":1480374,"phonetype1":"780-619-9812","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.infoedmonton.ca","websitetype2":"https://www.facebook.com/alisonmurrayREALTOR/","websitetype3":"https://www.linkedin.com/feed/?trk=","websitetype4":"https://twitter.com/AlisonDMurray","websitetype5":"","email1":"398759684","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1480374.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alison","lastname":"Murray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":939,"name":"Kenneth T. Ng","guid":"2861ff7b-a42b-4449-a34d-54ef77d5aea4","individualid":2016777,"phonetype1":"780-994-9998","phonetype2":"","phonetype3":"","phonetype4":"780-401-3446","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118839","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kenneth","lastname":"Ng","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":940,"name":"Conor Salisbury","guid":"56bea95e-062a-4146-8c68-555404ae9c1d","individualid":1479186,"phonetype1":"780-721-7892","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.conorsalisbury.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119120","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Conor","lastname":"Salisbury","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":941,"name":"Colin Bland","guid":"c34681fa-e426-4098-b181-e12dff535e16","individualid":1477422,"phonetype1":"780-986-4711","phonetype2":"","phonetype3":"","phonetype4":"780-986-6662","phonetype5":"","websitetype1":"http://www.colinbland.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361052","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477422.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Colin","lastname":"Bland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":942,"name":"Megan Mohr","guid":"226ef647-f4b0-4b94-b8a7-259934731f59","individualid":1671040,"phonetype1":"780-235-6891","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://meganmohr.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401918789","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1671040.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Megan","lastname":"Mohr","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":943,"name":"Trina P. Hodges","guid":"97a66b29-5e79-48ae-94c7-58d635ffca68","individualid":1478177,"phonetype1":"780-984-3322","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.hodgesandmohr.com","websitetype2":"https://www.facebook.com/TrinaHodgesRealty/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401918750","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trina","lastname":"Hodges","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":944,"name":"Brian A. Hunter","guid":"7560ea91-cca4-4a3d-9adc-0357109fb723","individualid":1478227,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124444","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478227.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Hunter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":945,"name":"Charlene A. Speers","guid":"6091aa9c-30a7-4ef0-96c0-354fe083a03f","individualid":1479354,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.charlenespeers.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113658","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1125654.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Charlene","lastname":"Speers","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":946,"name":"Garth A. Brennan","guid":"fc4e3fc9-be08-4915-a986-7066d4f799d0","individualid":1477487,"phonetype1":"780-905-5414","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.garthbrennan.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601279","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010661.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Garth","lastname":"Brennan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":947,"name":"Mikele Carozza","guid":"b5381730-65bc-4b83-b8b9-2b3f111dd7ad","individualid":2020572,"phonetype1":"780-977-4606","phonetype2":"","phonetype3":"","phonetype4":"587-523-8578","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120545","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1300457.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mikele","lastname":"Carozza","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":948,"name":"Nikita L. Gylander","guid":"9eccec20-7abf-4bcc-b9ba-cfa1e1221491","individualid":1922145,"phonetype1":"780-719-1638","phonetype2":"","phonetype3":"","phonetype4":"780-665-6081","phonetype5":"","websitetype1":"http://www.nikitasells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688680","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Nikita","lastname":"Gylander","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":949,"name":"Czabrina C. Wallace","guid":"f935cdc1-6945-4497-be80-da379adf993b","individualid":2008514,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"https://www.linkedin.com/in/czabrina-wallace-11410a44/","websitetype4":"https://twitter.com/CzabrinaWallace","websitetype5":"","email1":"398908921","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1290383.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Czabrina","lastname":"Wallace","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":950,"name":"Karim N. Keshavjee","guid":"fb1d9f01-d198-4315-b7c2-83785412c843","individualid":1478339,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.myedmontonhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117517","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Karim","lastname":"Keshavjee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":951,"name":"Sheldon M. Kennedy","guid":"6e06c308-e4e6-4177-9b6c-223cffc844c6","individualid":1834651,"phonetype1":"780-554-4496","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.kennedyrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400832866","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sheldon","lastname":"Kennedy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":952,"name":"Jessica A. Jefferys","guid":"cbba13b1-4a1c-4c6d-b156-d472b93e628f","individualid":1998341,"phonetype1":"780-499-5749","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.livinginyeg.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733756","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jessica","lastname":"Jefferys","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":953,"name":"Karl Junk","guid":"5c4240ab-8907-4b4e-8c0e-30d7bdd7e6de","individualid":2009749,"phonetype1":"780-240-3541","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116972","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Karl","lastname":"Junk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":954,"name":"Karissa Olson","guid":"e1484476-bef8-4a4c-ad02-32e04f642f20","individualid":1523095,"phonetype1":"780-721-5496","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.kolsonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124731","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1523095.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karissa","lastname":"Olson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":955,"name":"Denis R. Blezy","guid":"34e50a15-139b-4269-9ae3-a77a35efbc9a","individualid":1477427,"phonetype1":"780-221-0883","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.buyedmontonrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688427","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1100966.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Denis","lastname":"Blezy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":956,"name":"Russ C. Jacknisky","guid":"e79ba861-7da0-463f-bc38-794ffac09acd","individualid":1914388,"phonetype1":"780-983-8677","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.russjacknisky.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113561","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1914388.JPG","position":"Associate","permitfreetextemail":0,"firstname":"Russ","lastname":"Jacknisky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":957,"name":"Christina Bieniek","guid":"c7f8e1e7-4a93-4e9e-a266-f885c0d5ef9c","individualid":1477398,"phonetype1":"780-919-0201","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.look4edmontonhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601384","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010736.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christina","lastname":"Bieniek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":958,"name":"Vijay Malhotra","guid":"2ec20ffd-a56d-4cf5-99ff-5b7aa3fdd560","individualid":1478634,"phonetype1":"780-970-3703","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733494","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Vijay","lastname":"Malhotra","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:07","updated_at":"2017-08-11 00:12:07"},{"id":959,"name":"Darshan Singh Gill","guid":"8e67d3a5-9386-4579-8cc1-984589d3dae2","individualid":2009367,"phonetype1":"780-708-3150","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402712292","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1291167.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darshan Singh","lastname":"Gill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":960,"name":"Kristin Gardner","guid":"6e40c08c-3e32-4144-91ba-4a7ed617cf17","individualid":1477978,"phonetype1":"780-995-7556","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.century21allstars.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688345","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kristin","lastname":"Gardner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":961,"name":"Selvaraj S. Naicker","guid":"a0c272be-e3cd-4589-ad2b-9de5459c3b49","individualid":1884952,"phonetype1":"780-994-1232","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.homesandgardensrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109698","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Selvaraj","lastname":"Naicker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":962,"name":"Janice L. Kosak","guid":"3a36ce4b-c7b8-4707-af17-23b8f68b71fe","individualid":1885903,"phonetype1":"780-271-3900","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://janicekosak.com","websitetype2":"https://www.facebook.com/search/top/?q=janice%20kosak%20realtor%20edmonton","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112038","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1208976.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Janice","lastname":"Kosak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":963,"name":"Jonathan Kosak","guid":"d636309b-3f75-4f5c-b750-5173c83d2fca","individualid":2030910,"phonetype1":"780-242-0428","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682040","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jonathan","lastname":"Kosak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":964,"name":"Alexandra Krutzfeldt","guid":"9bd27604-d7eb-47c9-8170-9d3825406f65","individualid":1815780,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109130","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Alexandra","lastname":"Krutzfeldt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":965,"name":"Raynell Penner","guid":"03641bea-ee70-497c-a9d3-2185b4b1c8cc","individualid":1478979,"phonetype1":"780-238-0300","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.raynell.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121675","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Raynell","lastname":"Penner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":966,"name":"Melanie J. Shipka","guid":"fe3a5757-4b0b-4d03-b15e-9d59aee8c6cd","individualid":1479286,"phonetype1":"780-983-5855","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.melshipka.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110140","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011883.gif","position":"Associate","permitfreetextemail":0,"firstname":"Melanie","lastname":"Shipka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":967,"name":"Ken E. Knudsen","guid":"534019c2-4300-4bbb-ab86-e195fb2c215f","individualid":1902653,"phonetype1":"780-245-4232","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.KenSellsRealEstate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114641","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1902653.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ken","lastname":"Knudsen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":968,"name":"Eric S. Beaverford","guid":"df37246d-902a-4157-936c-fb9b4a74f9a0","individualid":1477354,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.houseinaminute.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361140","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eric","lastname":"Beaverford","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":969,"name":"Chao Yang","guid":"085c7e1d-542d-491a-b0b5-ecdd2a42fdbd","individualid":1942664,"phonetype1":"780-716-5377","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401843004","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chao","lastname":"Yang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":970,"name":"Amina Sai","guid":"9f51a1d4-4066-496d-8399-49c0a0b4f467","individualid":1479182,"phonetype1":"780-905-5566","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.aminasai.com","websitetype2":"https://www.facebook.com/AminaSaihomes/","websitetype3":"","websitetype4":"https://twitter.com/AminaSai","websitetype5":"","email1":"398636037","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1109719.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Amina","lastname":"Sai","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":971,"name":"Heather M. Joyes","guid":"e4807316-aa01-4f9c-b3c2-d06fe19b67c3","individualid":1478294,"phonetype1":"780-995-8580","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.heathersellshomes.ca","websitetype2":"https://www.facebook.com/TheJoyesofRealEstate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113677","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478294.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Heather","lastname":"Joyes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":972,"name":"Deepak Chopra","guid":"accb0bb0-7276-4b5d-93f9-60979ba7afa5","individualid":1990725,"phonetype1":"780-710-6435","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.deepakchopra1.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397672731","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Deepak","lastname":"Chopra","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":973,"name":"Beverley A. Hasinoff","guid":"b25bf8b6-5467-48c3-8cfb-e5e5560fdac4","individualid":1599363,"phonetype1":"780-619-0812","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"http://www.livrealestate.ca/about-us/beverley-hasinoff/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115267","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1599363.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Beverley","lastname":"Hasinoff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":974,"name":"Michael R. Speers","guid":"68a1b380-61e3-4540-87ad-f7322c37ba27","individualid":1983381,"phonetype1":"780-232-1687","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.mikespeers.com","websitetype2":"https://www.facebook.com/mikespeersrealtor/","websitetype3":"https://www.linkedin.com/in/mike-speers-50612aa9?trk=nav_responsive_tab_profile","websitetype4":"https://twitter.com/mikespeers","websitetype5":"","email1":"400832927","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1268281.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Speers","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":975,"name":"Tara L. Nessler","guid":"9960e1b5-8f22-4a3b-ab94-81212dd3e17f","individualid":2025845,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397638481","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tara","lastname":"Nessler","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":976,"name":"Ivan Gee","guid":"e8f9b382-5542-4d7d-908e-12dfeb7f1d14","individualid":1585088,"phonetype1":"780-709-7444","phonetype2":"","phonetype3":"","phonetype4":"780-486-2126","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113469","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ivan","lastname":"Gee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":977,"name":"Mel Ferrari Gee","guid":"5310bdd7-583d-455d-a8e0-3cb05a9cd1f2","individualid":1477988,"phonetype1":"780-288-4088","phonetype2":"","phonetype3":"","phonetype4":"780-486-2126","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551330","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mel Ferrari","lastname":"Gee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":978,"name":"Zack D. Lausen","guid":"0ae4c2ad-3266-4e06-a557-eb590ff93748","individualid":2003941,"phonetype1":"780-887-8171","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/ZackLausenRealEstate/","websitetype3":"","websitetype4":"https://twitter.com/RobertsonFirst","websitetype5":"","email1":"396116517","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1286768.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Zack","lastname":"Lausen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":979,"name":"Joshua A. Blais","guid":"cb9df7ad-ac04-40d2-b734-a92ef9f19f95","individualid":2003562,"phonetype1":"780-994-0770","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116474","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joshua","lastname":"Blais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":980,"name":"Thomas G. Harrington","guid":"d66b2705-fb9a-4a28-8059-d51fd760dad9","individualid":1995488,"phonetype1":"780-918-8036","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"http://www.EvolveGroup.ca","websitetype2":"https://www.facebook.com/evolverealestategroup/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124071","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Thomas","lastname":"Harrington","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":981,"name":"Kim M. Banks","guid":"bfe944a2-b4e2-4182-87b8-db587dca339b","individualid":1912322,"phonetype1":"780-668-0990","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.kimbanks.realtor","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123726","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1912322.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kim","lastname":"Banks","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":982,"name":"Olga Gonzalez","guid":"e860798d-38e7-4539-8525-d3e26fc90800","individualid":1669543,"phonetype1":"780-485-7355","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.olgasellshomes.ca","websitetype2":"https://www.facebook.com/OlgaGonzalezNOWrealestate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398781749","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1170001.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Olga","lastname":"Gonzalez","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":983,"name":"Monika Douglas","guid":"85ddef06-26e7-4e49-9a35-d81d0028f0e0","individualid":1477795,"phonetype1":"780-719-0935","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.buyandsellhomeswithmonika.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398403811","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Monika","lastname":"Douglas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":984,"name":"Gerard Y. Hagan","guid":"a3d77653-d77e-4424-8552-713bca19787d","individualid":1527804,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.bestedmontonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124925","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gerard","lastname":"Hagan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":985,"name":"Janelle K. Austin","guid":"723431d0-b098-4fb7-9499-644d09dafbfa","individualid":1558915,"phonetype1":"780-995-4830","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.bestedmontonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121079","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Janelle","lastname":"Austin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":986,"name":"Tracy L. Vipond","guid":"fafd71c9-b32d-4455-bf38-b29859876a0d","individualid":1477454,"phonetype1":"780-700-8193","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.edmontonhomefind.ca","websitetype2":"https://www.facebook.com/Edmontonhomefind/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400458839","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tracy","lastname":"Vipond","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":987,"name":"Scott Storry","guid":"df2575fa-9442-47a2-84e8-efb035d729e1","individualid":1838663,"phonetype1":"780-707-3557","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.scottstorry.com","websitetype2":"https://www.facebook.com/scottstorryrealestatestalbert/","websitetype3":"https://www.linkedin.com/in/scott-storry-157b4213/?trk=hp-identity-name","websitetype4":"https://twitter.com/@ScottStorry","websitetype5":"","email1":"398953381","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1838663.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Scott","lastname":"Storry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":988,"name":"Fang Hui Si","guid":"b85857d1-bd3e-43c1-80dc-92066830651c","individualid":1993907,"phonetype1":"780-729-5966","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115957","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Fang Hui","lastname":"Si","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":989,"name":"John K. Thomas","guid":"f58bf739-9130-4cd7-a84e-618dcce2038d","individualid":1535759,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399968574","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Thomas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":990,"name":"Ken E. Dumas","guid":"031e9551-2d76-4640-81d7-8c1b4d552fec","individualid":1990244,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.kendumasrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688761","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1274456.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ken","lastname":"Dumas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":991,"name":"Ingrid G. Brunsch","guid":"4892fec3-0a79-409f-ada0-08b940f426a4","individualid":1477510,"phonetype1":"780-266-7650","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.edmontonhomesbybrunsch.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601636","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1116810.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ingrid","lastname":"Brunsch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":992,"name":"Reza Khorasani","guid":"483c7494-3083-4953-bbf3-b17ab295999d","individualid":1478344,"phonetype1":"780-938-6072","phonetype2":"","phonetype3":"","phonetype4":"780-437-6072","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109313","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Reza","lastname":"Khorasani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":993,"name":"Roger D. Osness","guid":"4fcf0bff-9add-48f1-ae86-d29296fa0280","individualid":2026496,"phonetype1":"780-667-4746","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"http://www.osnessrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400158259","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Roger","lastname":"Osness","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":994,"name":"Kyla M. Suder","guid":"389c0f96-6194-4f71-818f-36f530b8c809","individualid":1893661,"phonetype1":"780-962-4950","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"http://sudersellshomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812133","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1893661.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kyla","lastname":"Suder","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:08","updated_at":"2017-08-11 00:12:08"},{"id":995,"name":"Scott D. Murray","guid":"5c88eb27-499d-45ad-b463-31f53f015f0f","individualid":1935496,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.scottmurrayrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113584","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1935496.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Scott","lastname":"Murray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":996,"name":"Diana Fendrykowski","guid":"47381213-37ea-4783-9cae-bc2bb5fbaabd","individualid":1597155,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109930","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Diana","lastname":"Fendrykowski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":997,"name":"Jens A. Foxford","guid":"0ea187d9-87ed-4bd9-967b-a1098338d873","individualid":1645285,"phonetype1":"780-885-5367","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.royallepage.ca/en/agent/alberta/st-albert/jens-foxford/43552","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123234","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jens","lastname":"Foxford","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":998,"name":"Dorothy M. Cornel","guid":"6c4e7caa-e895-481d-9e10-f519ee238e29","individualid":2017331,"phonetype1":"780-604-7740","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118866","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dorothy","lastname":"Cornel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":999,"name":"Avinash Dutt","guid":"55d08a74-461c-45a9-abf5-62ecdff20fcf","individualid":1477832,"phonetype1":"780-504-8353","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399716584","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1118426.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Avinash","lastname":"Dutt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1000,"name":"Katherine G. Hollands","guid":"f81c3d9a-88d5-436a-a320-ff01c6ed59c9","individualid":1735368,"phonetype1":"780-387-8234","phonetype2":"","phonetype3":"","phonetype4":"780-352-8028","phonetype5":"","websitetype1":"http://www.kathyhollands.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396755060","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1735368.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Katherine","lastname":"Hollands","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1001,"name":"Hisam Saleh","guid":"5f2de347-6a28-479f-bac9-dffcf417b3e7","individualid":1479185,"phonetype1":"780-619-9066","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.hisamsaleh.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601608","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1117253.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Hisam","lastname":"Saleh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1002,"name":"Nick Fedchyshyn","guid":"f599479f-03d3-4fd2-a47b-fed3700d761b","individualid":1477889,"phonetype1":"780-951-2263","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"http://www.unclenick.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782054","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nick","lastname":"Fedchyshyn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1003,"name":"Patricia S. Coates","guid":"63962957-d21b-41c3-b7eb-ac0499b0d141","individualid":1585209,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.pattycoates.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124323","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Patricia","lastname":"Coates","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1004,"name":"Steve McDonald","guid":"c275759f-b3a4-4074-a497-7ca89a3bb0cb","individualid":1478699,"phonetype1":"780-995-7041","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.stevemcdonald.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114776","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"McDonald","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1005,"name":"Marge L. Brook","guid":"d7b65f6a-8a7e-45eb-a738-5d9e1b28eb10","individualid":1477504,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.century21.ca/marge.brook?","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361130","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marge","lastname":"Brook","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1006,"name":"Denise Rout","guid":"9065a4f9-8540-4c08-a5d8-fe81c2b5f3f1","individualid":1479149,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.deniserout.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360829","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479149.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Denise","lastname":"Rout","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1007,"name":"Samantha J. Zaharia","guid":"19b10e7a-862d-4319-9193-4d177efc68fb","individualid":1951253,"phonetype1":"587-991-5931","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.lachanceteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119887","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1951253.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Samantha","lastname":"Zaharia","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1008,"name":"Peter P. Shu","guid":"16200064-739e-409a-bd9b-d2f0e0dfecf3","individualid":1479288,"phonetype1":"780-498-6289","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112275","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Shu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1009,"name":"Brenda Haig","guid":"73868ea1-c6d5-4adb-8efa-559ec04f4aa7","individualid":1478090,"phonetype1":"780-707-2255","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.brendahaig.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396832844","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brenda","lastname":"Haig","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1010,"name":"J. R. Beattie","guid":"b30c9bea-b783-4be5-918b-a3bc7f0b5939","individualid":1502826,"phonetype1":"780-504-0500","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://jrandcompany.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733475","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1502826.JPG","position":"Associate","permitfreetextemail":0,"firstname":"J. R.","lastname":"Beattie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1011,"name":"Becca A. Duiker","guid":"00a7bf0b-4642-48fb-a672-a5a424f84c31","individualid":2010611,"phonetype1":"780-920-0594","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/BeccaDuikerREALTOR","websitetype3":"https://www.linkedin.com/in/becca-duiker-183a41120?trk=nav_responsive_tab_profile","websitetype4":"https://twitter.com/duiker_realtor","websitetype5":"","email1":"397267511","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Becca","lastname":"Duiker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1012,"name":"Gail A. Gaudry","guid":"b8a386ab-1dd7-4230-bcd9-57595b27f7e0","individualid":1479096,"phonetype1":"780-446-2804","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.sellsfinehomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118616","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gail","lastname":"Gaudry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1013,"name":"David M. Pickering","guid":"fba9efca-7aa7-4856-856a-c780dd0900dd","individualid":2024252,"phonetype1":"780-222-8942","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397202376","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Pickering","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1014,"name":"Ulli Nerenberg","guid":"f6b0cd3d-ebd7-43b5-9bb8-463ceb91346b","individualid":1478868,"phonetype1":"780-483-7170","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"http://www.edmontonfinehomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361042","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478868.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ulli","lastname":"Nerenberg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1015,"name":"Marcy J. Kushnir","guid":"943dd2b5-aefc-473f-b401-293c1c5e1635","individualid":1958566,"phonetype1":"780-719-0305","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118103","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marcy","lastname":"Kushnir","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1016,"name":"Stefanie R. Seidel","guid":"1bd23f7f-a487-4e16-9497-b3660e88bffa","individualid":2003030,"phonetype1":"780-850-7834","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401372094","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stefanie","lastname":"Seidel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1017,"name":"Chris J. Greaves","guid":"66d8026e-cac1-4682-b446-2c9fdc112737","individualid":1595141,"phonetype1":"780-686-2225","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.chrisgreaves.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111983","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Greaves","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1018,"name":"Dawn M. Fargey","guid":"f9916d9f-b91e-4a99-8cb5-c87b88fe117f","individualid":1878495,"phonetype1":"780-907-1807","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.royallepage.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125005","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dawn","lastname":"Fargey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1019,"name":"Elaine C. Monk","guid":"f5b380c8-2fe1-4cec-a11b-3472df7c6367","individualid":1478796,"phonetype1":"780-970-4011","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112485","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478796.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Elaine","lastname":"Monk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1020,"name":"Maureen P. Nicholson","guid":"77204f9e-e0d1-44b4-99df-18643dda7074","individualid":1478883,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.edmontoncentury21.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360873","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478883.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Maureen","lastname":"Nicholson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1021,"name":"Jason Paul","guid":"4b9f6e61-9794-4412-97b6-ea5bb0041d6a","individualid":1755955,"phonetype1":"780-903-3847","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.jasonpaul.com","websitetype2":"https://www.facebook.com/JasonPaulGroup/","websitetype3":"https://www.linkedin.com/in/jasonpaulgroup/","websitetype4":"","websitetype5":"","email1":"398759841","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Paul","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1022,"name":"Sarbjeet K. Dodd","guid":"f2fe6348-5b43-4101-9b4e-4bd9eea569fe","individualid":1665465,"phonetype1":"780-951-1590","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.doddsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602069","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sarbjeet","lastname":"Dodd","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:09","updated_at":"2017-08-11 00:12:09"},{"id":1023,"name":"Barbara J. Royer","guid":"c621d760-1eee-428e-b7dd-03e967b44542","individualid":1749476,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.barbroyer.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109644","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barbara","lastname":"Royer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1024,"name":"Brad Hannah","guid":"97840076-0e04-4de3-b84a-508b6062a355","individualid":1478106,"phonetype1":"780-478-5478","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://bradhannah.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402623516","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011708.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Hannah","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1025,"name":"Billie L. Compton","guid":"3e111fa8-9e35-46eb-8f56-d9d3e14f7254","individualid":1477658,"phonetype1":"780-461-2654","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112309","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Billie","lastname":"Compton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1026,"name":"Lino Zucca","guid":"1e6663bb-2533-423b-8c5a-5abb41d81c73","individualid":1479778,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601057","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lino","lastname":"Zucca","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1027,"name":"James H. Woods","guid":"4dab960b-8e6b-4d2e-856b-828018f74de5","individualid":1479720,"phonetype1":"780-433-9999","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"http://www.1stchoicerealestate.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398636044","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479720.jpg","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"Woods","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1028,"name":"Roy L. Smith","guid":"18ce5af3-60fe-4e0b-a686-e1ac7b0563f7","individualid":1479326,"phonetype1":"780-699-6700","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.roysmithrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118169","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Roy","lastname":"Smith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1029,"name":"Deni Beauvais","guid":"29328803-d9c2-4d28-a205-81bff6b9adfd","individualid":1477353,"phonetype1":"780-497-0373","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.deni.ca","websitetype2":"https://www.facebook.com/Deni-Beauvais-Edmonton-Realtor-Royal-LePage-ArTeam-Realty-128207710564471/","websitetype3":"https://www.linkedin.com/in/deni-beauvais-64411b46/","websitetype4":"https://twitter.com/DeniBeauvais","websitetype5":"","email1":"397848984","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1117301.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Deni","lastname":"Beauvais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1030,"name":"Ramie L. Browatzke","guid":"4d82a9fa-bb0e-46e3-834f-e01bf437b5b4","individualid":1952242,"phonetype1":"780-998-7801","phonetype2":"","phonetype3":"","phonetype4":"780-998-7400","phonetype5":"","websitetype1":"http://www.fortsaskatchewanhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123931","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1952242.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ramie","lastname":"Browatzke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1031,"name":"Shayne P. Sharpe","guid":"95b7d49b-febb-4f5e-ad8c-70c0586e361e","individualid":1479270,"phonetype1":"780-446-6772","phonetype2":"","phonetype3":"","phonetype4":"780-998-7400","phonetype5":"","websitetype1":"http://www.sharpehomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110454","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479270.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shayne","lastname":"Sharpe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1032,"name":"Ronald E. Kleefman","guid":"d395c07f-ab1f-439f-af17-3ac6ea2bb6a1","individualid":1478365,"phonetype1":"780-722-9403","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121887","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ronald","lastname":"Kleefman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1033,"name":"Andy J. Verhagen","guid":"cfd6c969-0e61-4d50-ad3d-9746660453b7","individualid":1479597,"phonetype1":"780-907-8202","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.andyv.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114796","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Andy","lastname":"Verhagen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1034,"name":"Michael Pino","guid":"b835125a-e76c-4bfb-8798-6762bc4ee6af","individualid":1814896,"phonetype1":"780-238-8912","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.michaelpino.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114572","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Pino","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1035,"name":"Gino Daniele","guid":"c151d2c7-85a8-433c-b6c5-800b3e0f9c7b","individualid":1990918,"phonetype1":"780-289-0136","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122309","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gino","lastname":"Daniele","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1036,"name":"Gordon W. King","guid":"a94b1df1-baf8-4f5c-b9c2-bb9feda5620f","individualid":1478355,"phonetype1":"780-484-7369","phonetype2":"","phonetype3":"","phonetype4":"780-483-4943","phonetype5":"","websitetype1":"http://www.gordonwrking-assoc.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124623","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011596.gif","position":"Broker","permitfreetextemail":0,"firstname":"Gordon","lastname":"King","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1037,"name":"Reena A. Yost","guid":"2d1e2e76-0dd8-42e2-9647-d4bcc3f6673e","individualid":1597158,"phonetype1":"780-722-2263","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"http://www.edmontonareahomesales.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402846856","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1597158.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Reena","lastname":"Yost","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1038,"name":"Payman Parseyan","guid":"3d335f6f-bbee-475d-8933-1346d2093e01","individualid":1985719,"phonetype1":"780-235-2535","phonetype2":"","phonetype3":"","phonetype4":"780-486-2126","phonetype5":"","websitetype1":"http://www.parsrealty.ca","websitetype2":"http://www.facebook.com/parsrealestategroup","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688747","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Payman","lastname":"Parseyan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1039,"name":"Mehri Sabourinia","guid":"fcdcd76e-4cfe-450e-b2eb-63394fe356a9","individualid":2013589,"phonetype1":"587-597-7277","phonetype2":"","phonetype3":"","phonetype4":"780-486-2126","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688836","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mehri","lastname":"Sabourinia","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1040,"name":"Anahid Shahmoradi","guid":"d0613a0f-33be-4d49-aca7-7804409f99b9","individualid":1971251,"phonetype1":"587-982-0943","phonetype2":"","phonetype3":"","phonetype4":"780-486-2126","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688729","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anahid","lastname":"Shahmoradi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1041,"name":"Michael T. Andrew","guid":"2123d1dc-ae9f-4fb7-91b4-f6087ea0125f","individualid":1480371,"phonetype1":"780-490-5006","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.encoresells.com","websitetype2":"http://fb.me/MichaelandrewRealtor","websitetype3":"https://ca.linkedin.com/in/michaelandrew1","websitetype4":"","websitetype5":"","email1":"400361232","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Andrew","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1042,"name":"Adam T. Dirksen","guid":"28b9f390-3858-450e-9024-4102df79bba0","individualid":1531143,"phonetype1":"780-222-7200","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.adamdirksen.com","websitetype2":"https://www.facebook.com/AdamDirksenandAssociates/","websitetype3":"","websitetype4":"https://twitter.com/sellingedmonton?lang=en","websitetype5":"","email1":"398807709","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Adam","lastname":"Dirksen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1043,"name":"Kevin H. Rakowski","guid":"cdf4d08e-b50b-4149-bb88-a06524bb8ff9","individualid":1955594,"phonetype1":"780-237-3534","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110078","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Rakowski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1044,"name":"Hillary A. Gifford","guid":"4356bfe3-1863-4111-82ec-b47513c48092","individualid":1985826,"phonetype1":"780-707-4599","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115870","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Hillary","lastname":"Gifford","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1045,"name":"Matthew J. Gaglione","guid":"18936117-ffa4-4d5d-8835-d21425e35896","individualid":1591684,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.gaglionerealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110958","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matthew","lastname":"Gaglione","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1046,"name":"Joe Gaglione","guid":"1cd5faf5-4ff2-4856-b660-aca07c2e69c3","individualid":1477967,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.joegaglione.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360769","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joe","lastname":"Gaglione","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1047,"name":"Carla H. Renneberg","guid":"449ef3c7-5ff4-41de-a788-7381662431ef","individualid":1502042,"phonetype1":"780-819-0025","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.RealtyFinder.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401321373","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1502042.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carla","lastname":"Renneberg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1048,"name":"Justin W. Holubitsky","guid":"0815de22-85d5-4d1a-b37e-8b94ef5545aa","individualid":1876501,"phonetype1":"780-233-6100","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114609","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Holubitsky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1049,"name":"Linda L. Holubitsky","guid":"b2dcebca-8db7-4180-91d1-f1d2c34b42e5","individualid":1478191,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.acreages411.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396667352","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Linda","lastname":"Holubitsky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1050,"name":"Troy Paquette","guid":"1c411aa0-08f9-41c7-8e89-b080acefe33e","individualid":1520254,"phonetype1":"780-903-2124","phonetype2":"","phonetype3":"","phonetype4":"780-488-8868","phonetype5":"","websitetype1":"http://www.rightrealestate","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688514","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1520254.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Troy","lastname":"Paquette","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1051,"name":"Brian G. Schultz","guid":"61a9b01a-553c-4fa6-b097-e83176a206d1","individualid":1479231,"phonetype1":"780-456-5656","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.schultzteam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121954","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479231.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Schultz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1052,"name":"Gwyn Perkins","guid":"51526f48-85ba-4ad0-94c9-5ea331a8f764","individualid":1478981,"phonetype1":"780-914-1437","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.gwynperkins.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111212","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gwyn","lastname":"Perkins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1053,"name":"Aidan Woodfine","guid":"85d9b1f4-37ba-423d-944c-812437eb2257","individualid":1971485,"phonetype1":"780-264-1234","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.yegagents.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398636122","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1971485.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Aidan","lastname":"Woodfine","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1054,"name":"Zakari B. Mimouni","guid":"36eeb83e-dc0f-4c1f-a39b-9dd8fa9638f2","individualid":1921654,"phonetype1":"780-604-4001","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.myedmontonproperty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399716689","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Zakari","lastname":"Mimouni","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1055,"name":"Nicole R. Mackoway","guid":"9d577d85-0d50-4bb3-81b8-a401a55d170f","individualid":2006665,"phonetype1":"780-905-5288","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397883421","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nicole","lastname":"Mackoway","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1056,"name":"Ellen Tam","guid":"70d603a2-713c-41e6-967e-93a74873d085","individualid":1479443,"phonetype1":"780-905-0320","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.438-2500.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601248","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ellen","lastname":"Tam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1057,"name":"Jean C. Szeto","guid":"7a643a1d-3d21-4fc7-9fa0-534b100fdea1","individualid":1479439,"phonetype1":"780-905-0321","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601173","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jean","lastname":"Szeto","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1058,"name":"Merrick J. Duggan","guid":"510f146a-715f-459c-95b5-69cbdbffb567","individualid":1994623,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.rdrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124037","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Merrick","lastname":"Duggan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1059,"name":"Sharron A. Leipert","guid":"1b39ead6-d316-4451-b313-01fc1a32c576","individualid":1478517,"phonetype1":"780-504-4419","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.gibbonshometeam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109055","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478517.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sharron","lastname":"Leipert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1060,"name":"Melissa N. Leipert","guid":"0865edcc-9ff1-4273-bfa4-b5d30abe3b34","individualid":1903751,"phonetype1":"780-297-8566","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.gibbonshometeam.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123716","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1903751.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Melissa","lastname":"Leipert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1061,"name":"Clement F. Li","guid":"f8f5e61c-a6bb-492c-8887-96b311984787","individualid":1478540,"phonetype1":"780-499-6988","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601095","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478540.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Clement","lastname":"Li","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1062,"name":"Namandeep S. Kular","guid":"01fe8617-7566-4fc3-b6b8-8dd6c712479d","individualid":1986678,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"http://www.namkular.com","websitetype2":"https://www.facebook.com/Yegrenews/about/","websitetype3":"https://ca.linkedin.com/in/nam-kular-42a40834","websitetype4":"https://twitter.com/yegrenews","websitetype5":"","email1":"398577614","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1986678.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Namandeep","lastname":"Kular","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1063,"name":"Debbie J. Sabid","guid":"c5073ba5-eefb-4e3f-b9fc-33cb51f782cc","individualid":1479167,"phonetype1":"780-231-4711","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.debbiesellshomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396517028","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Debbie","lastname":"Sabid","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1064,"name":"Michael S. Herrick","guid":"5fc4a729-49d5-4178-83c0-2bebe8014cd4","individualid":1895946,"phonetype1":"780-307-3396","phonetype2":"","phonetype3":"","phonetype4":"780-349-6668","phonetype5":"","websitetype1":"http://mikeherrick.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268925","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1214417.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Herrick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1065,"name":"Parry W. Ross","guid":"70464138-d027-4737-8786-2ed51d067761","individualid":1746024,"phonetype1":"780-863-7766","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.parryross.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121796","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1180428.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Parry","lastname":"Ross","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1066,"name":"Fred Kassam","guid":"1e952ce3-dfa6-4d5c-8224-4477bb0d9807","individualid":1478319,"phonetype1":"780-288-0069","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111807","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Fred","lastname":"Kassam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1067,"name":"Mariann C. McGuire","guid":"606743dc-01d2-4c24-99ab-3670f0627382","individualid":1478705,"phonetype1":"780-886-6310","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.sherwoodparkrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118245","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mariann","lastname":"McGuire","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:10","updated_at":"2017-08-11 00:12:10"},{"id":1068,"name":"Dana N. Taylor","guid":"dfa602ec-04d0-4394-84df-4f43e96d6bde","individualid":2020573,"phonetype1":"780-909-7787","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120549","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dana","lastname":"Taylor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1069,"name":"Dan Gitzel","guid":"07ee45af-cc96-4694-aa0e-3b2c02fee5ed","individualid":1478008,"phonetype1":"780-455-0777","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.dangitzel.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397340863","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Dan","lastname":"Gitzel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1070,"name":"Lakhvir S. Gill","guid":"bd5683a3-bd3d-4f30-b24e-582185d40bd2","individualid":2019729,"phonetype1":"780-938-0180","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.teamthatworks.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400279433","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1299650.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lakhvir","lastname":"Gill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1071,"name":"Nirmal S. Gill","guid":"c3244c73-577b-4461-bcb3-de52afdaad41","individualid":1969074,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114270","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nirmal","lastname":"Gill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1072,"name":"Ying Liu","guid":"395a4682-b523-4dea-a7c5-fcce97a85231","individualid":1898543,"phonetype1":"780-982-0570","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109138","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ying","lastname":"Liu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1073,"name":"Sherri L. Herman","guid":"96604369-8538-45a9-9373-e2188efa76ee","individualid":1761243,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109370","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1184614.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sherri","lastname":"Herman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1074,"name":"Jesse D. Maclean","guid":"8a20e77f-b402-4b06-b09f-68c32572c9fb","individualid":1994505,"phonetype1":"780-782-2889","phonetype2":"","phonetype3":"","phonetype4":"403-520-5240","phonetype5":"","websitetype1":"http://www.century21.ca/jessemaclean","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124025","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jesse","lastname":"Maclean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1075,"name":"Kimberly Gillis","guid":"ca76fb47-750c-4f8f-a7fc-2bc370f81565","individualid":2020644,"phonetype1":"780-222-2007","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396169088","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kimberly","lastname":"Gillis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1076,"name":"Emily M. Loomis","guid":"5e4bad6f-1836-4966-90f6-1e8f1ecb16b1","individualid":1502827,"phonetype1":"780-850-7653","phonetype2":"","phonetype3":"","phonetype4":"780-900-0384","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402712204","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1502827.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Emily","lastname":"Loomis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1077,"name":"Felipe T. Pagtakhan","guid":"4be6cb18-c5e2-4f2a-8899-d1ea7477b3df","individualid":1622289,"phonetype1":"780-934-4765","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601997","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Felipe","lastname":"Pagtakhan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1078,"name":"Tonya K. Brown","guid":"403aae5f-3f60-4579-ab47-11e808c815d1","individualid":1955466,"phonetype1":"780-966-2029","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122686","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1247320.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tonya","lastname":"Brown","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1079,"name":"Mo Assaf","guid":"7cc08b9b-1d3a-4057-a4f4-92111382314a","individualid":1477279,"phonetype1":"780-699-5859","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397600997","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010512.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mo","lastname":"Assaf","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1080,"name":"Amritpal Giani","guid":"65f9b66a-9d25-41a2-8073-af1a04691f38","individualid":1477992,"phonetype1":"780-604-8378","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110442","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amritpal","lastname":"Giani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1081,"name":"John V. Wegner","guid":"d1b5271f-6d15-4d6a-ad4e-8e13a4c2cd5b","individualid":1571051,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.edmontonhouses.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115748","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Wegner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1082,"name":"Pierre Hebert","guid":"6b0eaf83-e966-456b-934c-ec719de77d52","individualid":1478140,"phonetype1":"780-966-1976","phonetype2":"","phonetype3":"","phonetype4":"780-459-0235","phonetype5":"","websitetype1":"http://www.bermontrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601658","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478140.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Pierre","lastname":"Hebert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1083,"name":"Guy C. Hebert","guid":"0c771f4a-a349-4cde-a791-6bd36cc37654","individualid":1478138,"phonetype1":"780-459-7786","phonetype2":"","phonetype3":"","phonetype4":"780-459-0235","phonetype5":"","websitetype1":"http://www.bermontrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398568252","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Guy","lastname":"Hebert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1084,"name":"Justin J. Fraser","guid":"38f2c9e4-67de-4c48-8fca-c632851565a7","individualid":2019988,"phonetype1":"780-932-5718","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119008","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Fraser","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1085,"name":"Bryon T. Rentz","guid":"cc75e108-5c90-4ab0-aaa7-2b2a3db09986","individualid":1479095,"phonetype1":"780-994-3300","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.bryonrentz.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112300","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bryon","lastname":"Rentz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1086,"name":"Kim D. Opalinsky","guid":"a4d9c19b-bc88-40f8-a9cf-5d6eda022523","individualid":1898544,"phonetype1":"780-566-7974","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113552","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1898544.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kim","lastname":"Opalinsky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:11","updated_at":"2017-08-11 00:12:11"},{"id":1087,"name":"Lucia Arnieri","guid":"9aa0eea0-a35c-4916-86c8-68d0e3019b1f","individualid":1477273,"phonetype1":"780-906-5768","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.luciarealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120014","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477273.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lucia","lastname":"Arnieri","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1088,"name":"Tanya R. Wold","guid":"35f3a34c-f518-403a-8ced-b555c0b4108e","individualid":1669399,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.tanyawold.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113148","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1669399.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tanya","lastname":"Wold","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1089,"name":"Jeannine E. Wilson","guid":"a99fda70-d871-4710-b89b-c22d6c2e1279","individualid":1973083,"phonetype1":"780-468-4060","phonetype2":"","phonetype3":"","phonetype4":"780-468-1991","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397480293","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jeannine","lastname":"Wilson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1090,"name":"Jay D. Berg","guid":"1760b34a-4050-4abf-9fde-c6bd618f80df","individualid":1792288,"phonetype1":"780-819-2374","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.JayBerg.com","websitetype2":"https://www.facebook.com/Gettingyouonthemove","websitetype3":"https://www.linkedin.com/in/jayberg","websitetype4":"https://twitter.com/JayBergGroup","websitetype5":"","email1":"398661985","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1189443.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jay","lastname":"Berg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1091,"name":"Moses W. Ling","guid":"52e7e499-c569-480a-aebb-c40a6ca65dc4","individualid":1478550,"phonetype1":"780-975-8888","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601228","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Moses","lastname":"Ling","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1092,"name":"Ken A. Krochmal","guid":"ebb83a2e-48a3-410d-a041-3c6ad29649ff","individualid":1773308,"phonetype1":"780-722-8047","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"http://kensells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112990","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ken","lastname":"Krochmal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1093,"name":"Jacqueline M. Cairo","guid":"3c061772-6984-43b4-b991-b62c6113e984","individualid":1982144,"phonetype1":"780-908-9535","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://jacquelinecairo.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398936596","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jacqueline","lastname":"Cairo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1094,"name":"Ann Dawrant","guid":"94577fe6-3c3c-45b5-8424-115edba7e1a5","individualid":1477737,"phonetype1":"780-940-6485","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.anndawrant.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601061","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ann","lastname":"Dawrant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1095,"name":"Sheryl L. De Leeuw","guid":"35ec25e1-a9fb-481c-96ad-44af67f3ecc3","individualid":1987007,"phonetype1":"780-935-9590","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118122","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sheryl","lastname":"De Leeuw","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1096,"name":"Darrell L. Cook","guid":"039b1196-de2c-4ca4-80a7-9d115d98dc90","individualid":1477660,"phonetype1":"780-915-8800","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.darrellcook.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/darrell-cook-3b52a121","websitetype4":"https://twitter.com/epropertyseller?lang=en","websitetype5":"","email1":"400458809","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477660.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darrell","lastname":"Cook","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1097,"name":"Mark B. Wilbert","guid":"027bf166-acc3-49ac-92b4-d458830afe46","individualid":1792588,"phonetype1":"780-908-8997","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"http://www.markwilbert.ca","websitetype2":"https://www.facebook.com/YEGAgent/","websitetype3":"https://ca.linkedin.com/in/markwilbert1","websitetype4":"https://twitter.com/yegagent","websitetype5":"","email1":"397602222","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1189497.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Wilbert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1098,"name":"Lorraine A. Bodie","guid":"e8e60e95-ea3c-4592-bb3f-ab8574b8563d","individualid":1675322,"phonetype1":"780-405-7933","phonetype2":"","phonetype3":"","phonetype4":"780-488-8868","phonetype5":"","websitetype1":"http://www.condocrew.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396130146","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1675322.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lorraine","lastname":"Bodie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1099,"name":"Ibojka Kostov","guid":"97c78d3d-78b0-445f-9f06-6598f596ec28","individualid":1686101,"phonetype1":"780-915-0525","phonetype2":"","phonetype3":"","phonetype4":"780-488-8868","phonetype5":"","websitetype1":"http://condolady.abmls.mlxchange.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398478891","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1686101.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ibojka","lastname":"Kostov","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1100,"name":"Michael Calverley","guid":"17ebce8c-b278-463a-834a-f77ec060a28a","individualid":1477537,"phonetype1":"780-278-1167","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://mikecal.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398054736","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1129882.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Calverley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1101,"name":"Roxanne Litwyn","guid":"2d92b441-bb11-48bc-bec8-25f3db193d29","individualid":1478556,"phonetype1":"780-907-7589","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.roxannehomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733422","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478556.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Roxanne","lastname":"Litwyn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1102,"name":"Peter J. Muller","guid":"969ca38f-43ec-4540-b87f-8bbaf641f9d6","individualid":1732764,"phonetype1":"780-996-0208","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.makeityourhome.ca","websitetype2":"http://www.facebook.com/peter.muller.77964","websitetype3":"https://www.linkedin.com/in/peter-muller-st-albert-re-max-38173746/","websitetype4":"https://twitter.com/makeityourhome1","websitetype5":"","email1":"398829273","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Muller","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1103,"name":"Bonnie L. Campbell","guid":"958c10ef-13f3-44eb-b09a-e5f4edad1042","individualid":1477541,"phonetype1":"780-962-4950","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"http://www.superproperties.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688432","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1100984.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bonnie","lastname":"Campbell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1104,"name":"Mario Russo","guid":"bf1a1499-7f30-4f48-aaeb-e04601f5da1c","individualid":1871609,"phonetype1":"780-953-8554","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602281","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mario","lastname":"Russo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1105,"name":"John Wieczorek","guid":"dd4f747e-ecd3-4d8d-b89f-0834029998d9","individualid":1479673,"phonetype1":"780-990-9901","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112538","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Wieczorek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1106,"name":"Russell K. Burrell","guid":"129da4e5-347b-4752-94a0-ebcf74ba6dfc","individualid":1477524,"phonetype1":"780-464-7700","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360754","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Russell","lastname":"Burrell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1107,"name":"Morgan L. Lindmark","guid":"bdce4f06-a2e9-48ae-ba39-872d0cdadb57","individualid":1478547,"phonetype1":"780-298-1492","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268636","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Morgan","lastname":"Lindmark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1108,"name":"Chun Yuan","guid":"eb9508af-c017-4f9e-b6c4-337d2510e8bc","individualid":1870122,"phonetype1":"780-707-6909","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143803","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chun","lastname":"Yuan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1109,"name":"Avril L. Bell","guid":"a37157b1-fdd7-4dce-810a-98d968d5223d","individualid":2005336,"phonetype1":"780-504-8961","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116611","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Avril","lastname":"Bell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1110,"name":"Allison R. McDougall","guid":"8c0c7230-d1f4-4fca-8814-61723c7dd991","individualid":1486285,"phonetype1":"780-887-7093","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://allisonsells.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/allison-mcdougall-4a611850","websitetype4":"","websitetype5":"","email1":"400707373","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1486285.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Allison","lastname":"McDougall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:12","updated_at":"2017-08-11 00:12:12"},{"id":1111,"name":"Reuben O. Tucker","guid":"8989d5f4-7a2d-44ff-b1c3-98615276c114","individualid":1535005,"phonetype1":"780-994-1372","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.reubentucker.com","websitetype2":"","websitetype3":"https://www.linkedin.com/in/reuben-tucker-91465825/","websitetype4":"","websitetype5":"","email1":"400876966","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Reuben","lastname":"Tucker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1112,"name":"Joanne M. Griffith","guid":"bd88950f-f636-45db-8fc9-83a1f2fd9be6","individualid":1636514,"phonetype1":"780-722-0608","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.joannesellsedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112327","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joanne","lastname":"Griffith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1113,"name":"Bill Hatton","guid":"3f69132d-81c9-4042-973e-91abe222861b","individualid":1949415,"phonetype1":"780-233-7283","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"http://www.billhatton.ca","websitetype2":"https://www.facebook.com/bill.hatton.9250","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398175960","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1949415.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Hatton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1114,"name":"Ryan J. Verhoeff","guid":"938cb13b-5a8b-4a8f-a7f7-4d4c40e61ff7","individualid":1479599,"phonetype1":"780-722-9862","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.verhoeffrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399716568","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1102627.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Verhoeff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1115,"name":"Oliver P. O'Connor","guid":"c8c81008-22cb-41d1-ae89-db694281c436","individualid":1478904,"phonetype1":"780-903-5805","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.teamoconnorsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688317","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010369.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Oliver","lastname":"O'Connor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1116,"name":"Salene A. O'Connor","guid":"5672893c-bb02-4be8-a215-fb9543f988f7","individualid":2026351,"phonetype1":"587-988-1787","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://teamoconnorsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688882","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Salene","lastname":"O'Connor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1117,"name":"Crystal E. Walline","guid":"8db0d9c8-8122-4845-8c1f-5b798d1372a0","individualid":1479625,"phonetype1":"780-231-9393","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.thewallineteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397316316","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479625.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Crystal","lastname":"Walline","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1118,"name":"Jullieanne H. Matheson","guid":"8125ee64-f26f-4b90-925d-e1ab55c72fad","individualid":1999777,"phonetype1":"780-721-7852","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.century21.ca/leanne.matheson","websitetype2":"http://www.facebook.com/c21platinumedmonton","websitetype3":"https://ca.linkedin.com/in/julesmatheson","websitetype4":"http://www.twitter.com/jullieanne","websitetype5":"","email1":"398610073","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1282085.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jullieanne","lastname":"Matheson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1119,"name":"Max Segal","guid":"00ad06ab-7765-4f6c-8af6-4352e34ac357","individualid":2019991,"phonetype1":"780-293-0066","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119021","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Max","lastname":"Segal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1120,"name":"Laura M. Danilak","guid":"dcd6c1a6-5fa9-42f5-a36a-151e0c958e1e","individualid":1594390,"phonetype1":"780-632-1376","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.lauradanilak.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114473","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Laura","lastname":"Danilak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1121,"name":"Carolyn L. Flexhaug","guid":"03e757b2-f31a-48b1-896a-87ac92b3be54","individualid":1477922,"phonetype1":"780-695-7368","phonetype2":"","phonetype3":"","phonetype4":"888-520-5035","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119698","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carolyn","lastname":"Flexhaug","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1122,"name":"Ron Moskal","guid":"620af0b3-3189-4a9f-bd5d-9a6bae3e2de7","individualid":1478829,"phonetype1":"780-995-2322","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733462","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Moskal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1123,"name":"Darrin M. Mazur","guid":"5f2a5de7-53c6-4ca2-b69d-e8fa3a620b4e","individualid":1478682,"phonetype1":"780-953-3812","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.darrinsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401616780","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478682.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darrin","lastname":"Mazur","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1124,"name":"Tracy Thomas","guid":"6825b444-f2bf-42ea-b100-72d0f29b4365","individualid":2019611,"phonetype1":"780-991-6431","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401616837","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tracy","lastname":"Thomas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1125,"name":"Anna J. DeBolt","guid":"937074d8-4c30-4ee0-bb53-f7ee8cbd3fe8","individualid":1982969,"phonetype1":"780-686-8598","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400753896","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anna","lastname":"DeBolt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1126,"name":"Sam Kalia","guid":"5f518a1e-7a75-41d4-967a-fbb4a82442a5","individualid":1478303,"phonetype1":"780-297-9800","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.samkalia.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838863","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sam","lastname":"Kalia","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1127,"name":"Joanna Wolk","guid":"c0ac3b5b-ed50-4844-a016-fa73d76cfd78","individualid":1479710,"phonetype1":"780-905-6050","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.joannawolk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601313","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011031.gif","position":"Associate","permitfreetextemail":0,"firstname":"Joanna","lastname":"Wolk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1128,"name":"Anh M. La","guid":"4f5903e4-9677-4f70-a25d-9c2ed393b797","individualid":1478444,"phonetype1":"780-905-9189","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601692","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anh","lastname":"La","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1129,"name":"Meaghan J. Maroney","guid":"52c70571-a4e5-42cc-b6bd-d04411b5866c","individualid":1967607,"phonetype1":"780-974-5771","phonetype2":"","phonetype3":"","phonetype4":"780-416-4787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402512982","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Meaghan","lastname":"Maroney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1130,"name":"Jeanine N. Gallinger","guid":"a3a225ae-17d0-4514-9705-44ac95c95b5c","individualid":2002440,"phonetype1":"587-938-5219","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116394","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jeanine","lastname":"Gallinger","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1131,"name":"Chamindra N. Stembo","guid":"5f54a2ab-17e6-4181-a4f1-324f9b4abfe7","individualid":1758891,"phonetype1":"780-497-8490","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120187","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chamindra","lastname":"Stembo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1132,"name":"Patricia J. Liviniuk","guid":"0533f925-67e7-479d-9a38-4809098eab2d","individualid":1478557,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.thesoldsisters.ca","websitetype2":"https://www.facebook.com/Pat-Jen-Liviniuk-134441933235111/","websitetype3":"","websitetype4":"https://twitter.com/soldsistersyeg","websitetype5":"","email1":"396113053","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478557.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Patricia","lastname":"Liviniuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1133,"name":"Jen R. Liviniuk","guid":"fe0bfc11-78b6-4357-a4c3-786f55515af0","individualid":1738828,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.thesoldsisters.ca","websitetype2":"https://www.facebook.com/Pat-Jen-Liviniuk-134441933235111/","websitetype3":"","websitetype4":"https://twitter.com/soldsistersyeg","websitetype5":"","email1":"398803519","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1738828.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jen","lastname":"Liviniuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1134,"name":"Randy S. Plant","guid":"67e4a61a-3a99-45de-8f9f-68b85c48ba53","individualid":1479005,"phonetype1":"780-361-9215","phonetype2":"","phonetype3":"","phonetype4":"780-986-5636","phonetype5":"","websitetype1":"http://www.randyplant.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398430352","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1096059.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Randy","lastname":"Plant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1135,"name":"Deanna L. Jacobson","guid":"46183f11-0e62-439f-a386-661e82dbc257","individualid":1502038,"phonetype1":"780-720-3096","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115234","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1136003.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Deanna","lastname":"Jacobson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:13","updated_at":"2017-08-11 00:12:13"},{"id":1136,"name":"Ben B. Adekunle","guid":"19ac1aea-703a-4cd3-9a0e-b48169019cc7","individualid":2015622,"phonetype1":"780-700-8060","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398307016","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ben","lastname":"Adekunle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1137,"name":"Nicholas J. Golden","guid":"50b20759-608d-4527-aabf-7d84a0f8ac64","individualid":1478016,"phonetype1":"780-498-6437","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.nickgolden.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112677","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nicholas","lastname":"Golden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1138,"name":"Clayton Wong","guid":"e689a4c7-48d0-4567-a82c-375c3041f95e","individualid":1668739,"phonetype1":"780-267-9628","phonetype2":"","phonetype3":"","phonetype4":"780-425-6379","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602074","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Clayton","lastname":"Wong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1139,"name":"Graham Ogden","guid":"ccab16c1-a0f7-4326-8ec5-39ffb34c9e77","individualid":1529165,"phonetype1":"780-908-1224","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.grahamogden.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124278","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1529165.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Graham","lastname":"Ogden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1140,"name":"Corina A. Karas","guid":"1a03bc97-cf9f-4c7a-9532-53e94a01f539","individualid":2007350,"phonetype1":"780-437-2030","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116736","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Corina","lastname":"Karas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1141,"name":"Mark Pelletier","guid":"97abdcba-8108-42ca-a81e-398ee685f41e","individualid":1833853,"phonetype1":"780-504-1865","phonetype2":"","phonetype3":"","phonetype4":"780-458-1515","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113527","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1833853.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Pelletier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1142,"name":"Brad Williamson","guid":"3f0ffd64-1b76-4346-aac4-48a3993a9f12","individualid":1500785,"phonetype1":"780-456-5656","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361021","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1500785.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Williamson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1143,"name":"Alexis M. Hlady","guid":"14ec4d32-1f28-4f0b-81fe-3f2c43e68d13","individualid":1478169,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.AlexisHomes.Info","websitetype2":"https://www.facebook.com/AlexisHomes/","websitetype3":"https://www.linkedin.com/in/alexis-hlady-2a055a10/","websitetype4":"https://twitter.com/AlexisHomes","websitetype5":"","email1":"402587630","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1117676.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alexis","lastname":"Hlady","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1144,"name":"Colleen G. Gillies","guid":"167f2534-524c-41fa-8eba-fd5c2da4491a","individualid":1982970,"phonetype1":"780-297-7355","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/edmontonhomesrealestate/","websitetype3":"https://www.linkedin.com/in/colleen-gillies-036562b9?trk=nav_responsive_tab_profile","websitetype4":"https://twitter.com/GilliesColleen","websitetype5":"","email1":"396896779","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1982970.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Colleen","lastname":"Gillies","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1145,"name":"Justin M. Edgington","guid":"02ee60e7-270a-41a7-bcaf-a958b71f5d36","individualid":1477844,"phonetype1":"780-504-0805","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.justedge.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661918","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477844.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Edgington","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1146,"name":"Flora H. Ding","guid":"843e30d1-e6cb-43aa-8f67-2c044a73cf1a","individualid":1477776,"phonetype1":"780-905-7794","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.florading.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601379","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477776.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Flora","lastname":"Ding","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1147,"name":"Joshua T. Currie","guid":"e0e2cc27-5588-43bd-9b74-8f7412150fb8","individualid":1806496,"phonetype1":"780-266-4452","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.teamcurrie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396732190","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joshua","lastname":"Currie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1148,"name":"Ken W. Currie","guid":"ba7d7c0b-ec98-4345-bb4c-87bb22945ad3","individualid":1477707,"phonetype1":"780-907-9617","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.teamcurrie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112130","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ken","lastname":"Currie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1149,"name":"Todd G. Currie","guid":"ff8e60b7-5718-49f3-a3d2-c24eef6889cc","individualid":1535113,"phonetype1":"780-984-9044","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://www.teamcurrie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122394","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Todd","lastname":"Currie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1150,"name":"Joseph Guziak","guid":"0f901097-c00a-45ac-9574-fc79e3c5aa37","individualid":1875490,"phonetype1":"780-708-2300","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.gotjoe.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122659","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joseph","lastname":"Guziak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1151,"name":"Bonnie N. Mikaluk","guid":"3d173d4d-c669-410f-86b3-7fc69e463f79","individualid":1592689,"phonetype1":"780-278-4424","phonetype2":"","phonetype3":"","phonetype4":"780-968-8537","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397363331","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1154632.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Bonnie","lastname":"Mikaluk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1152,"name":"Erin H. Lange","guid":"4c4f6d48-af3d-4161-ad0f-dd01e2048f7e","individualid":1478466,"phonetype1":"780-203-4686","phonetype2":"","phonetype3":"","phonetype4":"780-437-5256","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110122","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Erin","lastname":"Lange","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1153,"name":"Wendi Freudenreich","guid":"4b6fee09-ee80-4cff-a6eb-faa8c41db457","individualid":1629793,"phonetype1":"780-951-3821","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.edmontonpropertiesforsale.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115282","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1629793.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Wendi","lastname":"Freudenreich","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1154,"name":"Ian S. Kondics","guid":"4944aa20-9b0a-496f-9c02-c2b844c5772b","individualid":1847768,"phonetype1":"780-717-3272","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.ianandchantel.com","websitetype2":"http://www.facebook.com/ianandchantel","websitetype3":"","websitetype4":"http://www.twitter.com/ianandchantel","websitetype5":"","email1":"396119303","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1198560.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ian","lastname":"Kondics","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1155,"name":"Chantel B. Kondics","guid":"2674b907-a4c3-4c75-ab96-c6fcb99e8844","individualid":1876412,"phonetype1":"780-218-3290","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.ianandchantel.com","websitetype2":"http://www.facebook.com/ianandchantel","websitetype3":"","websitetype4":"http://www.twitter.com/ianandchantel","websitetype5":"","email1":"397602289","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1204383.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chantel","lastname":"Kondics","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1156,"name":"Rick D. Jenkins","guid":"2612b293-0867-4df5-8cd9-8d394fdba53b","individualid":1478266,"phonetype1":"780-990-6120","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396688114","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010697.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rick","lastname":"Jenkins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1157,"name":"Kenneth L. Kabat","guid":"85057687-e680-4c88-bd4e-611bdd8b9d42","individualid":1987738,"phonetype1":"780-994-3908","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://kenkabat.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398636140","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1271973.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kenneth","lastname":"Kabat","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1158,"name":"Pam Filipchuk","guid":"4956c937-dafb-41a3-9ddb-44622f10069f","individualid":1528228,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117259","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1528228.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Pam","lastname":"Filipchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1159,"name":"Trevor P. Matheson","guid":"655237f0-8d60-4c67-bf22-37a3da436c2b","individualid":1566635,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://trevormatheson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397177195","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trevor","lastname":"Matheson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1160,"name":"Parm Sidhu","guid":"f70e10d5-b92f-406d-b119-942a99f56fd6","individualid":1672448,"phonetype1":"587-988-8264","phonetype2":"","phonetype3":"","phonetype4":"403-450-8419","phonetype5":"","websitetype1":"http://Parmsidhu.realtor","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688590","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Parm","lastname":"Sidhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1161,"name":"Shirl L. Smith","guid":"b5723b13-b778-49a2-82a5-3e9e93f41376","individualid":1479328,"phonetype1":"780-993-3342","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.shirlsmith.realtor","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/shirl_smith?lang=en","websitetype5":"","email1":"398733488","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479328.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shirl","lastname":"Smith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1162,"name":"John D. Stobbe","guid":"936a342a-c9d0-4963-aa3c-6a417d53d74d","individualid":1572336,"phonetype1":"780-716-3053","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.century21shackleton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398265559","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"John","lastname":"Stobbe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1163,"name":"Christopher D. Greidanus","guid":"4896a905-7cf3-4f90-ab77-cbfbfb5d75b8","individualid":1834650,"phonetype1":"780-710-4563","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.greendoorrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114591","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christopher","lastname":"Greidanus","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1164,"name":"Cindy L. Miller","guid":"9f150edb-73c7-47ae-b1b0-faa5f4eceaed","individualid":1485935,"phonetype1":"780-819-9674","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.professionalgroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109552","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cindy","lastname":"Miller","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1165,"name":"Pan Pan","guid":"5108ec91-c3e3-4231-9882-7e3a8ef93936","individualid":2034799,"phonetype1":"780-200-3565","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401669037","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Pan","lastname":"Pan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:14","updated_at":"2017-08-11 00:12:14"},{"id":1166,"name":"Maya Naaman","guid":"efd6a81f-efcd-425e-a874-014a0fb4fb11","individualid":2015775,"phonetype1":"780-298-6292","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118751","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Maya","lastname":"Naaman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1167,"name":"Gordon A. Young","guid":"3897263f-2c34-491e-85aa-1b7f00eb687f","individualid":1504006,"phonetype1":"780-668-9990","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.gordyoung.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115723","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1504006.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Gordon","lastname":"Young","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1168,"name":"Bo Zhang","guid":"cdd3c57b-f9b6-4b97-b512-ae7adccd0bd1","individualid":1915644,"phonetype1":"780-680-2088","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602432","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bo","lastname":"Zhang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1169,"name":"Shannon L. Ferry","guid":"7c3aab6f-7872-4bd9-ab9a-0de3aec4c443","individualid":1981187,"phonetype1":"780-915-7356","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112429","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shannon","lastname":"Ferry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1170,"name":"Peter Chen","guid":"6612a7d7-6520-48be-bdd6-2028fcc6ddcf","individualid":2033265,"phonetype1":"780-545-8888","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400973340","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1310355.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Chen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1171,"name":"Teresa D. Bashuk","guid":"39edb350-b67a-481f-97e2-417e3b81fb32","individualid":1933279,"phonetype1":"780-935-1613","phonetype2":"","phonetype3":"","phonetype4":"780-447-0157","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121191","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Teresa","lastname":"Bashuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1172,"name":"Patricia A. Fiddler","guid":"08989d49-d1c7-46b6-9e26-158b41d08532","individualid":1477899,"phonetype1":"780-913-6938","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.edmontonhomefinders.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110853","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Patricia","lastname":"Fiddler","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1173,"name":"Jenniffer L. Erick","guid":"210b4afa-d4a9-469e-9132-b71c28daa8df","individualid":1728055,"phonetype1":"780-887-5308","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.HomeSweetHomeEdmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399968591","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1176215.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jenniffer","lastname":"Erick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1174,"name":"Blu Erick","guid":"7cb7517e-c613-4a01-8607-196ea9db0800","individualid":1878494,"phonetype1":"780-819-5309","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.HomeSweetHomeEdmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108916","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1878494.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Blu","lastname":"Erick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1175,"name":"Robert J. Rudyk","guid":"414b63cf-1db2-4c84-b6f2-5adc11111420","individualid":1592204,"phonetype1":"780-318-4977","phonetype2":"","phonetype3":"","phonetype4":"866-865-3663","phonetype5":"","websitetype1":"http://www.frontdoorrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109925","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1154437.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Robert","lastname":"Rudyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1176,"name":"Bao T. Ton","guid":"da8651f0-b1b3-4112-85a4-e31831211543","individualid":1479518,"phonetype1":"780-232-1700","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601349","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bao","lastname":"Ton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1177,"name":"Michael Trache","guid":"c6f9a549-0182-42fd-a506-d2cab2b9b199","individualid":1889903,"phonetype1":"780-952-7238","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.trache.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602343","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1889903.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Trache","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1178,"name":"Marc S. Wener","guid":"dc9e4133-555e-4243-b1e3-1ab6c9b42047","individualid":1535170,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.mwrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361259","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marc","lastname":"Wener","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1179,"name":"Constantin Jr. Zanoaga","guid":"06ad06a6-89ba-46ef-aa38-6e5db3fca50e","individualid":1932278,"phonetype1":"780-709-3778","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"http://www.cjz.ca","websitetype2":"https://www.facebook.com/www.cjz.ca/?view_public_for=122375841294318","websitetype3":"https://ca.linkedin.com/in/cjzjr","websitetype4":"https://twitter.com/JrZanoaga","websitetype5":"","email1":"401268964","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1232717.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Constantin","lastname":"Zanoaga","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1180,"name":"Jerry Dobri","guid":"96fb4a6a-0cd3-4bfa-a21c-74c2bb9e9a4f","individualid":1910087,"phonetype1":"780-238-4593","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"http://www.goodrealestate.co/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397290888","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jerry","lastname":"Dobri","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1181,"name":"Yen Mach","guid":"1451982d-d2e3-44a8-ac5d-513bfa3a4c3d","individualid":1478602,"phonetype1":"780-436-1162","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124633","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Yen","lastname":"Mach","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1182,"name":"Thomas G. Clark","guid":"3611445c-5abc-4381-b240-b991f793e8d8","individualid":1727368,"phonetype1":"780-690-1361","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.trustedrealtygroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117358","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Thomas","lastname":"Clark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1183,"name":"Dale B. Throndson","guid":"62b18c0f-0fce-4b53-962b-1053546d3f8d","individualid":1479503,"phonetype1":"780-909-3253","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.calldale4asale.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114825","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479503.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dale","lastname":"Throndson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:15","updated_at":"2017-08-11 00:12:15"},{"id":1184,"name":"Coleen Y. Jarvis","guid":"831c294e-1d08-4975-8090-48ce90c7d481","individualid":1478260,"phonetype1":"780-349-5790","phonetype2":"","phonetype3":"","phonetype4":"780-349-5753","phonetype5":"","websitetype1":"http://www.jarvisrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361057","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478260.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Coleen","lastname":"Jarvis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1185,"name":"Kathleen Wong","guid":"cbe4b0ac-e141-4f99-94af-c2bf2366fb58","individualid":1504491,"phonetype1":"780-449-2800","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115558","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kathleen","lastname":"Wong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1186,"name":"Mare E. Bryant","guid":"6ef46b36-85eb-4fab-a0af-85d6380dd2ec","individualid":1981186,"phonetype1":"780-668-2621","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.marebryant.ca","websitetype2":"https://www.facebook.com/Mare-Bryant-Real-Estate-ReMax-Elite-626192890823824/","websitetype3":"https://www.linkedin.com/marebryant","websitetype4":"https://twitter.com/MareSellsHomes","websitetype5":"","email1":"396832833","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1266757.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mare","lastname":"Bryant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1187,"name":"Lisa Leung","guid":"09543e7c-7725-463a-8432-36a707c77eff","individualid":1644119,"phonetype1":"780-970-1788","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602040","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1644119.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lisa","lastname":"Leung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1188,"name":"Kerrie R. Smart","guid":"4a93802c-d19b-4759-b1e3-c8fb780d5114","individualid":2003031,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.kerriesmart.com","websitetype2":"http://kerrie.smartyeg","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116435","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1285969.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kerrie","lastname":"Smart","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1189,"name":"Matthew G. Harrison","guid":"0cc77f4a-fe6a-4b84-bbb9-5f6ddfa28e70","individualid":1923813,"phonetype1":"780-952-9551","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396805759","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matthew","lastname":"Harrison","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1190,"name":"Vincent Hiew","guid":"81cad7b9-d584-4f1c-bfe5-c5a8670661b9","individualid":1597156,"phonetype1":"780-278-1668","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.vincenthiew.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397848975","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Vincent","lastname":"Hiew","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1191,"name":"Rachel L. Igarta","guid":"bb4e472b-2c41-44c9-9e6a-f9d2c9b6b4b7","individualid":1647343,"phonetype1":"780-297-8900","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.century21.ca/racheligarta","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241774","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1647343.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rachel","lastname":"Igarta","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1192,"name":"Suzanne Cook","guid":"e5e73975-4d52-4181-9b63-63ccfbf6a66a","individualid":2025335,"phonetype1":"780-880-5698","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.polarissells.com/agents/Sue-Cook","websitetype2":"https://www.facebook.com/floozysuezy","websitetype3":"https://www.linkedin.com/in/sue-cook-1117913b/","websitetype4":"","websitetype5":"","email1":"402598382","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1305035.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Suzanne","lastname":"Cook","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1193,"name":"Keri L. McTaggart","guid":"73df8836-cf32-4385-b864-28a3bdcbfefd","individualid":1478737,"phonetype1":"780-239-7275","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.kerimctaggart.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118272","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Keri","lastname":"McTaggart","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1194,"name":"Sajida Pellegrini","guid":"299dfa0c-46ef-4077-a4be-34ea3b0784fe","individualid":2024492,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402069031","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1304240.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sajida","lastname":"Pellegrini","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1195,"name":"Sarah A. Duckett","guid":"f70c5bdf-c56e-4396-86e5-0766a015b5de","individualid":2025757,"phonetype1":"780-437-2030","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397456383","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sarah","lastname":"Duckett","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1196,"name":"Colin M. Clowater","guid":"05eb3b6d-b10e-404b-8a01-0235419c778c","individualid":1934561,"phonetype1":"780-218-2657","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.teamoosterveld.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400279427","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1234139.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Colin","lastname":"Clowater","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1197,"name":"Cheryl O. Rolfe","guid":"7268f84f-4496-496e-91a7-5b9d86c84d29","individualid":1479137,"phonetype1":"780-983-4628","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.cherylrolfe.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601402","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011875.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"Rolfe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1198,"name":"Susan Jaksich","guid":"48310684-4bf7-4302-b5d9-c4cb32149f44","individualid":1478251,"phonetype1":"780-406-6969","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.movehappy.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601438","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478251.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Susan","lastname":"Jaksich","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1199,"name":"Al Dredge","guid":"5b4cc31d-2910-4f1a-b08f-09591a7d0dce","individualid":1477807,"phonetype1":"780-266-2006","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.Edmonton-Home.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120273","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Al","lastname":"Dredge","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1200,"name":"Theryn E. Mills","guid":"c435d5af-8988-4592-9e31-12adadd49568","individualid":1983997,"phonetype1":"780-680-4814","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.yeghomes.forsale/","websitetype2":"https://business.facebook.com/TherynMillsRealEstate","websitetype3":"https://www.linkedin.com/in/theryn-bear-mills-91324025","websitetype4":"https://twitter.com/YEGhomes4sale","websitetype5":"","email1":"396114712","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1268798.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Theryn","lastname":"Mills","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1201,"name":"Diane E. Cameron","guid":"56d09c55-7d5f-4433-bc41-b5df27d8348f","individualid":1572611,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.TheHomeArrangers.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122403","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1572611.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Diane","lastname":"Cameron","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1202,"name":"Dean W. Drysdale","guid":"7c88d3d1-e9f2-4f40-b7b7-236141eaf411","individualid":1729963,"phonetype1":"780-953-4585","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111881","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dean","lastname":"Drysdale","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1203,"name":"Roopesh K. Dewan","guid":"4460db9b-85c3-4ee6-8ab7-9919455024db","individualid":1477765,"phonetype1":"780-242-1111","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"http://www.roopeshdewan.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402795178","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Roopesh","lastname":"Dewan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1204,"name":"Casey Tanner","guid":"2eea4e79-4b0e-4c89-a72d-67c115df20b2","individualid":1479446,"phonetype1":"780-445-8149","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119111","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010296.gif","position":"Associate","permitfreetextemail":0,"firstname":"Casey","lastname":"Tanner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1205,"name":"Tammy E. Graham","guid":"8c71191d-c478-48c7-94ff-a83b1e5f8d1d","individualid":1951059,"phonetype1":"780-203-0502","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110074","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tammy","lastname":"Graham","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:16","updated_at":"2017-08-11 00:12:16"},{"id":1206,"name":"Eireann Rochefort","guid":"462941d8-3c57-4209-8617-1ea863a65e7c","individualid":2027231,"phonetype1":"780-974-3098","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.UABRE.ca","websitetype2":"https://www.facebook.com/pg/UABRE/about/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688893","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eireann","lastname":"Rochefort","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1207,"name":"Kiran Gill","guid":"74bbc8cc-c516-45a0-ac95-090412d84b3d","individualid":2034800,"phonetype1":"780-405-9090","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401669041","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kiran","lastname":"Gill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1208,"name":"Lee C. Young","guid":"0a563c62-20e2-4c0d-8baf-27f37ae81f89","individualid":1479756,"phonetype1":"780-965-2103","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.leeyoungsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109227","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lee","lastname":"Young","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1209,"name":"Mira Wannous","guid":"b10a9c0f-1740-4931-aaf6-89ee89ded29e","individualid":1567324,"phonetype1":"780-264-6472","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.mirahomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601883","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1567324.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mira","lastname":"Wannous","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1210,"name":"Cindy M. Audy","guid":"0590f028-f5ff-4f34-8efc-0b74b70f04a2","individualid":1477286,"phonetype1":"780-699-7351","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110471","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cindy","lastname":"Audy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1211,"name":"Josh T. MacKinnon","guid":"87bf92c6-9920-4231-89a0-e7ee6d087457","individualid":1840082,"phonetype1":"780-318-8000","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.mackinnonhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396732255","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Josh","lastname":"MacKinnon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1212,"name":"Kim D. Stubbs","guid":"a0399e33-0e7e-42ba-a582-190a9725d786","individualid":1594597,"phonetype1":"780-974-3357","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.kimstubbs.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113478","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kim","lastname":"Stubbs","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1213,"name":"Leslee A. Byer","guid":"2eb61f84-8a49-4198-82f6-a1de61005903","individualid":1570489,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.century21dreamteam.ca","websitetype2":"https://www.facebook.com/C21dreamteam","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112572","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1570489.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Leslee","lastname":"Byer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1214,"name":"Kristi C. Robertson","guid":"201b4407-39d2-437e-b683-4a09e62be31d","individualid":1560360,"phonetype1":"780-975-7090","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.century21dreamteam.ca","websitetype2":"https://www.facebook.com/C21dreamteam/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396688099","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1147145.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kristi","lastname":"Robertson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1215,"name":"Pardeep Brar","guid":"8327f00e-3370-47c7-af3e-40c7e852dfdc","individualid":2031644,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401635076","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Pardeep","lastname":"Brar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1216,"name":"Chona R. Dela Cruz","guid":"ea71581b-f2dc-4ed5-aaad-13517fe85c16","individualid":1597154,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.chonasells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601940","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1597154.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chona","lastname":"Dela Cruz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1217,"name":"Jennifer L. O'Connor","guid":"725733a6-2644-47ab-a2ba-8804d9ada4f2","individualid":1630965,"phonetype1":"780-485-7022","phonetype2":"","phonetype3":"","phonetype4":"780-469-6110","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/Schaaf.Realty/?ref=bookmarks","websitetype3":"https://www.linkedin.com/in/jennifer-gloeckler-o-connor-4aaa083a/","websitetype4":"","websitetype5":"","email1":"399688508","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"O'Connor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1218,"name":"Richard K. Li","guid":"d70d7fc2-e841-421f-a921-0ee022f8ef37","individualid":1478542,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109012","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Li","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1219,"name":"Charlene A. King","guid":"740b8f2a-c929-4208-9e9d-86a9eecf5053","individualid":1478353,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.ckingrealty.com","websitetype2":"https://www.facebook.com/charsellshomes/?ref=aymt_homepage_panel","websitetype3":"https://www.linkedin.com/nhome/?trk=","websitetype4":"","websitetype5":"","email1":"398636055","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1119374.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Charlene","lastname":"King","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1220,"name":"Marcie L. Bull","guid":"6b488062-85b5-4775-843f-951ceb218a3c","individualid":2005197,"phonetype1":"780-994-9998","phonetype2":"","phonetype3":"","phonetype4":"780-401-3446","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/MarcieBullREALTOR/?ref=bookmarks","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396193799","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1287574.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marcie","lastname":"Bull","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1221,"name":"Francis L. Matias","guid":"1f4dbd32-f90f-4a2c-ac2f-7ddd7b5e3a36","individualid":1877523,"phonetype1":"780-965-3726","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122237","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Francis","lastname":"Matias","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1222,"name":"Gene Ollenberger","guid":"cf5c01e8-2683-485b-9db4-a390e9603d77","individualid":1478920,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360825","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gene","lastname":"Ollenberger","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1223,"name":"Deanne M. Jennings","guid":"21d1d006-da38-4f9d-87e4-579ebceabea8","individualid":2004067,"phonetype1":"780-668-8229","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.deannejennings.ca","websitetype2":"https://www.facebook.com/deannejenningsrealestate","websitetype3":"http://www.linkedin.com/in/deanne-jennings-0970b5115","websitetype4":"http://www.twitter.com/@deanne_jennings","websitetype5":"","email1":"400332358","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1287089.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Deanne","lastname":"Jennings","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:17","updated_at":"2017-08-11 00:12:17"},{"id":1224,"name":"Ali Saqlain","guid":"190c2c9e-5aa3-4051-a592-53c5eb6f26d4","individualid":2024403,"phonetype1":"780-709-8765","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396832813","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ali","lastname":"Saqlain","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1225,"name":"Guy Pelletier","guid":"0094d3d3-8a36-413c-bca6-e9b1a29455da","individualid":1478976,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-458-1515","phonetype5":"","websitetype1":"http://c21rewardrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398781712","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478976.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Guy","lastname":"Pelletier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1226,"name":"Jeremy Herrington","guid":"168a2f79-3c45-482b-8ec0-60f190154e66","individualid":1478154,"phonetype1":"780-716-4030","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.herringtonhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121759","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1124384.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeremy","lastname":"Herrington","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1227,"name":"Jay L. Cooper","guid":"b4cd01e2-51f4-4453-a86a-9c292a74b090","individualid":1477666,"phonetype1":"780-818-7777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://jaycooper.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759587","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010311.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jay","lastname":"Cooper","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1228,"name":"Mona C. LaHaie","guid":"056fd1f7-09a4-4540-9e35-d325bcf61e99","individualid":1478455,"phonetype1":"780-850-0800","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.horsepowerranch.com","websitetype2":"https://www.facebook.com/THEMONALAHAIEGROUP/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661860","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478455.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mona","lastname":"LaHaie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1229,"name":"Kristie A. Basaraba","guid":"b04a1289-a442-46aa-8fca-007d2b23ef18","individualid":1989116,"phonetype1":"780-919-1296","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/KristieBasaraba/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829317","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kristie","lastname":"Basaraba","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1230,"name":"Ian C. West","guid":"9af6a8a4-23ca-4c3f-a0fc-2d10a968ba93","individualid":1889434,"phonetype1":"780-905-9378","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://ianwest.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113023","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ian","lastname":"West","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1231,"name":"Shauna J. Florence","guid":"c890cfda-67ef-4552-81d4-6c0fc73e0fb5","individualid":1969394,"phonetype1":"780-991-1003","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.homegirls.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121227","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1969394.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shauna","lastname":"Florence","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1232,"name":"Larry W. Willes","guid":"9cff538a-f5f6-4590-823a-932c86f2535a","individualid":1479684,"phonetype1":"780-237-4860","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121671","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Larry","lastname":"Willes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1233,"name":"Karen C. Moe","guid":"6befd465-9986-4537-a029-c959fad32e85","individualid":1927099,"phonetype1":"780-232-8660","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.karenmoe.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115359","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1927099.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karen","lastname":"Moe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1234,"name":"Natalie D. Murray","guid":"3253fa89-9664-495f-a5e2-cbae7b802a01","individualid":1478845,"phonetype1":"780-886-1752","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.nats-got-it.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110187","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478845.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Natalie","lastname":"Murray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1235,"name":"Danesse L. Stykalo","guid":"53e52160-35d2-4755-9472-8e742fee83ed","individualid":1479418,"phonetype1":"780-995-4619","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.Danesse.com","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/DanesseStykalo","websitetype5":"","email1":"400132559","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479418.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Danesse","lastname":"Stykalo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1236,"name":"Caroline Holinski","guid":"c85ed047-3ca0-4bae-9f32-b363b8a27c5f","individualid":1478183,"phonetype1":"780-242-8089","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://askcaroline.realtor","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402598363","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478183.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Caroline","lastname":"Holinski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1237,"name":"Dana M. Bradley","guid":"743c4047-ed3a-4a8f-8bf1-6518683f0727","individualid":1477471,"phonetype1":"780-264-1812","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.toddanddana.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112524","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dana","lastname":"Bradley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1238,"name":"Vasile Marcu","guid":"1aa519c1-323c-4118-8ddd-70eafcdfe66f","individualid":1478645,"phonetype1":"780-482-5501","phonetype2":"","phonetype3":"","phonetype4":"780-482-3187","phonetype5":"","websitetype1":"http://www.globalrealtyinc.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360793","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Vasile","lastname":"Marcu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1239,"name":"Brad W. Agnew","guid":"3bbb0bd2-e442-4f32-abd7-422baf546dd0","individualid":1600768,"phonetype1":"780-983-8495","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121694","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Agnew","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1240,"name":"Michel A. Lafleur","guid":"8cc3a5e2-0373-4c57-b04c-cc7f104e6ba7","individualid":2015366,"phonetype1":"780-902-6372","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118714","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1296669.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michel","lastname":"Lafleur","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1241,"name":"Randy Mayoh","guid":"beb7e006-b54d-4388-bbf6-203c05b6a642","individualid":1478680,"phonetype1":"780-717-7175","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115969","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Randy","lastname":"Mayoh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1242,"name":"Dawn K. Washington","guid":"9f8ca0d6-c698-4a2c-98ca-cc014cfd847f","individualid":1987183,"phonetype1":"780-297-2041","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121266","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dawn","lastname":"Washington","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1243,"name":"Don G. Cholak","guid":"1e8e7e3e-e687-4d19-8a94-47d2d6bfc3b2","individualid":1477610,"phonetype1":"780-718-8400","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.doncholak.com","websitetype2":"https://www.facebook.com/DonCholakRealtor","websitetype3":"http://ca.linkedin.com/pub/don-cholak/24/ab1/91a","websitetype4":"https://twitter.com/DCholakRealtor","websitetype5":"","email1":"398551298","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477610.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Don","lastname":"Cholak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1244,"name":"Deep Sidhu","guid":"7eda73e6-e6d7-42d2-9733-6b054d17e1b4","individualid":1667685,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115776","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Deep","lastname":"Sidhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1245,"name":"Ron E. Berlando","guid":"64f4a58d-f23f-4f25-877f-b7f2b45c92cb","individualid":1477378,"phonetype1":"780-700-9362","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111262","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477378.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Berlando","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1246,"name":"Sandra A. Mooney","guid":"fa510d45-7a2c-4878-ba5d-1e64052c3b49","individualid":1478802,"phonetype1":"780-231-6051","phonetype2":"","phonetype3":"","phonetype4":"780-453-1213","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122758","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sandra","lastname":"Mooney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1247,"name":"Gregory D. Litwin","guid":"d1bd8a76-a03b-4825-be26-9d28bb9f7e89","individualid":1527389,"phonetype1":"780-918-9300","phonetype2":"","phonetype3":"","phonetype4":"780-662-0378","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111953","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gregory","lastname":"Litwin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1248,"name":"Susan G. Speed","guid":"0f28a06d-9965-419f-bad6-2476a4976f81","individualid":1479353,"phonetype1":"780-913-5099","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.SueSpeed.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111535","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1128364.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Susan","lastname":"Speed","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:18","updated_at":"2017-08-11 00:12:18"},{"id":1249,"name":"Sharon J. Campbell","guid":"6689487d-6738-456b-9261-69a41bc501d4","individualid":1477546,"phonetype1":"780-445-4525","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.ourfamilyhelpingyours.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397883314","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011733.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sharon","lastname":"Campbell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1250,"name":"Rob Campbell","guid":"ed22c474-85cc-41e2-96aa-33d52557a61a","individualid":1477544,"phonetype1":"780-908-2543","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113360","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rob","lastname":"Campbell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1251,"name":"Michael T. Kinsella","guid":"fb143f1a-2d3f-4335-bbf6-e55f7d0b895e","individualid":1830165,"phonetype1":"780-220-1234","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.KinsellaSells.com","websitetype2":"https://www.facebook.com/mikekinsellarealtor/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397456328","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1830165.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Kinsella","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1252,"name":"Linda M. Lyons-Boucher","guid":"46b8255a-1316-4d7d-a33a-9c1becc7f8ec","individualid":1478587,"phonetype1":"780-929-8600","phonetype2":"","phonetype3":"","phonetype4":"780-929-9272","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110666","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011404.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Linda","lastname":"Lyons-Boucher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1253,"name":"Qiong Wu","guid":"919dc82d-55b1-409a-93d5-d30d3aeb0f2b","individualid":2034863,"phonetype1":"780-885-5936","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400807295","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Qiong","lastname":"Wu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1254,"name":"Jonathan R. Yu","guid":"deec8478-e249-43e7-8e51-db0d1bff763b","individualid":1900098,"phonetype1":"780-862-6288","phonetype2":"","phonetype3":"","phonetype4":"780-425-3765","phonetype5":"","websitetype1":"http://www.liveinitia.ca/company/our-realtors/jonathan-yu-1/","websitetype2":"https://www.facebook.com/LiveInitia","websitetype3":"https://ca.linkedin.com/in/jonathan-r-yu-87326391","websitetype4":"https://twitter.com/yegjon","websitetype5":"","email1":"398733652","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1216913.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Jonathan","lastname":"Yu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1255,"name":"Louise M. James","guid":"f2a1a28f-0996-47d1-b9a7-ebd7d58da8bc","individualid":2002355,"phonetype1":"780-708-4040","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116390","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Louise","lastname":"James","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1256,"name":"Andrea J. Engel","guid":"3b5af225-0e57-4726-8748-afd8bf426c9f","individualid":1886012,"phonetype1":"780-996-3562","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.sherwoodparkhouses.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112366","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1886012.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Andrea","lastname":"Engel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1257,"name":"Mark R. Fischer","guid":"1dc6825a-bdc9-43d4-a340-54003a37c344","individualid":2003689,"phonetype1":"780-717-3946","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116487","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Fischer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1258,"name":"Sharon Y. Gregresh","guid":"2fb0f37c-689a-4b5e-86a1-32f8c025f3ac","individualid":1478055,"phonetype1":"780-238-5537","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.PropertyFusion.ca","websitetype2":"https://www.facebook.com/edmontonproperties/","websitetype3":"https://www.linkedin.com/in/sharon-gregresh-9971b310/","websitetype4":"https://twitter.com/sgregresh","websitetype5":"","email1":"398661883","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sharon","lastname":"Gregresh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1259,"name":"Cynthia J. Harris","guid":"42fafe91-c92d-4293-98ca-52c52e18c110","individualid":2025760,"phonetype1":"780-439-3300","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397456387","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cynthia","lastname":"Harris","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1260,"name":"Lyndon A. Sommert","guid":"4802611e-3c7e-467c-b623-7c6ae6ecbdd0","individualid":1479339,"phonetype1":"780-439-3300","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.aret.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111816","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479339.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lyndon","lastname":"Sommert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1261,"name":"Darren T. Stang","guid":"513f875c-cdb4-47e5-af5a-0348f012f2f3","individualid":1977374,"phonetype1":"780-203-9999","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://www.stangrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398430406","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1977374.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darren","lastname":"Stang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1262,"name":"Mike G. Sommerfield","guid":"851b1952-84d0-40d4-aa1f-02adff1976ff","individualid":1479337,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.mikesommerfield.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688414","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010790.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mike","lastname":"Sommerfield","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1263,"name":"Naomi R. Saulnier","guid":"7ddf9c28-01c9-451e-8405-e6d6b721d9a3","individualid":1479207,"phonetype1":"780-267-1350","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.webagent.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398568270","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1130791.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Naomi","lastname":"Saulnier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1264,"name":"Alain A. Saulnier","guid":"d805a358-3964-4ec8-a89e-4fc4dc7b797e","individualid":1992072,"phonetype1":"780-902-5512","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.webagent.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398568292","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1275665.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alain","lastname":"Saulnier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1265,"name":"Vince Ferrante","guid":"d8dd0f1a-0c5d-4ee8-9547-d655d1ec940f","individualid":1601186,"phonetype1":"780-668-8980","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812105","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Vince","lastname":"Ferrante","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1266,"name":"Henry G. Zurch","guid":"4071b0c7-2dc5-4a42-93cd-ae9a9af586e8","individualid":1479783,"phonetype1":"780-238-8600","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397480340","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479783.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Henry","lastname":"Zurch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1267,"name":"Rishi Ghai","guid":"93faed1a-05c4-481d-8d08-08695293cd52","individualid":1999896,"phonetype1":"587-341-9051","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116267","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rishi","lastname":"Ghai","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1268,"name":"Jason Sather","guid":"6d38fd5d-4d25-4a5b-a718-9ab62575662a","individualid":1479204,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-430-5379","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122917","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479204.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Sather","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1269,"name":"Sandi Sather","guid":"58e0e617-3dd7-406b-9325-3e7513e27b91","individualid":1479206,"phonetype1":"780-909-0955","phonetype2":"","phonetype3":"","phonetype4":"780-430-5379","phonetype5":"","websitetype1":"http://www.sandisather.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122929","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479206.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandi","lastname":"Sather","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1270,"name":"Brent W. Melville","guid":"4342b267-c443-46a4-992e-6b7d02fb0dfb","individualid":1478752,"phonetype1":"780-699-2903","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://www.remax-morinville.ab.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114747","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478752.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Brent","lastname":"Melville","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1271,"name":"Ashley L. Ermantrout","guid":"7d406916-7c3b-4e3c-89eb-c4a8ca4f1185","individualid":1531145,"phonetype1":"780-221-0620","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108847","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ashley","lastname":"Ermantrout","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1272,"name":"Janine E. Hurtubise","guid":"34cf70fc-86d2-453d-a6dc-f7d4e30f6ce3","individualid":1949345,"phonetype1":"780-983-6670","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://janineh.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117438","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1949345.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Janine","lastname":"Hurtubise","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1273,"name":"Michelle C. Zenon","guid":"d69b3849-14c8-4725-86fc-d406e6aa4789","individualid":1560052,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.zenonhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111280","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1560052.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michelle","lastname":"Zenon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1274,"name":"David Chau","guid":"1d0ea45f-1057-4d02-a076-ac3c0ba1a86b","individualid":1999775,"phonetype1":"780-603-9138","phonetype2":"","phonetype3":"","phonetype4":"780-632-7701","phonetype5":"","websitetype1":"http://www.century21.ca/david.chau","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116252","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1999775.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Chau","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1275,"name":"Carrie A. Banham-Posty","guid":"109a6b7a-b4ae-4570-9af9-5a8a84197936","individualid":1725477,"phonetype1":"780-974-8062","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.carriebanhamposty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124764","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1725477.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carrie","lastname":"Banham-Posty","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:19","updated_at":"2017-08-11 00:12:19"},{"id":1276,"name":"Ronald J. Wetsch","guid":"cb192c8d-7b52-45e5-95c2-00950f06fbfd","individualid":1891784,"phonetype1":"780-905-5710","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124370","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1891784.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ronald","lastname":"Wetsch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1277,"name":"Marlene J. Pahl","guid":"ee15f49c-214a-457b-bce4-b04d5f4df741","individualid":1478935,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://marlenepahl.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361089","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478935.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marlene","lastname":"Pahl","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1278,"name":"Garry L. Stebner","guid":"7620ee26-b5bf-48e9-a742-c7dc17d8564c","individualid":1520258,"phonetype1":"780-918-5289","phonetype2":"","phonetype3":"","phonetype4":"780-458-6900","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121680","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Garry","lastname":"Stebner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1279,"name":"Randi Lindroth","guid":"da3f8ded-5915-46f7-993c-9d59ca9cd032","individualid":2030518,"phonetype1":"780-993-0161","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969449","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Randi","lastname":"Lindroth","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1280,"name":"Kurtis J. Drummond","guid":"7fb2a9fc-a718-4eaa-bcd8-238bf618a2fd","individualid":1647206,"phonetype1":"780-297-8421","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108872","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1647206.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kurtis","lastname":"Drummond","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1281,"name":"Dawn L. Michaels","guid":"25a04f19-082c-4fb7-a494-727fdddac460","individualid":1886221,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110335","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dawn","lastname":"Michaels","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1282,"name":"Ivan Falcos","guid":"982cc5f2-4519-43c7-b13e-ac8cb005e499","individualid":1996207,"phonetype1":"780-904-2214","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.ivanfalcos.ca","websitetype2":"https://www.facebook.com/HomeHunterYEG/","websitetype3":"https://www.linkedin.com/in/ivan-falcos-553a4720/","websitetype4":"","websitetype5":"","email1":"398781784","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ivan","lastname":"Falcos","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1283,"name":"Amanda L. Papadopoulos","guid":"bbf413d3-58a0-4e08-935d-7fe549b5d536","individualid":1935025,"phonetype1":"780-984-0204","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124831","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1935025.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Amanda","lastname":"Papadopoulos","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1284,"name":"Sam H. Shah","guid":"0d077da8-95f7-4b9d-a272-d54bf4e050ab","individualid":1619308,"phonetype1":"780-297-0297","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.samshah.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398859030","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sam","lastname":"Shah","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1285,"name":"Bernie Thauvette","guid":"79c56806-6d4d-4f02-9d4b-61e8990a60be","individualid":1479481,"phonetype1":"780-990-9757","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397600993","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011727.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bernie","lastname":"Thauvette","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1286,"name":"Leslie Yeung","guid":"366a9a69-7be6-4ee7-9f05-7db54cdc575b","individualid":2021876,"phonetype1":"587-988-0163","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120670","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leslie","lastname":"Yeung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1287,"name":"William R. Bowers","guid":"37c88a09-4a79-45c0-8d8f-a254ac231caf","individualid":1670834,"phonetype1":"780-995-1973","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.billbowers.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397941400","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"William","lastname":"Bowers","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1288,"name":"Ethan J. Marchand","guid":"0ba14423-90c1-4e55-b558-d656100c0e59","individualid":2002356,"phonetype1":"780-868-0552","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.EMRealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402542126","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1285352.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ethan","lastname":"Marchand","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1289,"name":"Jun Wu","guid":"1f922a51-6381-44ea-b28a-7479c83dfac2","individualid":1937243,"phonetype1":"780-240-8888","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733671","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jun","lastname":"Wu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1290,"name":"Ryan C. Philipenko","guid":"36d20845-1b19-4239-9ab0-cd7d9d2cc0af","individualid":1584903,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.philipenko.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601917","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1584903.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Philipenko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1291,"name":"Casey Bonnett","guid":"cc85611e-ca2b-483c-9c59-4fd6adedef69","individualid":1559649,"phonetype1":"780-242-7600","phonetype2":"","phonetype3":"","phonetype4":"866-983-8008","phonetype5":"","websitetype1":"http://www.terrarealty.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114457","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Casey","lastname":"Bonnett","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1292,"name":"Barrie Tanner","guid":"c35f5b22-1071-464d-a40e-777580a73f62","individualid":1567145,"phonetype1":"780-803-2537","phonetype2":"","phonetype3":"","phonetype4":"866-983-8008","phonetype5":"","websitetype1":"http://www.terrarealty.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601878","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barrie","lastname":"Tanner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1293,"name":"Travis D. Ball","guid":"1b2c079b-0ffd-46f1-a580-028de01e981b","individualid":1883861,"phonetype1":"780-233-8446","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/Travis.D.Ball","websitetype3":"https://www.linkedin.com/in/travisdball/","websitetype4":"https://twitter.com/TravisYegRE","websitetype5":"","email1":"398478939","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1883861.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Travis","lastname":"Ball","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1294,"name":"Lorene A. Lecavalier","guid":"354754af-e7f3-4ea1-a18b-f04f0d75a000","individualid":1478499,"phonetype1":"780-990-6266","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://realtyexecutivesmasters.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121465","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lorene","lastname":"Lecavalier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1295,"name":"Erin L. Hettle","guid":"155f9ebc-569f-4012-86ff-fc18a1329d01","individualid":1903865,"phonetype1":"780-224-0183","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/erinhettlerealtyexecutives/","websitetype3":"https://www.linkedin.com/in/erin-hettle-71127940","websitetype4":"","websitetype5":"","email1":"397267584","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1903865.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Erin","lastname":"Hettle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1296,"name":"Sean M. Donlevy","guid":"c0b56425-3003-4d6b-95b0-8201332152ac","individualid":1994504,"phonetype1":"587-986-9545","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.sdonlevy.ca","websitetype2":"https://www.facebook.com/seandonlevyrealestate","websitetype3":"https://www.linkedin.com/in/sean-donlevy-9a685b68/","websitetype4":"","websitetype5":"","email1":"399688788","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1277502.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sean","lastname":"Donlevy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1297,"name":"Nishi Chadha","guid":"30a8563a-5d56-4410-9f63-c85e60d86b61","individualid":1929411,"phonetype1":"780-278-7695","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.nishichadha.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110014","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1929411.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nishi","lastname":"Chadha","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1298,"name":"Mike Assaf","guid":"77d16380-fdd3-4fc6-b4aa-52eedf744528","individualid":1477278,"phonetype1":"780-951-2066","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.theprinceassaf.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121981","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mike","lastname":"Assaf","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1299,"name":"Sada S. Mudliar","guid":"685859c8-666e-4686-ad1b-44942b167f2f","individualid":1891157,"phonetype1":"780-953-0785","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112053","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sada","lastname":"Mudliar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:20","updated_at":"2017-08-11 00:12:20"},{"id":1300,"name":"Greg Randall","guid":"b72bb89c-a0c9-4021-8edd-3383c4b8f2b0","individualid":1479072,"phonetype1":"780-940-2929","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402598368","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1128167.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Greg","lastname":"Randall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1301,"name":"Allison M. Meston","guid":"a882ec74-f228-4de8-afb2-9667fa80bc73","individualid":2021803,"phonetype1":"780-908-3003","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"http://www.livrealestate.ca/about-us/allison-meston/","websitetype2":"https://www.facebook.com/RealtyYEG/","websitetype3":"https://www.linkedin.com/in/allison-meston-33194950?trk=nav_responsive_tab_profile_pic","websitetype4":"https://twitter.com/RealtyYEG","websitetype5":"","email1":"398332120","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1301718.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Allison","lastname":"Meston","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1302,"name":"Edson Cruz","guid":"7c7dcada-2b9c-40ae-9cc4-238d5cc34710","individualid":1477701,"phonetype1":"780-990-6299","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111725","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1125646.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Edson","lastname":"Cruz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1303,"name":"Jack E. Billingsley","guid":"146f2d07-1a42-4e94-b563-478262b46e65","individualid":1994982,"phonetype1":"780-860-8391","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124056","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jack","lastname":"Billingsley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1304,"name":"Ronald R. Rotsburg","guid":"25090f59-1a79-427b-9ae7-e9c16bf87155","individualid":1601936,"phonetype1":"780-982-7292","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113492","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ronald","lastname":"Rotsburg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1305,"name":"Shane M. McCarthy","guid":"eb9811fe-1cc4-4e61-881c-a25c130d9092","individualid":1478691,"phonetype1":"780-914-9379","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.greatedmontonhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122150","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010252.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shane","lastname":"McCarthy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1306,"name":"Moneca Atley","guid":"196bc9ca-2b8a-48b3-81ab-451f1d80053e","individualid":1477283,"phonetype1":"780-918-5643","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112102","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Moneca","lastname":"Atley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1307,"name":"Shamalan Naidu","guid":"5ca4792c-9fa4-46f9-8c16-019a4d4335e0","individualid":1478858,"phonetype1":"780-289-2082","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.shamalan.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121407","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478858.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shamalan","lastname":"Naidu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1308,"name":"David K. Goodchild","guid":"010c2bdb-315b-4247-ad85-c225e5851edb","individualid":1478023,"phonetype1":"780-819-0978","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.davidgoodchild.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661909","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Goodchild","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1309,"name":"Dan V. Ngo","guid":"717ce4ff-ddc4-40ae-bd6f-4b3dbcc60117","individualid":1478876,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112837","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dan","lastname":"Ngo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1310,"name":"Judith A. Rimmer","guid":"4d63db9a-99d1-42a1-919d-9fefc0a82dbe","individualid":1479106,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119125","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Judith","lastname":"Rimmer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1311,"name":"Dave A. Woolger","guid":"e8c60e87-ab87-4efb-91d9-8d014281b7c8","individualid":1896254,"phonetype1":"780-964-8994","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.woolger.ca","websitetype2":"https://www.facebook.com/realtordavewoolger/","websitetype3":"","websitetype4":"https://twitter.com/davewoolger","websitetype5":"","email1":"398838963","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Woolger","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1312,"name":"Colleen B. Ritter","guid":"c8da4317-5ed7-4b59-8da6-065310c90d58","individualid":1479108,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://ColleenRitter.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361067","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Colleen","lastname":"Ritter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1313,"name":"Tony N. Le","guid":"3280f40d-ae70-4f16-8e97-cdfd438e6f7e","individualid":1572526,"phonetype1":"780-920-1838","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112234","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tony","lastname":"Le","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1314,"name":"Rakesh A. Patel","guid":"65671fcc-0d0f-411d-8e11-4c6b20e79b5f","individualid":1942941,"phonetype1":"780-221-0555","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.rakeshpatel.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398936582","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rakesh","lastname":"Patel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1315,"name":"Heidi H. Parmar","guid":"0b301ba7-1974-4f81-999a-dde95cbbeae5","individualid":1478954,"phonetype1":"780-490-9000","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.HeidiParmar.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681748","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Heidi","lastname":"Parmar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1316,"name":"Brett K. Loree","guid":"839411d2-5ff6-4e1f-bb75-a5d72bbceee4","individualid":2003942,"phonetype1":"780-668-9753","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116523","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brett","lastname":"Loree","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1317,"name":"Wendy D. Zrubak-Russill","guid":"0720a940-6313-42dd-a24b-fd78db62deeb","individualid":1479777,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.royallepage.ca/bestlocations","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123806","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wendy","lastname":"Zrubak-Russill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1318,"name":"Edward J. Zrubak","guid":"5d4c64d6-a847-4592-a929-ab369d4d3af1","individualid":1479776,"phonetype1":"780-488-0000","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.royallepage.ca/bestlocations","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119084","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010062.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Edward","lastname":"Zrubak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1319,"name":"Anson Y. Cheung","guid":"9b22a5fe-b9d5-4501-a683-884edbafadfd","individualid":1770675,"phonetype1":"780-860-1022","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://cheungrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602201","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anson","lastname":"Cheung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1320,"name":"Michael A. Pavone","guid":"5b55c542-7111-4cbe-8831-7a545178b9a2","individualid":1572466,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.michaelpavone.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114519","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1151924.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Pavone","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:21","updated_at":"2017-08-11 00:12:21"},{"id":1321,"name":"Ronald N. Manson","guid":"ca69bc5f-3d31-4626-a704-de15dc7db8c8","individualid":1879038,"phonetype1":"780-446-9272","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://ronmanson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398175985","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ronald","lastname":"Manson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1322,"name":"Wally Karout","guid":"188b7464-8085-497b-b23f-f276610ae625","individualid":1478316,"phonetype1":"780-718-4848","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.wallykarout.com","websitetype2":"https://www.facebook.com/wally.karout","websitetype3":"https://www.linkedin.com/in/wally-karout-62127416/","websitetype4":"https://twitter.com/WALLYKAROUT","websitetype5":"","email1":"398265535","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478316.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Wally","lastname":"Karout","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1323,"name":"Aleks S. Radojcic","guid":"6d470080-2fc6-4364-a632-6341542bf86c","individualid":1665060,"phonetype1":"780-691-6683","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.movewithaleks.com","websitetype2":"https://www.facebook.com/MovewithAleks/","websitetype3":"https://www.linkedin.com/in/aleks-radojcic-43b5372a/","websitetype4":"https://twitter.com/AleksRadojcic","websitetype5":"","email1":"398501719","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1665060.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Aleks","lastname":"Radojcic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1324,"name":"Brandon J. Berlando","guid":"16dae9de-fb90-470f-b361-427bbb6c07f6","individualid":1920403,"phonetype1":"780-993-9252","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"http://berlando.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111924","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1920403.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brandon","lastname":"Berlando","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1325,"name":"Noemi C. Freitas","guid":"440f4630-738a-46e3-b738-240209fea442","individualid":1994006,"phonetype1":"587-785-4019","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602884","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Noemi","lastname":"Freitas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1326,"name":"Bruce A. Campbell","guid":"0ce2d896-8356-4588-9932-66ee8fca054e","individualid":1477542,"phonetype1":"780-231-4560","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119580","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bruce","lastname":"Campbell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1327,"name":"Gary E. Dvorkin","guid":"861a11ef-4433-42c6-8918-c0ec7242452e","individualid":1477833,"phonetype1":"780-991-7460","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398610008","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gary","lastname":"Dvorkin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1328,"name":"Tyler Rowan","guid":"c39bf9e1-ddc8-4810-8c84-7f390fbcf9ae","individualid":2008987,"phonetype1":"780-903-3885","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/tylerrowan.realtyexecutives/","websitetype3":"https://www.linkedin.com/in/tyler-rowan-4a93a24b/","websitetype4":"","websitetype5":"","email1":"401212556","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1290802.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tyler","lastname":"Rowan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1329,"name":"Connie M. Gagan","guid":"70f779c0-3faa-4063-a104-bc3f3d027d80","individualid":1859793,"phonetype1":"780-909-8105","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397267608","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Connie","lastname":"Gagan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1330,"name":"Sean T. Gerke","guid":"8e01c5be-378e-4549-8f04-7039d869f1b5","individualid":1955467,"phonetype1":"780-242-0707","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.trustedrealtygroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124853","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1955467.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sean","lastname":"Gerke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1331,"name":"Kevin P. Quintal","guid":"a6e65577-045a-470f-a02b-2afb049e40b5","individualid":1978334,"phonetype1":"587-982-8884","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://www.quintalrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114287","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1264460.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Quintal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1332,"name":"Wayne H. Quintal","guid":"76b67e9c-a209-42cb-a1c8-e11caca9e857","individualid":1479057,"phonetype1":"780-441-1900","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113663","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wayne","lastname":"Quintal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1333,"name":"Ron Haddad","guid":"ac1de3cc-4a9c-4450-9c51-ec9c8ca5ca9f","individualid":1478084,"phonetype1":"780-995-2300","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112084","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Haddad","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1334,"name":"Jasmin C. Matias","guid":"33bbe893-d938-424a-802c-fed023bb69d2","individualid":1478669,"phonetype1":"780-710-0133","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.morganandjasmin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113374","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jasmin","lastname":"Matias","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1335,"name":"Morgan G. Russell","guid":"4685aa75-377a-4777-a242-73ab67a51c60","individualid":1479164,"phonetype1":"780-710-9112","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.morganandjasmin.com","websitetype2":"https://www.facebook.com/morganandjasmin/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812067","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Morgan","lastname":"Russell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1336,"name":"Tim A. Gartner","guid":"6c80007c-53e7-4a4d-b600-e2f790a65f1f","individualid":1477982,"phonetype1":"780-990-5263","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.realtyexecutives.com/agents/tim-gartner","websitetype2":"https://www.facebook.com/TimAGartner/","websitetype3":"https://www.linkedin.com/in/tim-gartner-9a924423/","websitetype4":"https://twitter.com/GartnerTim","websitetype5":"","email1":"398838883","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tim","lastname":"Gartner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1337,"name":"Bruce L. Gaetz","guid":"0de4f206-9f98-490a-9afd-e7bf13ecdddc","individualid":1477966,"phonetype1":"780-237-4755","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.homesandgardensrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123547","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bruce","lastname":"Gaetz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1338,"name":"Janette Searle","guid":"492ab870-ab24-48ed-89e7-61cd158cd557","individualid":1504004,"phonetype1":"780-993-7148","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.janettesearle.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397155031","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1127716.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Janette","lastname":"Searle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1339,"name":"Graham Hein","guid":"974562da-79bb-4407-b44a-84ea89684302","individualid":1729631,"phonetype1":"780-934-2335","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.GrahamHein.com","websitetype2":"https://www.facebook.com/GrahamHeinRealEstate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398610048","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Graham","lastname":"Hein","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1340,"name":"Samia M. Seifeddine","guid":"6b7b3da7-969a-4420-802b-f1f3b0cebc57","individualid":1642304,"phonetype1":"780-719-7450","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"http://www.samiasells.com","websitetype2":"https://www.facebook.com/samia.seifeddine.8","websitetype3":"https://www.linkedin.com/in/samia-seifeddine-b-a-m-a-8335812a/","websitetype4":"","websitetype5":"","email1":"401372066","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1165306.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Samia","lastname":"Seifeddine","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1341,"name":"Tom Sharp","guid":"f3802011-b6e6-4151-95b9-d03266631885","individualid":1832002,"phonetype1":"780-233-0170","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"http://www.tomsharp.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110880","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tom","lastname":"Sharp","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:22","updated_at":"2017-08-11 00:12:22"},{"id":1342,"name":"Katrina D. McNaughton","guid":"16b83217-0bec-416e-8a18-acfb60f27623","individualid":1916762,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.katrinamcnaughton.com","websitetype2":"https://www.facebook.com/KatrinaMcNaughtonRealEstate/","websitetype3":"https://ca.linkedin.com/in/katrina-mcnaughton-ab41a037","websitetype4":"http://twitter.com/KatrinaMcNaugh1","websitetype5":"","email1":"398801948","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1916762.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Katrina","lastname":"McNaughton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1343,"name":"Thomas A. Stewart","guid":"e4573ce5-3bda-48ab-ac9f-80ec6a8e5895","individualid":2016778,"phonetype1":"780-722-6466","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396517059","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Thomas","lastname":"Stewart","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1344,"name":"Ali R. Iozzo","guid":"b8063fd8-39ad-455a-b999-4999db9b8b18","individualid":1960119,"phonetype1":"780-668-3784","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.kennedyrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602656","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ali","lastname":"Iozzo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1345,"name":"Ramona F. Pater","guid":"c81f47e7-9ec4-4649-b50d-3acf78481051","individualid":1942356,"phonetype1":"780-221-8221","phonetype2":"","phonetype3":"","phonetype4":"780-468-1991","phonetype5":"","websitetype1":"http://www.ramonasellsrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396805790","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1942356.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ramona","lastname":"Pater","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1346,"name":"Paul M. Beauchemin","guid":"9844cb3c-8913-4ae4-b03f-34cfe52498af","individualid":1477351,"phonetype1":"780-994-7289","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.paulbeauchemin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401635056","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Beauchemin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1347,"name":"Carla L. Landry","guid":"328f02d1-c7f1-4e63-ba17-989a433b1cab","individualid":1478464,"phonetype1":"780-887-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.carlalandry.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398331907","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011238.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carla","lastname":"Landry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1348,"name":"Peter G. Jonkman","guid":"d0757f69-4f2a-43ad-b1de-7d28f9edb89b","individualid":1571668,"phonetype1":"780-945-0462","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601902","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Jonkman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1349,"name":"Joseph Tolvay","guid":"6196c7dd-c258-44cd-b40a-42fce9262448","individualid":1971752,"phonetype1":"780-906-6887","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.findmyhouse.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119911","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joseph","lastname":"Tolvay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1350,"name":"Brianna J. Wagner","guid":"3601cf43-4060-42f7-8fba-e051e06e3383","individualid":1989170,"phonetype1":"780-982-0794","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401321456","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brianna","lastname":"Wagner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1351,"name":"Brian D. Napier","guid":"3b3b34ec-9f9e-4d71-87af-93ccdcbe675a","individualid":1725476,"phonetype1":"780-886-9210","phonetype2":"","phonetype3":"","phonetype4":"780-458-6053","phonetype5":"","websitetype1":"http://www.napier.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401802002","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1175768.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Brian","lastname":"Napier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1352,"name":"Dianne Miller","guid":"43377c41-8485-422f-8e8e-6218053e80ce","individualid":1478772,"phonetype1":"780-232-8802","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.diannemiller.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115464","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dianne","lastname":"Miller","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1353,"name":"John I. Jurac","guid":"6dba35e9-4ed3-4e75-a2c4-6b96dd86099d","individualid":1478296,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601426","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Jurac","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1354,"name":"Marian I. Liska","guid":"b69505f2-a7fb-46cd-877a-a4c39ee03880","individualid":1478554,"phonetype1":"780-982-6699","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120884","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marian","lastname":"Liska","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1355,"name":"Cherry May R. Badion","guid":"db4f6358-04e6-445d-80da-084318b3faab","individualid":1961901,"phonetype1":"780-935-0528","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117650","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cherry May","lastname":"Badion","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1356,"name":"Emira Hadzic","guid":"7e44abc3-feef-4102-b43c-7071b7ab84b9","individualid":1478085,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688477","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Emira","lastname":"Hadzic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1357,"name":"Carl Bretzlaff","guid":"ab4a9693-9b22-4885-943c-7dc3a0f1698d","individualid":1477489,"phonetype1":"780-445-0618","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://alledmontonhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121838","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477489.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Carl","lastname":"Bretzlaff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1358,"name":"Victor T. Ohmenzetter","guid":"33691c72-f159-48a5-a574-76fe1adfd13d","individualid":1487822,"phonetype1":"780-499-4482","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"https://www.facebook.com/share.php?u=http://wildernesheights.com/","websitetype2":"https://www.facebook.com/victor.ohmenzetter","websitetype3":"https://www.linkedin.com/in/victor-ohmenzetter-ccim-commercial","websitetype4":"","websitetype5":"","email1":"398759697","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1487822.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Victor","lastname":"Ohmenzetter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1359,"name":"Dwight Hillas","guid":"19a79053-6431-45a8-a3f9-574cce872dba","individualid":1478163,"phonetype1":"780-498-1528","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.dwighthillas.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114732","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dwight","lastname":"Hillas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:23","updated_at":"2017-08-11 00:12:23"},{"id":1360,"name":"Lori Hellofs","guid":"b8b8a6a7-5cf6-4577-8824-61c129825b6c","individualid":1594381,"phonetype1":"403-396-1419","phonetype2":"","phonetype3":"","phonetype4":"403-782-2285","phonetype5":"","websitetype1":"http://www.lorihellofs.com","websitetype2":"http://www.facebook.com/lori.hellofs","websitetype3":"","websitetype4":"http://twitter.com/@LacombeREMAX","websitetype5":"","email1":"400526650","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1016136.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lori","lastname":"Hellofs","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:12:24","updated_at":"2017-08-11 00:12:24"},{"id":1361,"name":"Peter F. Estephan","guid":"c0176f18-b836-413c-9521-9c1d10964dda","individualid":1566282,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://peterestephan.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114504","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1566282.JPG","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Estephan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:09","updated_at":"2017-08-11 00:13:09"},{"id":1362,"name":"Darryl J. Locke","guid":"f1352373-7731-44ee-a298-a835d627b194","individualid":1933181,"phonetype1":"780-297-1515","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.darryllocke.ca","websitetype2":"https://www.facebook.com/royallepagedarryllocke/","websitetype3":"","websitetype4":"https://twitter.com/darryllocke","websitetype5":"","email1":"398781777","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1233343.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darryl","lastname":"Locke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:09","updated_at":"2017-08-11 00:13:09"},{"id":1363,"name":"John S. Benjamin","guid":"72ec4ae2-7b59-4103-9c39-ab70e79e248a","individualid":1477368,"phonetype1":"780-242-3511","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119558","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Benjamin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:09","updated_at":"2017-08-11 00:13:09"},{"id":1364,"name":"Eduard Deprato","guid":"8a983f51-b3bb-4c7a-a776-db3041a5906e","individualid":1477756,"phonetype1":"780-499-2851","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"http://www.edeprato.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969227","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Eduard","lastname":"Deprato","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:09","updated_at":"2017-08-11 00:13:09"},{"id":1365,"name":"Elizabeth Poburan","guid":"9570542d-23c5-4604-b030-6b94013a9597","individualid":1760774,"phonetype1":"780-920-6582","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.buysellponyexpress.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110733","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1760774.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Elizabeth","lastname":"Poburan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:09","updated_at":"2017-08-11 00:13:09"},{"id":1366,"name":"Rene M. Bornowsky","guid":"6ae974ce-d214-46dc-83e8-a43c082873bd","individualid":2007435,"phonetype1":"780-974-6566","phonetype2":"","phonetype3":"","phonetype4":"780-569-3071","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116755","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rene","lastname":"Bornowsky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:09","updated_at":"2017-08-11 00:13:09"},{"id":1367,"name":"Colleen T. DiPietro","guid":"b3ffb727-79af-4c70-8361-b8673ceb9ebc","individualid":1992806,"phonetype1":"780-886-0222","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.colleencares.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398176017","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Colleen","lastname":"DiPietro","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1368,"name":"Aldo Esposito","guid":"7c2c2711-d4b6-4f36-8ff2-b42ba2d021af","individualid":2006018,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116668","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1288346.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Aldo","lastname":"Esposito","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1369,"name":"Goldy Singh","guid":"b8f297fb-df2d-4a74-a4ef-580e81d8faee","individualid":1633719,"phonetype1":"780-499-8500","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://homesandgardensrealestategroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602020","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1163298.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Goldy","lastname":"Singh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1370,"name":"Lisa L. Jordan","guid":"a51b6bb1-4f8f-4ce8-9d1b-32d5d1c2eabc","individualid":1625888,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.lisajordan.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122612","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1161533.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lisa","lastname":"Jordan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1371,"name":"Jennifer L. Prosser","guid":"38b9b7c8-8872-4d39-abea-d63b8685c56c","individualid":1595020,"phonetype1":"780-478-5478","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"https://www.edmontonhomesyeg.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402846847","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Prosser","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1372,"name":"Reshad Heidarzoy","guid":"f9262d8c-2cc0-46f9-a4d6-0b6766c047b7","individualid":1998339,"phonetype1":"780-695-1002","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116134","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Reshad","lastname":"Heidarzoy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1373,"name":"Matthew J. Bishai","guid":"697942bc-b1fa-4c20-9be7-097a1b776658","individualid":2010029,"phonetype1":"780-993-7542","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116988","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matthew","lastname":"Bishai","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1374,"name":"Austin D. Nguyen","guid":"9c62043d-47de-4f79-8eee-23529911ac7c","individualid":1569396,"phonetype1":"780-240-6900","phonetype2":"","phonetype3":"","phonetype4":"780-423-4236","phonetype5":"","websitetype1":"http://www.homestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398306980","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1569396.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Austin","lastname":"Nguyen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1375,"name":"Bryan S. Mundo","guid":"8f97e025-10bd-4acd-ab9a-c7b799ea7d26","individualid":1821684,"phonetype1":"780-483-2122","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.BryanMundo.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397155086","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1821684.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bryan","lastname":"Mundo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1376,"name":"Kees Van Staveren","guid":"5e23a02d-46d8-4124-a766-a6fa9f2351ea","individualid":1479580,"phonetype1":"780-719-8006","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.vanstaveren.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112877","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kees","lastname":"Van Staveren","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1377,"name":"Margrit S. Van Staveren","guid":"4fc31259-4aa6-4c88-b106-2c089caeec0c","individualid":1479581,"phonetype1":"780-719-8682","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.vanstaveren.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121649","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Margrit","lastname":"Van Staveren","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1378,"name":"Cynthia P. Leal Chiang","guid":"cbceec53-9ba6-402a-8013-b51b9df1540e","individualid":1927098,"phonetype1":"780-953-7119","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122674","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1229984.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cynthia","lastname":"Leal Chiang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1379,"name":"Jacqueline J. Stewart","guid":"adbc6248-f41f-48de-bf70-d0026aead8b0","individualid":1479399,"phonetype1":"780-239-3777","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.jackiestewart.ca","websitetype2":"https://www.facebook.com/Jackie-Stewart-Kennedy-Real-Estate-193305874061164/","websitetype3":"https://www.linkedin.com/in/jackie-stewart-67266742/","websitetype4":"https://twitter.com/househunterYEG","websitetype5":"","email1":"398733535","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jacqueline","lastname":"Stewart","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1380,"name":"Iksan Elshat","guid":"60ff45b8-29a0-4fd5-abad-272aded2f498","individualid":1958564,"phonetype1":"780-885-4985","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.buyedmontonlistings.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398478956","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1249394.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Iksan","lastname":"Elshat","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1381,"name":"Umer Choudhry","guid":"7c7f76b1-691e-46d3-85dd-1afcce8a3337","individualid":1485620,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398577561","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Umer","lastname":"Choudhry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1382,"name":"Emily C. Dirk","guid":"037e8e23-8ac8-4b25-8bf6-bc547c435f25","individualid":1930010,"phonetype1":"780-996-2319","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.emilydirk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122027","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Emily","lastname":"Dirk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:10","updated_at":"2017-08-11 00:13:10"},{"id":1383,"name":"Theresa M. Blyzchyk","guid":"5efb4f88-9e0e-4bb6-8a2d-e8a74010edf6","individualid":2012983,"phonetype1":"587-597-2212","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117129","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Theresa","lastname":"Blyzchyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1384,"name":"Maria Bostan","guid":"81659f3c-b132-46d5-a653-cc3f015d174a","individualid":1563402,"phonetype1":"780-221-2932","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.edmontonpropertyfinders.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601854","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Maria","lastname":"Bostan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1385,"name":"Shauna Morton","guid":"9f0c5059-5720-45bc-a31b-a3f124430947","individualid":1503215,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.ShaunaMorton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143757","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1136731.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shauna","lastname":"Morton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1386,"name":"Rhonda L. Gibson","guid":"1dca874a-e464-4317-bd13-905d3a2bac2c","individualid":1979312,"phonetype1":"780-233-5123","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401802039","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1265434.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rhonda","lastname":"Gibson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1387,"name":"Melissa M. Madison","guid":"dcbca4ea-797a-447f-bddc-1126096ad7c2","individualid":1937950,"phonetype1":"780-233-5884","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.madisonrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114058","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Melissa","lastname":"Madison","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1388,"name":"Helen M. Shutt","guid":"2a6de50a-37e8-436f-a7eb-437a06681317","individualid":1478364,"phonetype1":"780-907-2116","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115492","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1091512.gif","position":"Associate","permitfreetextemail":0,"firstname":"Helen","lastname":"Shutt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1389,"name":"Steve L. Anderson","guid":"422df6fc-b94b-4d60-ba8b-44889b7157f0","individualid":2008438,"phonetype1":"780-242-0866","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.andersonsteve.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400628631","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1290325.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Anderson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1390,"name":"Krystal L. Balogh","guid":"ddd0b03f-d51c-4cc5-b69c-1112190b2ad9","individualid":2013587,"phonetype1":"780-908-9337","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.HomesByKrystal.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398801965","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1295147.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Krystal","lastname":"Balogh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1391,"name":"Sandra L. Bowhay","guid":"124c5be5-bfbc-4f9e-9329-228fd833509d","individualid":1765141,"phonetype1":"780-904-0810","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.sandybowhay.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119654","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sandra","lastname":"Bowhay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1392,"name":"Judith S. Shewchuk","guid":"22b1b6ce-b415-48e3-be16-89e726117c46","individualid":1485247,"phonetype1":"780-233-9000","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601738","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Judith","lastname":"Shewchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1393,"name":"Don J. Sutton","guid":"32300113-e9bc-4a94-a40e-5d58f9a2940a","individualid":1479424,"phonetype1":"780-468-3333","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.donsutton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112466","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010236.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Don","lastname":"Sutton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1394,"name":"Kelsey Nuttall","guid":"f844bca0-1208-4772-993c-b830b7534b3e","individualid":1990586,"phonetype1":"587-597-4663","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://kelseynuttall.ca","websitetype2":"https://www.facebook.com/nuttallrealestate/?ref=aymt_homepage_panel","websitetype3":"http://KelseyNuttall","websitetype4":"http://YEG_HomeSold","websitetype5":"","email1":"396121297","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelsey","lastname":"Nuttall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1395,"name":"Sheryl A. Stephens","guid":"df59959a-ddb5-4a68-b7cf-0ebff7133039","individualid":1566493,"phonetype1":"780-717-5613","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.sherylstephens.ca","websitetype2":"https://www.facebook.com/Sherylstephensrealestate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396805817","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1566493.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sheryl","lastname":"Stephens","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1396,"name":"Robin L. Smashnuk","guid":"9a500baa-95c7-4894-a153-5fbc50ac0497","individualid":1567507,"phonetype1":"780-916-4109","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.robsellshomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111601","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robin","lastname":"Smashnuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1397,"name":"Jeffrey Scott","guid":"ca875d8c-4d32-4988-94b8-3351984ac868","individualid":1903959,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.jeffreyscottrealestate.com","websitetype2":"https://www.facebook.com/jeffreyscottrealestate/","websitetype3":"https://www.linkedin.com/in/w-jeffrey-b-scott-069b6430?trk=hp-identity-name","websitetype4":"","websitetype5":"","email1":"397456334","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1903959.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeffrey","lastname":"Scott","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1398,"name":"Liam E. Whalen","guid":"e2b573c2-0c6f-4bf0-b4f8-eb840b74445b","individualid":2011930,"phonetype1":"780-940-7296","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.liamwhalen.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759985","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Liam","lastname":"Whalen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1399,"name":"Faye M. Domingues","guid":"16638077-3f9d-41bb-b913-59bab7aea124","individualid":1477786,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110434","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Faye","lastname":"Domingues","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1400,"name":"Anastasiia Borovyk","guid":"da2fe6d5-22cd-49ec-8a4d-feb34d3b873b","individualid":2019604,"phonetype1":"780-655-2537","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118884","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anastasiia","lastname":"Borovyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1401,"name":"Ken J. Healey","guid":"c89d03f1-aeeb-4444-bf38-0bb4ae440de1","individualid":1952244,"phonetype1":"780-566-0408","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.kenhealey.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114680","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1952244.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ken","lastname":"Healey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1402,"name":"Dale W. Temple","guid":"635d75e7-6ffd-4084-afef-6395a44244d0","individualid":1987607,"phonetype1":"780-298-3877","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://realtyinedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115878","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dale","lastname":"Temple","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:11","updated_at":"2017-08-11 00:13:11"},{"id":1403,"name":"Robert Solem","guid":"598325da-7473-47f6-b3f8-63b8ba05c2de","individualid":2036550,"phonetype1":"780-245-6999","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.MyEdmontonRealEstate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402485170","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1313068.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Solem","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1404,"name":"Roberta B. Ruecker","guid":"214e1dc0-4aa1-4fcf-a7d7-b3b5e4243d91","individualid":1479160,"phonetype1":"780-945-0720","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.MyEdmontonRealEstate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402485123","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479160.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Roberta","lastname":"Ruecker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1405,"name":"Ryan R. Lauber","guid":"ca76e0f0-066c-4529-9351-11f422ab41e1","individualid":1880534,"phonetype1":"780-717-4861","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://ryanlauber.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114613","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Lauber","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1406,"name":"Barry R. Campbell","guid":"0e528872-4f94-4b81-b086-8b891fad4005","individualid":1759699,"phonetype1":"780-360-9300","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.barrycampbell.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113512","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barry","lastname":"Campbell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1407,"name":"Megan A. Jordan","guid":"23aa1950-4615-411c-89f9-9d9e305c3110","individualid":2005820,"phonetype1":"780-937-2990","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116647","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/2005820.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Megan","lastname":"Jordan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1408,"name":"Andrew M. Read","guid":"c441866d-565e-43c1-9134-e78dacbfc8ff","individualid":1479083,"phonetype1":"780-906-6717","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122921","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Andrew","lastname":"Read","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1409,"name":"David J. Henderson","guid":"36b90626-0108-4e32-a43c-a5f72da0aa37","individualid":1559461,"phonetype1":"780-965-7800","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.965-7800.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119707","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Henderson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1410,"name":"Trisha Zimmerling","guid":"fa12f72e-077b-4659-b166-c810346e2f92","individualid":2026831,"phonetype1":"780-298-1504","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398054836","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trisha","lastname":"Zimmerling","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1411,"name":"Luc Ko","guid":"7fa4f534-6f0a-49e4-8d16-244a6e4b5349","individualid":1478377,"phonetype1":"780-907-8018","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"http://www.lucko.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601520","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478377.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Luc","lastname":"Ko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1412,"name":"Reanna D. Bowden","guid":"e87eef94-139b-4cea-af16-ef355e30d37d","individualid":1728833,"phonetype1":"780-668-0678","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"http://www.bowdensimpatico.com","websitetype2":"https://www.facebook.com/bowdensimpatico/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969262","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1728833.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Reanna","lastname":"Bowden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1413,"name":"Catherine M. Smith","guid":"ef312763-3390-492a-a8eb-da6e4333a549","individualid":2005199,"phonetype1":"780-999-2819","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401918855","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/2005199.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Catherine","lastname":"Smith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1414,"name":"Nadeem Mirza","guid":"753f7b14-64bb-4484-b430-b58b33438f87","individualid":1478781,"phonetype1":"780-966-4786","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110417","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1119376.gif","position":"Associate","permitfreetextemail":0,"firstname":"Nadeem","lastname":"Mirza","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1415,"name":"Aaron B. Applin","guid":"296ad7f9-7f1d-4912-98be-cad06f9009b1","individualid":2004585,"phonetype1":"780-934-6247","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.aaronapplin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116550","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1287083.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Aaron","lastname":"Applin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1416,"name":"John Rota","guid":"1da62ff8-eec0-4cdc-bdce-2af5c50e6f9e","individualid":1984629,"phonetype1":"780-707-9484","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://john.muveteam.com","websitetype2":"https://www.facebook.com/John-Rota-Real-Estate-Agent-1564104207212401/","websitetype3":"https://www.linkedin.com/in/john-rota-b4255283?trk=nav_responsive_tab_profile_pic","websitetype4":"https://twitter.com/JohnRota4","websitetype5":"","email1":"402485158","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1269553.jpg","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Rota","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1417,"name":"Jeff J. Johnson","guid":"16aa9680-1418-4f68-8511-1250ddd9e5d3","individualid":1478279,"phonetype1":"780-998-4860","phonetype2":"","phonetype3":"","phonetype4":"780-998-4313","phonetype5":"","websitetype1":"http://www.jjjohnson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120052","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478279.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Jeff","lastname":"Johnson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1418,"name":"Sandy Johnson","guid":"2bef53ad-d3fc-4d4b-a028-493874edcd9a","individualid":1478284,"phonetype1":"780-998-4860","phonetype2":"","phonetype3":"","phonetype4":"780-998-4313","phonetype5":"","websitetype1":"http://www.jjjohnson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121474","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478284.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Sandy","lastname":"Johnson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1419,"name":"Tameka D. Ross","guid":"cd521651-f454-4f96-ab84-0239d14452ab","individualid":1924240,"phonetype1":"780-707-2664","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113570","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1228443.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tameka","lastname":"Ross","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1420,"name":"Michelle A. Patterson Nipp","guid":"28f8be7b-a191-4359-8c9e-a73db0878b05","individualid":1563410,"phonetype1":"780-231-8970","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.michellenipp.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400602996","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1148817.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michelle","lastname":"Patterson Nipp","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1421,"name":"Colleen M. Papenbrock","guid":"fef6345f-fde1-4cd1-96a3-8e6a4e4e00ec","individualid":1478945,"phonetype1":"780-231-1422","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.ColleenP.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143735","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Colleen","lastname":"Papenbrock","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:12","updated_at":"2017-08-11 00:13:12"},{"id":1422,"name":"Wendy Hamel","guid":"2233eed3-d43a-4c63-87fb-b83fab6399d6","individualid":1808980,"phonetype1":"780-238-3358","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551392","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wendy","lastname":"Hamel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1423,"name":"Jeremy G. Ray","guid":"ff6aa4c8-4195-431f-bcc8-3f08d54725b2","individualid":2015853,"phonetype1":"780-996-5069","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118771","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jeremy","lastname":"Ray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1424,"name":"Rita Hay","guid":"c4648726-7e23-43f4-93df-f2b1ca50afbb","individualid":1478133,"phonetype1":"780-239-7482","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121974","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rita","lastname":"Hay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1425,"name":"Danny Bonko","guid":"73971737-4446-4bc1-8e65-7791f94e9918","individualid":1477442,"phonetype1":"780-916-3814","phonetype2":"","phonetype3":"","phonetype4":"780-417-9055","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122742","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010912.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Danny","lastname":"Bonko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1426,"name":"Jill Jordan","guid":"53e83c55-a79e-4af7-9082-e6104e1a154b","individualid":1478292,"phonetype1":"780-777-3434","phonetype2":"","phonetype3":"","phonetype4":"888-322-5753","phonetype5":"","websitetype1":"http://www.jillwill.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143752","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478292.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Jill","lastname":"Jordan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1427,"name":"Roger V. Hawryluk","guid":"2f963e91-96c4-48ac-b957-fe78ace261ba","individualid":1478129,"phonetype1":"780-962-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.rogerhawryluk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759577","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478129.jpg","position":"Office Manager","permitfreetextemail":0,"firstname":"Roger","lastname":"Hawryluk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1428,"name":"Ryan M. McDonald","guid":"e37a5fd6-ee53-47bc-8eb9-66510cb34178","individualid":1889433,"phonetype1":"780-982-2600","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.propertiesalberta.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401321430","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"McDonald","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1429,"name":"Gary J. Gordon","guid":"65af73dc-e910-426f-974c-265e2a685f1f","individualid":1478029,"phonetype1":"780-951-2991","phonetype2":"","phonetype3":"","phonetype4":"780-998-7961","phonetype5":"","websitetype1":"http://www.garygordonrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112529","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010135.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Gary","lastname":"Gordon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1430,"name":"Normande Godin","guid":"31b9edd6-d742-4b9b-9ae0-297b787c9899","individualid":1478013,"phonetype1":"780-718-4155","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111821","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Normande","lastname":"Godin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1431,"name":"Kyle A. Rossiter","guid":"ce23f188-b787-4713-9877-ba3ca873c36a","individualid":1635525,"phonetype1":"780-637-4760","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.kylerossiter.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602025","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1163808.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kyle","lastname":"Rossiter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1432,"name":"Evelyn G. Pagee","guid":"2b16dba4-ad61-4a28-bb7d-4ab422fa2813","individualid":1501964,"phonetype1":"780-721-9405","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123860","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Evelyn","lastname":"Pagee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1433,"name":"Harold W. Klak","guid":"ddcfc1a1-00cb-4bad-818e-a9d03a753bc7","individualid":1478363,"phonetype1":"780-497-8846","phonetype2":"","phonetype3":"","phonetype4":"780-459-0235","phonetype5":"","websitetype1":"http://www.haroldklak.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109007","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478363.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Harold","lastname":"Klak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1434,"name":"Ernest Apostal","guid":"986e8134-5ce4-437c-b670-36b94f2daa7b","individualid":1477270,"phonetype1":"780-887-1331","phonetype2":"","phonetype3":"","phonetype4":"780-459-0235","phonetype5":"","websitetype1":"http://www.EAhomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115689","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ernest","lastname":"Apostal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1435,"name":"Barry E. Wilhelm","guid":"c1c61936-b730-40b6-89dc-cd43141dc57f","individualid":1594392,"phonetype1":"780-267-7253","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398803506","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barry","lastname":"Wilhelm","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1436,"name":"Corey R. Young","guid":"c8b05a2c-d681-418c-8cde-bfe5bd5ca7b9","individualid":1810589,"phonetype1":"780-498-6698","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.albertaonfire.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120800","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Corey","lastname":"Young","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1437,"name":"Duc Truong","guid":"e22f095c-c5ca-4b77-abf0-258177568413","individualid":2030528,"phonetype1":"780-729-8686","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681974","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Duc","lastname":"Truong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1438,"name":"Catherine Wolf","guid":"29f5dd24-f974-4811-959a-ee688e22c462","individualid":1479707,"phonetype1":"780-905-9002","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125172","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479707.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Catherine","lastname":"Wolf","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1439,"name":"Anna Tomczyk","guid":"4a26c5d3-85cd-417c-8770-9ab5aaabd43f","individualid":1725914,"phonetype1":"780-982-5233","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.GreaterEdmontonRealEstate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733607","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1175826.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Anna","lastname":"Tomczyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1440,"name":"Bill Moroziuk","guid":"07fa67bb-8692-4e44-86bd-9bd2dafbca31","individualid":1478815,"phonetype1":"780-485-7850","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111751","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Moroziuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1441,"name":"Tabatha Dowhaniuk","guid":"0475d07c-cc17-4b11-bd8d-925d62653a6a","individualid":1535581,"phonetype1":"780-265-4100","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114450","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tabatha","lastname":"Dowhaniuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1442,"name":"Laurel D. Hamm Mills","guid":"b611b75d-eb6e-4bc1-9441-7f68183a53d4","individualid":1592202,"phonetype1":"780-903-7653","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.laurelhamm.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397316302","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Laurel","lastname":"Hamm Mills","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1443,"name":"Oleksandra Liva","guid":"87767bfc-31dc-4a46-a28e-ee8516061eb3","individualid":1910295,"phonetype1":"780-884-8266","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.olivahomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114038","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1910295.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Oleksandra","lastname":"Liva","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1444,"name":"Gurdeep S. Mann","guid":"2f868768-4b49-4ae3-af73-b38abd4cb6f5","individualid":1917835,"phonetype1":"780-970-7973","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602449","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gurdeep","lastname":"Mann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1445,"name":"Steve Lount","guid":"bbbd6bf4-9e15-455e-86ec-15e4b0c4629d","individualid":1478573,"phonetype1":"780-719-2693","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108991","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Lount","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:13","updated_at":"2017-08-11 00:13:13"},{"id":1446,"name":"Sarah M. Chadi","guid":"9beec73d-3e4b-4b11-b1df-ad98879d8251","individualid":1942788,"phonetype1":"780-904-4211","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113597","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sarah","lastname":"Chadi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1447,"name":"Sandra L. Laurin","guid":"a79a0fdd-6dd2-4d66-9568-d860b772af73","individualid":1618270,"phonetype1":"780-218-7653","phonetype2":"","phonetype3":"","phonetype4":"780-998-7400","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121114","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1618270.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandra","lastname":"Laurin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1448,"name":"Adrian Michelutti","guid":"2fa1ee06-c938-416f-9733-2725d8b8bdf6","individualid":1998167,"phonetype1":"587-340-6338","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116063","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Adrian","lastname":"Michelutti","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1449,"name":"Louise G. Berube","guid":"e6603251-3500-4cf5-807c-706d57e57c76","individualid":1477383,"phonetype1":"780-909-2651","phonetype2":"","phonetype3":"","phonetype4":"780-929-9272","phonetype5":"","websitetype1":"http://www.royallepage.ca/gateway","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123527","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Louise","lastname":"Berube","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1450,"name":"Sunny Dhillon","guid":"c33a0484-edd7-4052-9c37-1ff9c21330dd","individualid":1632940,"phonetype1":"780-965-3533","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://sunnysells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401511302","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sunny","lastname":"Dhillon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1451,"name":"James R. Statt","guid":"7a0027f8-50e0-4c32-86b5-dc126021c48e","individualid":1912565,"phonetype1":"780-690-6111","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401616820","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1912565.jpg","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"Statt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1452,"name":"Larry A. Kowalchuk","guid":"2a39f8e7-d103-47cf-b9c6-3b655fce7cc4","individualid":1478399,"phonetype1":"780-504-5950","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124637","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010239.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Larry","lastname":"Kowalchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1453,"name":"Nabil C. John","guid":"1c8e2317-3403-4e2b-a62e-419480ace3d1","individualid":1536507,"phonetype1":"780-887-5259","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.nabiljohn.com","websitetype2":"http://www.facebook.com/nabiljohnrealestate","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908875","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1536507.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nabil","lastname":"John","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1454,"name":"Dave R. Harback","guid":"5f04b6be-140b-4fe1-ac12-e03e61897e0b","individualid":1478112,"phonetype1":"780-903-6975","phonetype2":"","phonetype3":"","phonetype4":"780-451-3940","phonetype5":"","websitetype1":"https://www.facebook.com/dave.harback.1","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397363218","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Harback","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1455,"name":"Sherri A. Prodaniuk","guid":"e403433b-2da4-4d3f-8efd-2ab5df24e521","individualid":2009360,"phonetype1":"780-975-9343","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400656414","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sherri","lastname":"Prodaniuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1456,"name":"Erica Ammar","guid":"7880bd20-ee1a-4089-8ca8-b7cb5a5105cd","individualid":1562483,"phonetype1":"780-964-3443","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400458845","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Erica","lastname":"Ammar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1457,"name":"Susan C. Evans","guid":"bc87c333-9123-495d-89ca-c4a5175e0937","individualid":2026169,"phonetype1":"587-926-3602","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397603034","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Susan","lastname":"Evans","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1458,"name":"Zamir Hussain","guid":"ddeae146-10bd-4cdd-9d04-438fc8050aea","individualid":1743710,"phonetype1":"780-439-9818","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602183","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Zamir","lastname":"Hussain","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1459,"name":"Lisa Soucy","guid":"fb238666-7205-4e2d-a25b-9eb03eee4c92","individualid":1999923,"phonetype1":"780-951-1629","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116277","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lisa","lastname":"Soucy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1460,"name":"Shivon Lavallee","guid":"bdc5505a-4dc1-4a92-897f-296452d8465f","individualid":1950879,"phonetype1":"780-993-0220","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.shivonlavallee.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120857","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1950879.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shivon","lastname":"Lavallee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1461,"name":"Vince Laberge","guid":"0b6cb294-0cca-4717-88cc-fe3900925b4a","individualid":1478445,"phonetype1":"780-699-6866","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://yourrealestatemaster.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113084","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Vince","lastname":"Laberge","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1462,"name":"Danelle L. Bolinski","guid":"5b0d85cf-0061-4244-873a-80e887f62853","individualid":1529364,"phonetype1":"780-242-4662","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.danellebolinskisells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111957","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1529364.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Danelle","lastname":"Bolinski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1463,"name":"Daniel E. Yurdiga","guid":"c81c48f9-68df-447f-b442-4d5dd57a480b","individualid":1479760,"phonetype1":"780-995-0339","phonetype2":"","phonetype3":"","phonetype4":"780-569-3071","phonetype5":"","websitetype1":"http://www.teamdigger.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110638","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Daniel","lastname":"Yurdiga","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1464,"name":"Caroline L. Robertson","guid":"74a6043c-b565-46cd-a052-e93cf27bd013","individualid":1881795,"phonetype1":"780-288-6137","phonetype2":"","phonetype3":"","phonetype4":"780-569-3071","phonetype5":"","websitetype1":"http://www.teamdigger.ca/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114184","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1881795.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Caroline","lastname":"Robertson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:14","updated_at":"2017-08-11 00:13:14"},{"id":1465,"name":"YVONNE BAYLEY","guid":"97662213-2b36-45ce-9918-251bf1b68fb5","individualid":1402373,"phonetype1":"780-723-1406","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"http://www.yvonnebayley.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"395068879","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1108959.jpg","position":"","permitfreetextemail":0,"firstname":"YVONNE","lastname":"BAYLEY","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1466,"name":"Treva Annette","guid":"444847ab-ae76-4b00-b8d4-770dd38164b8","individualid":1477411,"phonetype1":"780-918-8697","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396832854","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Treva","lastname":"Annette","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1467,"name":"Nadeem U. Jellani","guid":"f969509e-7046-45c3-840f-e9c3d574e788","individualid":1835609,"phonetype1":"780-660-9914","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119299","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nadeem","lastname":"Jellani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1468,"name":"Jim W. Erickson","guid":"5673b66c-9c1a-42de-916f-8837e750b435","individualid":1477870,"phonetype1":"780-914-1583","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://JimErickson.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829185","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011453.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jim","lastname":"Erickson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1469,"name":"Michael G. Currie","guid":"bf377ff7-9e4b-429a-9742-982c1f746a65","individualid":1949625,"phonetype1":"780-996-3569","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.mikecurrie.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123781","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Currie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1470,"name":"Corinne G. O'Neil","guid":"1b40dd9c-fbcd-4c40-a7c4-f5dfe430a507","individualid":1478909,"phonetype1":"780-995-7653","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.corinneoneil.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114386","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Corinne","lastname":"O'Neil","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1471,"name":"Bobbi-Lee D. Maroney","guid":"efaaf194-658a-4f18-8530-da1a68e5151e","individualid":1478652,"phonetype1":"780-887-4692","phonetype2":"","phonetype3":"","phonetype4":"780-416-4787","phonetype5":"","websitetype1":"http://www.realtyinnovations.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402512874","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1093829.gif","position":"Broker","permitfreetextemail":0,"firstname":"Bobbi-Lee","lastname":"Maroney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1472,"name":"Tanya M. Turner","guid":"9ae8717e-96de-4197-9000-5bff7fd27637","individualid":1531339,"phonetype1":"780-435-0888","phonetype2":"","phonetype3":"","phonetype4":"780-416-4787","phonetype5":"","websitetype1":"http://www.realtyinnovations.ca","websitetype2":"http://www.facebook.com/realtyinnovations","websitetype3":"","websitetype4":"https://twitter.com/@Tanya_Turner18","websitetype5":"","email1":"402512907","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tanya","lastname":"Turner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1473,"name":"Keisha A. Taylor","guid":"569b3fbf-0510-4a01-83d5-630f6f7475c7","individualid":1887505,"phonetype1":"780-970-4494","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111348","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Keisha","lastname":"Taylor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1474,"name":"Bobbie L. Gronvall","guid":"5abeea4e-1d31-4f47-9ede-27ab7ae1cbd9","individualid":1952165,"phonetype1":"780-720-2376","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121218","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bobbie","lastname":"Gronvall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1475,"name":"Robert Moshansky","guid":"4bf95ca7-79c9-4a41-9e58-0f0dd9269576","individualid":1478828,"phonetype1":"780-498-6910","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.robertmoshansky.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113355","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Moshansky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1476,"name":"Teresa L. Candido","guid":"9f91493a-bedf-4b5c-8883-d5126ed173da","individualid":1851527,"phonetype1":"780-902-6764","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.larrycandido.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110313","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Teresa","lastname":"Candido","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1477,"name":"Terry N. Taschuk","guid":"f1e869af-2634-4d19-8fa8-40df257bbcf1","individualid":1479456,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.taschuk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115166","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Terry","lastname":"Taschuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1478,"name":"Kalan M. Savill","guid":"32005d71-d081-4330-bedf-0457f8f09260","individualid":1818072,"phonetype1":"780-993-7030","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.marketdirection.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124997","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kalan","lastname":"Savill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1479,"name":"Harry S. Mann","guid":"5830a17a-2efb-4a71-8f1d-6e1e50aae4cd","individualid":2027636,"phonetype1":"780-271-1401","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398403825","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1307050.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Harry","lastname":"Mann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1480,"name":"Timothy L. Oliver","guid":"e47d7fe9-7d37-47f1-ae5e-a9c2be23cc60","individualid":1942789,"phonetype1":"780-668-6864","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"http://www.timoliver.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109743","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1942789.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Timothy","lastname":"Oliver","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:15","updated_at":"2017-08-11 00:13:15"},{"id":1481,"name":"Tara L. Kennedy","guid":"f83c5c2d-d08f-44fa-ab44-2d572976b989","individualid":1725475,"phonetype1":"780-991-2636","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.realtybytara.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113153","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1725475.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tara","lastname":"Kennedy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1482,"name":"Daniel C. Starkman","guid":"e8310270-41f0-4f84-b6dc-b899e261165a","individualid":1479373,"phonetype1":"780-863-0778","phonetype2":"","phonetype3":"","phonetype4":"780-453-3567","phonetype5":"","websitetype1":"http://www.starkmanrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400656342","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1115747.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Daniel","lastname":"Starkman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1483,"name":"Sheryll F. Archer","guid":"c1dc2a4e-0192-413d-a154-a23a285094ee","individualid":1992063,"phonetype1":"780-278-6679","phonetype2":"","phonetype3":"","phonetype4":"403-450-8419","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602856","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sheryll","lastname":"Archer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1484,"name":"Kyle E. Archer","guid":"97c8604d-45d3-4c46-b912-a52356ba4997","individualid":1906605,"phonetype1":"587-341-5953","phonetype2":"","phonetype3":"","phonetype4":"403-450-8419","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118367","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1906605.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kyle","lastname":"Archer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1485,"name":"Nicole R. Blais","guid":"2ad798de-d53e-476b-9a5b-f8e1f1c188fc","individualid":2012214,"phonetype1":"780-499-2422","phonetype2":"","phonetype3":"","phonetype4":"780-961-3535","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117108","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nicole","lastname":"Blais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1486,"name":"Joan G. Lynch","guid":"a3ce76a1-3343-4647-a853-d213c56a740b","individualid":1478586,"phonetype1":"780-433-9025","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.joanlynch.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108982","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478586.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Joan","lastname":"Lynch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1487,"name":"Cindy Li","guid":"f8ed3be9-7416-4ae4-bda7-4a085ba84e0f","individualid":2025631,"phonetype1":"780-288-6926","phonetype2":"","phonetype3":"","phonetype4":"780-757-5002","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402069036","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1305228.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cindy","lastname":"Li","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1488,"name":"Paul E. Afonso","guid":"115cb227-1092-47c2-802e-d3caf8cc32aa","individualid":1616353,"phonetype1":"780-233-1727","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.afonso-realty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759744","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Afonso","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1489,"name":"Marco Urso","guid":"7004a3b1-7426-4ea4-b414-d45a21f35fd5","individualid":2033914,"phonetype1":"780-803-8483","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400384038","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marco","lastname":"Urso","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1490,"name":"Sharon C. Ryan","guid":"0af4ec08-963e-452f-8cd0-37d7aef2ed37","individualid":1565937,"phonetype1":"780-233-6398","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.sharonryan.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112706","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sharon","lastname":"Ryan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1491,"name":"Bonnie R. Pinder","guid":"aa36566f-ddf7-48db-a3af-f52ff7a3c04a","individualid":1501965,"phonetype1":"780-903-3820","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.homegirls.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812091","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bonnie","lastname":"Pinder","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1492,"name":"Keith B. Madsen","guid":"489de5ea-02d4-4447-a263-3b21b6794611","individualid":1981188,"phonetype1":"780-934-2667","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.boomsoldrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402485153","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1266762.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Keith","lastname":"Madsen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1493,"name":"Sandra D. Milligan","guid":"4199cb12-12db-4a2a-8c8e-6341255376b4","individualid":1478777,"phonetype1":"780-478-5381","phonetype2":"","phonetype3":"","phonetype4":"780-478-2121","phonetype5":"","websitetype1":"http://www.milligan.ab.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396130155","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Sandra","lastname":"Milligan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1494,"name":"James L. Baxter","guid":"856fc18f-0660-4c4a-9dcf-40f0c57cc815","individualid":1477344,"phonetype1":"780-445-9698","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.jbaxterhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119480","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1109973.jpg","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"Baxter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1495,"name":"Simran Jhand","guid":"f4e160c6-2fc1-464e-9284-aac1e78594df","individualid":1890133,"phonetype1":"780-278-2778","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.simranjhand.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602348","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Simran","lastname":"Jhand","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1496,"name":"Elisse L. Moreno","guid":"f2924cfd-9f87-4f22-9d78-773b9c9a6ed8","individualid":1992070,"phonetype1":"587-400-7653","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.yourtruhome.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121479","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1992070.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Elisse","lastname":"Moreno","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1497,"name":"Darrell B. Morrow","guid":"21a3e991-52af-468f-a947-7be5c72d9054","individualid":1478824,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.darrellmorrow.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360908","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Darrell","lastname":"Morrow","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:16","updated_at":"2017-08-11 00:13:16"},{"id":1498,"name":"Aman Aggarwal","guid":"cdc2f3ff-117f-4b15-accf-a8bc1842e16a","individualid":1977298,"phonetype1":"780-906-9665","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111688","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Aman","lastname":"Aggarwal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1499,"name":"Michelle E. Derk","guid":"f33cc187-8576-4e72-b677-595bad8c0b56","individualid":1898440,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.michellederk.com","websitetype2":"https://lm.facebook.com/l.php?u=http%3A%2F%2Ffb.me%2FTheHomeMatchMakerYEG&h=ATOJ9bc2CLgJT7r4l_3ZbWg8","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398054769","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michelle","lastname":"Derk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1500,"name":"Christina A. Reid","guid":"1284884b-fcb3-4334-b38c-da325a6294a8","individualid":2025583,"phonetype1":"780-717-5267","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397316259","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1305186.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christina","lastname":"Reid","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1501,"name":"Steven Daniele","guid":"55aa98bb-4605-49cd-9d9f-5e8163445a1c","individualid":2036413,"phonetype1":"780-993-0875","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401321487","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steven","lastname":"Daniele","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1502,"name":"Domenico Russomanno","guid":"5f5e81ec-70e3-420e-aa04-7678ca556443","individualid":2036414,"phonetype1":"780-710-8263","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400999292","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Domenico","lastname":"Russomanno","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1503,"name":"Nasir Mahmood","guid":"a26be7d1-4ffc-407f-8f1d-ac11b9d455aa","individualid":1677042,"phonetype1":"780-964-1499","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.nasirmahmood.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602116","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1171793.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nasir","lastname":"Mahmood","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1504,"name":"Sukhi S. Dhaliwal","guid":"48f26e7a-49d5-4dd3-83be-5144611a0b70","individualid":1616030,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://sukhidhaliwal.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115758","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sukhi","lastname":"Dhaliwal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1505,"name":"Doug Cheney","guid":"bac13b12-745f-4494-9331-039c9b98a3c1","individualid":1477594,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.DougCheney.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112457","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010328.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"Cheney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1506,"name":"Patrick E. Gonzalez","guid":"4f5eb774-23b4-4d9d-bb25-f9d2258665c0","individualid":1478020,"phonetype1":"780-914-1586","phonetype2":"","phonetype3":"","phonetype4":"780-431-1600","phonetype5":"","websitetype1":"http://Patrickgonzalez.realtor","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601705","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Patrick","lastname":"Gonzalez","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1507,"name":"Mathew T. Haupt","guid":"f818d433-b8e1-4991-8484-3d46de0de97b","individualid":2021653,"phonetype1":"780-904-4666","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398927033","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mathew","lastname":"Haupt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1508,"name":"Jeffrey J. Fafard","guid":"e05cf8ac-bd5a-4eb4-88d0-e623b4493c35","individualid":2013475,"phonetype1":"780-994-0874","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"http://www.weselledmonton.com","websitetype2":"https://www.facebook.com/fafard.jeff","websitetype3":"https://www.linkedin.com/in/fafardjeff/","websitetype4":"https://twitter.com/Jeff_Fafard","websitetype5":"","email1":"397602957","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/2013475.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeffrey","lastname":"Fafard","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:17","updated_at":"2017-08-11 00:13:17"},{"id":1509,"name":"Bill D. Tylosky","guid":"d1197c7c-104d-4256-883a-e013915a64a7","individualid":1479555,"phonetype1":"780-887-0248","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.billsells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398636068","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1121749.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Tylosky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1510,"name":"Caleigh R. Pagnucco","guid":"59fa3e6d-35ab-4789-b394-abb286e9db28","individualid":1983998,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117665","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Caleigh","lastname":"Pagnucco","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1511,"name":"Jennifer E. Fairhurst","guid":"87426dae-e364-4fb5-922a-c49233145342","individualid":2016832,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-998-0344","phonetype5":"","websitetype1":"http://www.jennfairhurst.remax.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397526912","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Fairhurst","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1512,"name":"Candice M. Zunti","guid":"b831f476-0b95-4ce2-a711-6e997c26836a","individualid":2011465,"phonetype1":"780-966-3336","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397082703","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/2011465.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Candice","lastname":"Zunti","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1513,"name":"David Centis","guid":"11570b5c-2a7d-4dbc-b6a4-6c4b90394883","individualid":1572525,"phonetype1":"780-970-0703","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://davidcentis.ca","websitetype2":"","websitetype3":"https://twitter.com/centissells?lang=en","websitetype4":"","websitetype5":"","email1":"397601911","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1572525.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Centis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1514,"name":"Megan L. Schwann","guid":"c39f77d6-d822-4ce6-ac01-d0125d536e5e","individualid":2004723,"phonetype1":"780-868-5945","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241830","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Megan","lastname":"Schwann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1515,"name":"Nusrat A. Akhtar","guid":"a928833b-c1d5-496d-a096-f41c5f10d22a","individualid":1502519,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398452267","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nusrat","lastname":"Akhtar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1516,"name":"Ron J. Schuster","guid":"27617d27-079e-4d7f-bedf-b9006c0587a6","individualid":1479238,"phonetype1":"780-975-5585","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://homesofedmonton.net","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400458822","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479238.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Schuster","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1517,"name":"Sheri D. Kowalchuk","guid":"7a7760e2-2b3a-4d46-a540-abf75d2f2116","individualid":1834050,"phonetype1":"780-709-2776","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.sherikowalchuk.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113000","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sheri","lastname":"Kowalchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1518,"name":"Melody M. Wilson","guid":"7b43d31f-f1b5-45f0-8f93-12ace78cd0df","individualid":1821983,"phonetype1":"780-945-7821","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.relife.ca","websitetype2":"https://www.facebook.com/edmontonhouses","websitetype3":"https://ca.linkedin.com/in/edmontonhouses","websitetype4":"https://twitter.com/relifeteam","websitetype5":"","email1":"396121162","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Melody","lastname":"Wilson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1519,"name":"Howard L. Sinclair","guid":"8b5df42a-8f37-45e2-b4e3-25c014af902a","individualid":1479303,"phonetype1":"780-919-8100","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113649","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Howard","lastname":"Sinclair","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1520,"name":"Shannon K. Bailer","guid":"e1f8bcd0-533e-4212-b9db-6c3b42014a94","individualid":1988321,"phonetype1":"780-361-5541","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.shannonsrealestatesales.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807787","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shannon","lastname":"Bailer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1521,"name":"Bohdan W. Uszkalo","guid":"5fb7957a-db17-40fb-b157-a3b6e5170906","individualid":1479564,"phonetype1":"780-719-5111","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.boknowsrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109511","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bohdan","lastname":"Uszkalo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:18","updated_at":"2017-08-11 00:13:18"},{"id":1522,"name":"Rachel S T Fung","guid":"c1f7ba6a-4dc0-45cb-b67b-81da334958a5","individualid":1881473,"phonetype1":"780-993-3864","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.rachelfung.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/rachel-fung-3960334b/","websitetype4":"","websitetype5":"","email1":"398143820","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1881473.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rachel","lastname":"Fung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1523,"name":"Valerie P. Faucon","guid":"5b3dbc2e-3389-472c-b593-8a484edd41bf","individualid":1945910,"phonetype1":"780-952-7927","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.homewithval.com","websitetype2":"https://www.facebook.com/ValerieFauconRealtor/","websitetype3":"https://www.linkedin.com/in/valerie-faucon-744b0364/","websitetype4":"https://twitter.com/valeriefaucon","websitetype5":"","email1":"398265590","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1945910.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Valerie","lastname":"Faucon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1524,"name":"Trevor A. Wilson","guid":"3d69bd24-f783-4095-9d15-5b30a4aa228d","individualid":1900308,"phonetype1":"780-908-9791","phonetype2":"","phonetype3":"","phonetype4":"780-569-3089","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110759","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trevor","lastname":"Wilson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1525,"name":"Lorraine M. Williams","guid":"0fcc4df6-97ec-42a2-a7a8-8dc3d920935c","individualid":1487823,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.williamsrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112686","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lorraine","lastname":"Williams","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1526,"name":"Vic S. Mutti","guid":"3ceead99-024c-4451-84e3-470b74565410","individualid":1998269,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.vicmutti.ca","websitetype2":"https://www.facebook.com/VicMutti/","websitetype3":"https://www.linkedin.com/in/vickmutti/","websitetype4":"","websitetype5":"","email1":"401635065","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1280659.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Vic","lastname":"Mutti","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1527,"name":"Frank Quartel","guid":"07de7401-b678-4e23-8daf-efcbea79af35","individualid":1479055,"phonetype1":"780-909-1940","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.frankquartel.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268728","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1095463.gif","position":"Associate","permitfreetextemail":0,"firstname":"Frank","lastname":"Quartel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1528,"name":"Rashmeet S. Gill","guid":"fb21326d-a658-4aac-8b90-d73bc360ea23","individualid":1646967,"phonetype1":"780-938-7653","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108868","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rashmeet","lastname":"Gill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1529,"name":"Bradley S. Ward","guid":"989cb3cf-f85e-4a7e-a46a-84e49301b94a","individualid":1974360,"phonetype1":"780-940-8378","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://brad-ward.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124874","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bradley","lastname":"Ward","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1530,"name":"John Anderson","guid":"58cfe193-261b-457b-afd3-a6f0136404f2","individualid":1477260,"phonetype1":"780-903-6040","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.john-anderson.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110150","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Anderson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1531,"name":"Brent M. Wartenbe","guid":"ad570e84-fc56-4eb3-adc0-009162c32213","individualid":1812244,"phonetype1":"780-439-9818","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109288","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"Wartenbe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1532,"name":"Jason E. Gacek","guid":"4cf33a68-39be-41eb-9c83-05441d8d9888","individualid":1477965,"phonetype1":"780-709-1582","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.jasongacek.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112937","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Gacek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1533,"name":"Yaz H. Nazarali","guid":"4656259f-d8da-434d-a090-f96d86b34558","individualid":1504002,"phonetype1":"780-238-8333","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.propertyadvisors.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829229","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Yaz","lastname":"Nazarali","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1534,"name":"Amandeep Chohan","guid":"5703de72-b0b7-4b33-b6f0-ee67dfbebc8d","individualid":1759448,"phonetype1":"780-994-1728","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398759848","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amandeep","lastname":"Chohan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1535,"name":"Kristine Trajano","guid":"ec5f4bb6-0005-4eb5-98be-b0222cf77192","individualid":1619827,"phonetype1":"780-483-0601","phonetype2":"","phonetype3":"","phonetype4":"780-484-9558","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"http://www.linkedin.com/in/kris-trajano-526a3720","websitetype4":"","websitetype5":"","email1":"400832840","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kristine","lastname":"Trajano","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1536,"name":"Amandeep S. Dhanju","guid":"25c74d32-c2fa-49ab-abc6-7433b4dc002b","individualid":1599362,"phonetype1":"780-966-9046","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.amandhanju.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398478921","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amandeep","lastname":"Dhanju","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:19","updated_at":"2017-08-11 00:13:19"},{"id":1537,"name":"Cameron W. Melville","guid":"81063623-dadb-4c60-b2d8-ebf100f88535","individualid":1999778,"phonetype1":"780-721-6523","phonetype2":"","phonetype3":"","phonetype4":"780-939-3116","phonetype5":"","websitetype1":"http://cmelville.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116262","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1999778.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cameron","lastname":"Melville","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1538,"name":"Ali A. Merchant","guid":"62bc0ae4-86a5-42ab-b459-7beb7a748df5","individualid":1688365,"phonetype1":"780-271-1213","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.alimerchant.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124974","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ali","lastname":"Merchant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1539,"name":"Treena L. Michayluk","guid":"0890ecb4-4b42-44a3-b04f-d67e14c770f7","individualid":1886506,"phonetype1":"780-456-5656","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.therealestatetree.ca","websitetype2":"https://www.facebook.com/TheRealEstateTree/?ref=bookmarks","websitetype3":"https://www.linkedin.com/in/treemichayluktherealestatetree?trk=hp-identity-name","websitetype4":"","websitetype5":"","email1":"396113216","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1886506.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Treena","lastname":"Michayluk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1540,"name":"Mary T. Foss","guid":"fbb960e8-d3e0-4174-bf0d-6515dfc8aa85","individualid":1906762,"phonetype1":"780-220-1521","phonetype2":"","phonetype3":"","phonetype4":"866-832-5452","phonetype5":"","websitetype1":"http://www.lacsteannerealestate.com","websitetype2":"https://www.facebook.com/lacsteannerealestate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400279413","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mary","lastname":"Foss","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1541,"name":"Shandrie E. Lewis","guid":"ff11c45c-30a5-46df-9f3a-a686073cbf5a","individualid":1601513,"phonetype1":"780-982-3849","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112725","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1601513.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shandrie","lastname":"Lewis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1542,"name":"Jessica D. Eagleson","guid":"dff21a27-d03f-4965-a2da-bd1a4fbce751","individualid":2025888,"phonetype1":"780-218-7730","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.yegsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398478999","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jessica","lastname":"Eagleson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1543,"name":"Jason Ammar","guid":"f97293ae-88ac-40e6-8e90-aa594ecadc9f","individualid":1875489,"phonetype1":"780-473-2589","phonetype2":"","phonetype3":"","phonetype4":"780-458-1515","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119322","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Ammar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1544,"name":"Richard S. Widynowski","guid":"c11181e5-5ee7-4592-902e-81dde2257101","individualid":1479671,"phonetype1":"780-233-7424","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122573","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479671.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Widynowski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1545,"name":"Pennie J. Adamson","guid":"eef191fb-ccde-4801-9977-43ad24dad58b","individualid":1477232,"phonetype1":"780-721-2023","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.pennieadamson.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114355","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Pennie","lastname":"Adamson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1546,"name":"Maroun Estephan","guid":"e8897a2b-81a7-473c-a6d5-836bf12f788f","individualid":1986821,"phonetype1":"780-903-9293","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.myhomeforsale.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782258","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Maroun","lastname":"Estephan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1547,"name":"Leanna D. Martens","guid":"2020bbc9-bc71-4f1a-a538-00fc28bd2cae","individualid":1987542,"phonetype1":"780-887-3488","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"http://www.SearchEdmontonHome.com","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/leanna_martens","websitetype5":"","email1":"398881351","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leanna","lastname":"Martens","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1548,"name":"Tatiana Boitchenko","guid":"5f02935c-09a2-4ab7-8507-fa31bb1b048e","individualid":1768219,"phonetype1":"780-966-4924","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602192","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tatiana","lastname":"Boitchenko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1549,"name":"Sheena M. Millard","guid":"325ca142-9f2f-4942-bb4e-80d59c5f1843","individualid":1898444,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.smrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109706","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1898444.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sheena","lastname":"Millard","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1550,"name":"David McClean","guid":"32a455b0-e64a-4c5e-a883-74bfa7b5ec97","individualid":1991717,"phonetype1":"780-691-3014","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"http://davemcclean.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115437","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"McClean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1551,"name":"Paul E. McPhail","guid":"8fded61f-964b-4372-bd5a-9a21fd58733d","individualid":1478732,"phonetype1":"780-490-5006","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.paulmcphail.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361218","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"McPhail","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1552,"name":"Robert D. Parsons","guid":"d0795c67-cb60-44d3-9dfa-0ea6ec1e7ff8","individualid":1478957,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.robandjune.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733427","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011258.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Parsons","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1553,"name":"June M. Fournel","guid":"11e228e1-c394-4f2d-b2d8-447a1bcf5039","individualid":1477935,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.robandjune.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733447","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011267.jpg","position":"Associate","permitfreetextemail":0,"firstname":"June","lastname":"Fournel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1554,"name":"Ron J. Vivian","guid":"2e214ad5-993f-4152-8968-8257728c4cd4","individualid":1479609,"phonetype1":"780-945-3535","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110450","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479609.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Vivian","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1555,"name":"Paul V. Lima","guid":"535e91f5-78f1-4a13-ae0e-a313638e3499","individualid":2024402,"phonetype1":"780-932-7557","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396805795","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Lima","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1556,"name":"Mark D. Radloff","guid":"2f84df89-6796-4355-ae26-cb7c2d00073a","individualid":1901107,"phonetype1":"780-719-5538","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.markradloff.com/","websitetype2":"https://www.facebook.com/MarkRadloffRealEstate/","websitetype3":"https://www.linkedin.com/in/mark-radloff-416b9b27/","websitetype4":"https://twitter.com/MarkRadloff","websitetype5":"","email1":"398759883","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1901107.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Radloff","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1557,"name":"Derek J. McCardell","guid":"20031d47-b4de-4bbc-aff6-c58f311a9c07","individualid":1478689,"phonetype1":"780-945-7653","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"http://edmontonrealeestatewizard.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111108","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Derek","lastname":"McCardell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1558,"name":"Susan Carson","guid":"e6ae48b6-b1b3-42af-b015-2027a89debc5","individualid":1886219,"phonetype1":"780-915-3821","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/TheRealtorSusan/","websitetype3":"","websitetype4":"https://twitter.com/TheRealtorSusan","websitetype5":"","email1":"400999211","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1886219.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Susan","lastname":"Carson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1559,"name":"Katherine Zarembski","guid":"9f51c89e-d5d6-40ec-a1ee-c81c16e3aeac","individualid":1773628,"phonetype1":"780-964-9948","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602211","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Katherine","lastname":"Zarembski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:20","updated_at":"2017-08-11 00:13:20"},{"id":1560,"name":"Jaz S. Sandhu","guid":"b0c372fc-c7fd-4952-bd9f-8c6385a34409","individualid":1625634,"phonetype1":"780-970-0810","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.jazsandhu.ca","websitetype2":"https://www.facebook.com","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838933","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jaz","lastname":"Sandhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1561,"name":"Shelley D. Dolen","guid":"6dbb9729-b084-4c2d-ba44-eb62ce37584e","individualid":1625198,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121118","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shelley","lastname":"Dolen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1562,"name":"Mary Lynn Meiklejohn","guid":"25423d07-bf81-4483-88c4-3e8b4fe320e1","individualid":1478745,"phonetype1":"780-886-6279","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://marylynnmeiklejohn.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112891","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mary Lynn","lastname":"Meiklejohn","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1563,"name":"Trent Stanners","guid":"adb07c23-1185-499a-8e30-c942103b9791","individualid":1661427,"phonetype1":"780-498-1097","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://trentstanners.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115291","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trent","lastname":"Stanners","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1564,"name":"John M. Pittet","guid":"069a5ccf-67c9-4edc-9d18-331df83c3944","individualid":1479004,"phonetype1":"780-953-9208","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.jpittet.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115506","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Pittet","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1565,"name":"Thomas J. Lowe","guid":"2c8f1557-a4b1-4932-b2ca-74cd6ab77fd0","individualid":1947182,"phonetype1":"780-966-3234","phonetype2":"","phonetype3":"","phonetype4":"780-998-7961","phonetype5":"","websitetype1":"http://www.tomlowe.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120243","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Thomas","lastname":"Lowe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1566,"name":"Arnold Z. Babiy","guid":"38af8c7f-5685-4b8b-aa55-f0ac8680bbc8","individualid":1591848,"phonetype1":"780-994-7565","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241765","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1154269.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Arnold","lastname":"Babiy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1567,"name":"Aleesha A. Duarte","guid":"c2930767-5443-4c44-8731-d06161e5ab0c","individualid":1903062,"phonetype1":"780-909-2390","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109716","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Aleesha","lastname":"Duarte","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1568,"name":"Sharon A. Beaudry","guid":"7218cb34-f8d0-458b-99b2-bf306274480f","individualid":1477352,"phonetype1":"780-504-8534","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.sharonbeaudry.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122163","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sharon","lastname":"Beaudry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1569,"name":"Denis M. Landry","guid":"a5bf2043-34c0-472f-9bcd-81481d1e998c","individualid":1845154,"phonetype1":"780-350-9999","phonetype2":"","phonetype3":"","phonetype4":"888-693-2314","phonetype5":"","websitetype1":"http://www.townandcountryrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115789","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1845154.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Denis","lastname":"Landry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1570,"name":"Leah-Mel B. Icalla","guid":"64698c7a-5047-4892-a7a9-c2e695686208","individualid":1994086,"phonetype1":"780-863-3870","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.polarissells.com/agents/Leah-Icalla","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602888","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leah-Mel","lastname":"Icalla","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1571,"name":"Kellie M. Simpatico","guid":"640f016f-273d-41ae-ba44-e8bb8c6a9c29","individualid":1913659,"phonetype1":"780-951-7334","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"http://www.bowdensimpatico.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969306","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1913659.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kellie","lastname":"Simpatico","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1572,"name":"Randa R. Baba","guid":"3473d290-5e8f-4af6-b253-db8787af22ad","individualid":1477297,"phonetype1":"780-951-7139","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119485","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Randa","lastname":"Baba","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1573,"name":"Bashar Ramahi","guid":"d081cc94-c232-41d5-9b5f-1289c882a12d","individualid":1559464,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-406-8777","phonetype5":"","websitetype1":"http://www.teamramahi.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397340927","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1559464.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bashar","lastname":"Ramahi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1574,"name":"Jordan-Kane E. Ryan","guid":"748fa821-9a3f-479f-9f53-9191ae15c6d9","individualid":1638128,"phonetype1":"780-221-8817","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115767","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jordan-Kane","lastname":"Ryan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1575,"name":"Jeff T. Morgan","guid":"94712bd3-d2a5-4fcb-afd7-48e9b82cd0ea","individualid":1478810,"phonetype1":"780-998-7801","phonetype2":"","phonetype3":"","phonetype4":"780-998-7400","phonetype5":"","websitetype1":"http://www.jeffmorgan.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/jeff-morgan-1a246232/","websitetype4":"https://twitter.com/FtSkRealtor","websitetype5":"","email1":"398733503","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478810.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jeff","lastname":"Morgan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1576,"name":"Val Read","guid":"f64c990d-52c1-47b7-90d4-c25afd7eb7f5","individualid":1533168,"phonetype1":"780-499-7295","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.valread.com","websitetype2":"https://www.facebook.com/ValReadRealtorCra/","websitetype3":"https://ca.linkedin.com/in/val-read-56625b16","websitetype4":"https://twitter.com/valreadelite?lang=en","websitetype5":"","email1":"398661901","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Val","lastname":"Read","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1577,"name":"Gillian H. Stickney","guid":"f9712bc6-cb8e-446f-ac84-8febbde92a5e","individualid":1479405,"phonetype1":"780-918-5699","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.gillianismyagent.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401212475","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479405.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Gillian","lastname":"Stickney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1578,"name":"Hyun Biagi","guid":"88f1e83d-e867-4e13-a68d-1b4cdf3a9319","individualid":1858515,"phonetype1":"780-996-3836","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://hyunbiagi.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812123","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Hyun","lastname":"Biagi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1579,"name":"Kenneth H. Foster","guid":"30408271-69ef-42b8-b1a8-f9c4fbf4019d","individualid":1526388,"phonetype1":"780-951-0440","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.KenFoster.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398908864","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kenneth","lastname":"Foster","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1580,"name":"Kathy A. Engel","guid":"972260ef-9698-475d-8f61-1d3a7e83122a","individualid":1481827,"phonetype1":"780-235-4663","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121505","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1132572.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kathy","lastname":"Engel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:21","updated_at":"2017-08-11 00:13:21"},{"id":1581,"name":"Darci A. Heintz","guid":"b1036952-a22c-4fbf-957f-2461b5e35a3e","individualid":1599188,"phonetype1":"780-913-9524","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.darcitalksrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398749703","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1157588.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Darci","lastname":"Heintz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1582,"name":"Matthew J. Labas","guid":"e280250f-1394-4b48-b874-cbb4e1272a4b","individualid":2014369,"phonetype1":"780-819-2615","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117211","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matthew","lastname":"Labas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1583,"name":"James M. Osatiuk","guid":"46e23228-c46d-4f85-86dd-72b07297b51a","individualid":1720983,"phonetype1":"780-910-5226","phonetype2":"","phonetype3":"","phonetype4":"780-401-3463","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110985","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"James","lastname":"Osatiuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1584,"name":"Dan T. Kurney","guid":"d72b7588-5af7-444c-ae2c-7a66172f5cb9","individualid":1478438,"phonetype1":"780-490-5006","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.dankurney.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360862","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dan","lastname":"Kurney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1585,"name":"Anu Khullar","guid":"4907eb55-a1fd-4336-a378-68dc4ca5c35a","individualid":1478346,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.preferredgroup.ca/featured_listings.html","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117917","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anu","lastname":"Khullar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1586,"name":"Sukhi S. Thind","guid":"a75b9b16-0e29-472c-9bf4-4b2f9ffe097d","individualid":1479484,"phonetype1":"780-710-1821","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.sukhithind.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115196","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sukhi","lastname":"Thind","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1587,"name":"Karin Wollis","guid":"82a5d8b5-3f9c-45bd-b4e7-73e902ba1ad4","individualid":1479711,"phonetype1":"780-719-9896","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.karinwollis.com","websitetype2":"https://www.facebook.com/Karin-Wollis-Realty-Executives-Masters-236713779806817/","websitetype3":"https://www.linkedin.com/in/karin-wollis-7a091126/","websitetype4":"https://twitter.com/KarinWollis","websitetype5":"","email1":"397601146","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479711.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karin","lastname":"Wollis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1588,"name":"Megan E. Wagner","guid":"e0d067d9-c76f-4ef1-885b-1b3681fd9e28","individualid":1942435,"phonetype1":"780-264-3787","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.kennedyrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109738","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Megan","lastname":"Wagner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:22","updated_at":"2017-08-11 00:13:22"},{"id":1589,"name":"Ramandeep S. Thind","guid":"78741aa4-8445-488d-a127-d4ae2665c803","individualid":1619826,"phonetype1":"780-616-1008","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601988","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ramandeep","lastname":"Thind","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:23","updated_at":"2017-08-11 00:13:23"},{"id":1590,"name":"Rob Friele","guid":"57a34e37-0517-4a01-a73a-23b02540168b","individualid":1477949,"phonetype1":"780-970-3657","phonetype2":"","phonetype3":"","phonetype4":"780-437-5321","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113049","email2":"","email3":"","email4":"","photo":"","position":"Office Manager","permitfreetextemail":0,"firstname":"Rob","lastname":"Friele","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:23","updated_at":"2017-08-11 00:13:23"},{"id":1591,"name":"Marvin M. Maharaj","guid":"0e64fa53-bf75-4931-9ddb-94e48e7cf1ae","individualid":2000469,"phonetype1":"780-995-5523","phonetype2":"","phonetype3":"","phonetype4":"780-423-5501","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397267595","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marvin","lastname":"Maharaj","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:23","updated_at":"2017-08-11 00:13:23"},{"id":1592,"name":"Justin J. Bertok","guid":"fe8bbebc-a0e5-4ba6-87d2-5d4bb6358144","individualid":1997286,"phonetype1":"780-905-5942","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116019","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Justin","lastname":"Bertok","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:23","updated_at":"2017-08-11 00:13:23"},{"id":1593,"name":"Edward J. Lastiwka","guid":"1aa72499-9419-45eb-8243-54fedc302887","individualid":1478479,"phonetype1":"780-446-3800","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.EdsHomepage.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733364","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011896.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Edward","lastname":"Lastiwka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:23","updated_at":"2017-08-11 00:13:23"},{"id":1594,"name":"Conroy Ip","guid":"c435f5cd-231c-4d82-8c14-033be54334ce","individualid":1898731,"phonetype1":"780-904-8388","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.conroyip.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602379","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Conroy","lastname":"Ip","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1595,"name":"Cindy M. Cook","guid":"9dfc14ac-d294-46ef-8af6-7ebc691f43df","individualid":1738827,"phonetype1":"780-441-1086","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.cindycook.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398707387","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cindy","lastname":"Cook","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1596,"name":"William Senchuk","guid":"f9b2778c-d33a-474d-a9b6-4d2f4502d949","individualid":2032131,"phonetype1":"780-996-2276","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682113","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"William","lastname":"Senchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1597,"name":"Cam Teel","guid":"17078ede-2ae5-46eb-a552-e27c268eba7d","individualid":1525803,"phonetype1":"780-238-4444","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121063","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cam","lastname":"Teel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1598,"name":"Antony Bernadou","guid":"72fa44b4-1c43-4055-b5b0-e59822b2742b","individualid":2032481,"phonetype1":"780-782-0509","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682153","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Antony","lastname":"Bernadou","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1599,"name":"Robin V. Hage","guid":"56ef3cb3-50fd-4a74-925e-f821971cc87c","individualid":1478088,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124249","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robin","lastname":"Hage","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1600,"name":"Brian C. Macdonald","guid":"b1219396-9e05-4e32-bcd8-092fe42ac7e9","individualid":1478592,"phonetype1":"780-453-5054","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688309","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010231.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Macdonald","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1601,"name":"Deborah L. Gouin","guid":"fe0c4c90-ca9b-4d50-b3ea-14f892ba1870","individualid":1478037,"phonetype1":"780-497-0531","phonetype2":"","phonetype3":"","phonetype4":"780-963-0197","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114898","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478037.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Deborah","lastname":"Gouin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1602,"name":"Fereda Rahim","guid":"1481f531-4003-448c-83de-40dd35295842","individualid":1644120,"phonetype1":"780-994-4396","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.feredarahim.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119252","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1644120.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Fereda","lastname":"Rahim","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1603,"name":"Lynne P. Pipella","guid":"1fed8714-5877-4caa-8690-71c12e04eb33","individualid":1479002,"phonetype1":"780-718-7999","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.PerfectHomesEdmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398216754","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479002.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lynne","lastname":"Pipella","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1604,"name":"David Pipella","guid":"1aeb8084-887f-4b4d-a10c-5bd587077cca","individualid":2033018,"phonetype1":"780-907-0501","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400656431","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Pipella","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1605,"name":"Brad S. Pipella","guid":"0175c9f0-3db7-4749-a8e2-e499e43ee4a1","individualid":1999281,"phonetype1":"780-909-4027","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://perfecthomesedmonton.com","websitetype2":"https://www.facebook.com/PerfectHomesEdmonton/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116209","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1999281.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brad","lastname":"Pipella","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1606,"name":"Viktoriya V. Finkbeiner","guid":"eaafb214-aa54-442c-8b82-1527c1c28479","individualid":1724332,"phonetype1":"780-994-9998","phonetype2":"","phonetype3":"","phonetype4":"780-401-3446","phonetype5":"","websitetype1":"http://www.sellerinvite.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112734","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1724332.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Viktoriya","lastname":"Finkbeiner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:24","updated_at":"2017-08-11 00:13:24"},{"id":1607,"name":"David W. Quaschnick","guid":"874f8d80-6dad-494b-985e-acd12f8cabff","individualid":1602266,"phonetype1":"780-242-7253","phonetype2":"","phonetype3":"","phonetype4":"888-322-5753","phonetype5":"","websitetype1":"http://www.dqrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117310","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1602266.jpg","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Quaschnick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1608,"name":"Val Toffoli","guid":"d9994781-4310-4e11-b95c-18add2c208a7","individualid":1479516,"phonetype1":"780-707-9395","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.valtoffoli.com","websitetype2":"https://www.facebook.com/val.toffoli","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398568257","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Val","lastname":"Toffoli","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1609,"name":"Chloe A. Pleckaitis","guid":"09381964-7a35-46bf-a6f2-065c879ff5bf","individualid":1987371,"phonetype1":"780-983-0779","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.chloesells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398054798","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chloe","lastname":"Pleckaitis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1610,"name":"Carol L. Selinger","guid":"b9206f36-77dc-437f-a90a-0d3dcf8a34e0","individualid":1479254,"phonetype1":"780-993-5634","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.royallepage.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110822","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011889.gif","position":"Associate","permitfreetextemail":0,"firstname":"Carol","lastname":"Selinger","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1611,"name":"Jason G. Willes","guid":"9bacc250-219f-454d-8680-11a5cde1af6b","individualid":1479682,"phonetype1":"780-446-6473","phonetype2":"","phonetype3":"","phonetype4":"780-438-7025","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109204","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Willes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1612,"name":"Danielle L. St Thomas","guid":"f44238f4-e1b8-496f-a025-8acc249ba433","individualid":1684974,"phonetype1":"780-242-5934","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110977","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Danielle","lastname":"St Thomas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1613,"name":"Claudia S. Fischer","guid":"a08202d2-accd-4077-bdb1-c136f07b0294","individualid":1477910,"phonetype1":"780-455-0777","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361198","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Claudia","lastname":"Fischer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1614,"name":"Dave J. Ryan","guid":"daf4929d-82d9-40a1-9cda-30ed9664cd98","individualid":1681767,"phonetype1":"780-660-3283","phonetype2":"","phonetype3":"","phonetype4":"780-963-5299","phonetype5":"","websitetype1":"http://www.daveryanrealestate.ca","websitetype2":"https://www.facebook.com/dave.ryan.338658","websitetype3":"","websitetype4":"https://twitter.com/DaveRyanRealtor","websitetype5":"","email1":"396920914","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Ryan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1615,"name":"John T. Ryan","guid":"2c27d58e-86b1-4805-b5ec-b94d6d7ff8ea","individualid":1927100,"phonetype1":"780-995-4232","phonetype2":"","phonetype3":"","phonetype4":"780-963-5299","phonetype5":"","websitetype1":"http://www.johnryanrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123013","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Ryan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1616,"name":"Terry J. Halter","guid":"bb47b928-875e-4e34-8a5d-c65a524ba348","individualid":1478098,"phonetype1":"780-467-7334","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"http://www.terryhalter.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398107837","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478098.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Terry","lastname":"Halter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1617,"name":"Gurinder Grewal","guid":"b196dcc8-63bd-48b7-9754-50873aa1e306","individualid":1478056,"phonetype1":"780-953-7742","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108823","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gurinder","lastname":"Grewal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1618,"name":"Wayne A. Gatza","guid":"7a7eb702-a120-489e-b7bf-f27ef647d1cc","individualid":1754346,"phonetype1":"780-399-8912","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108889","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1754346.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Wayne","lastname":"Gatza","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1619,"name":"Barb Howey","guid":"1769affc-ad0e-4213-8e5b-c64ed7f56103","individualid":1478211,"phonetype1":"780-361-7882","phonetype2":"","phonetype3":"","phonetype4":"780-352-1688","phonetype5":"","websitetype1":"http://agents.royallepage.ca/barbarahowey","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125119","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478211.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Barb","lastname":"Howey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1620,"name":"Ryan I. Howey","guid":"81a88393-6e44-4fc2-afd2-cef19eaeb742","individualid":1478212,"phonetype1":"780-361-8704","phonetype2":"","phonetype3":"","phonetype4":"780-352-1688","phonetype5":"","websitetype1":"http://ryanhowey.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109030","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478212.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"Howey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1621,"name":"Sasa Livancic","guid":"67f8ae56-6697-49d7-96ed-f6bd1d7822a0","individualid":1899739,"phonetype1":"780-709-4525","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.edmontonishome.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602389","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sasa","lastname":"Livancic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1622,"name":"Christy I. Van Dyke","guid":"abecf53a-7720-4eaf-a565-fb863525261c","individualid":1894048,"phonetype1":"780-904-2544","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109300","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christy","lastname":"Van Dyke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1623,"name":"Michele L. Watts-Aylwin","guid":"b45ffe8f-b801-426d-ad83-7f416c9bf551","individualid":1525805,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.wattsells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122577","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1525805.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Michele","lastname":"Watts-Aylwin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1624,"name":"Michael Soete","guid":"c5f54bda-b8c2-4542-b64b-d7337bef9a5b","individualid":1985241,"phonetype1":"780-907-8803","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114301","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Soete","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1625,"name":"Fred B. Woldemariam","guid":"1b7635fe-d362-4505-83d3-29311d5ba597","individualid":1528966,"phonetype1":"780-297-7325","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://FIREW.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115246","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Fred","lastname":"Woldemariam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1626,"name":"Cecile J. Biron","guid":"584b860f-501f-4894-9fa5-3157a93baf05","individualid":1477403,"phonetype1":"780-915-9224","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.remaxcecile.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601477","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477403.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cecile","lastname":"Biron","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:25","updated_at":"2017-08-11 00:13:25"},{"id":1627,"name":"Roxane L. Tiessen","guid":"624fdb86-a307-4b42-9a59-eb8238a1d687","individualid":1994087,"phonetype1":"780-945-6475","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123992","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1994087.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Roxane","lastname":"Tiessen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1628,"name":"Zhongjia Wu","guid":"27b7c658-57dc-4c28-8b50-f2078a94b0f3","individualid":1910088,"phonetype1":"780-708-2912","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.century21.ca/vivian.wu","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114955","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Zhongjia","lastname":"Wu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1629,"name":"Daniel S. Harding","guid":"8a2b24db-26b0-4b30-b14b-aa97227984b8","individualid":1478115,"phonetype1":"780-467-7334","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120999","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1112049.gif","position":"Associate","permitfreetextemail":0,"firstname":"Daniel","lastname":"Harding","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1630,"name":"Kelly J. Mahaffey","guid":"5a2c4ff5-7268-4f85-aec9-f7ad71d13ef6","individualid":1478625,"phonetype1":"780-951-6426","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109879","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Mahaffey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1631,"name":"Tom M. Kot","guid":"92bfc80d-327a-4eeb-b0f5-600fd52fc80b","individualid":1841007,"phonetype1":"780-901-8857","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://TomKot.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602254","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tom","lastname":"Kot","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1632,"name":"Kyle F. Vidic","guid":"afc521dd-b5a7-4307-8f49-a26263413cb7","individualid":1998346,"phonetype1":"780-966-8437","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116138","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kyle","lastname":"Vidic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1633,"name":"Dwayne H. Groome","guid":"00afc077-7dac-4c49-b01e-3f7e01fb3f6f","individualid":1987788,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.dwaynegroomeseminars.com","websitetype2":"https://www.facebook.com/dwaynegroomeseminars","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400999167","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1272038.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dwayne","lastname":"Groome","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1634,"name":"Cindy G. Jackson","guid":"5d297cfb-be1d-409d-9a26-29cf0b92df2c","individualid":1635690,"phonetype1":"780-278-7377","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.propertiesbycindy.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117320","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1163809.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cindy","lastname":"Jackson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1635,"name":"Sukhdev Agnihotri","guid":"5958f285-66a7-4b34-b9f9-bcb1adc93d8d","individualid":1904435,"phonetype1":"780-719-4999","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.daveagnihotri.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551405","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1219382.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sukhdev","lastname":"Agnihotri","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1636,"name":"Dave Tarrant","guid":"b78f236c-1053-49aa-97b1-2586fd765a49","individualid":1479455,"phonetype1":"780-718-2818","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.davetarrant.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268712","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Tarrant","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1637,"name":"Lorna J. Mutch","guid":"2514e8ee-f6e7-4777-b700-766b3ef09aa3","individualid":1998730,"phonetype1":"780-984-0078","phonetype2":"","phonetype3":"","phonetype4":"780-986-6662","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116194","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lorna","lastname":"Mutch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1638,"name":"Jashandeep S. Sidhu","guid":"f0eb50c7-b263-4834-acc1-d570ced3cdf1","individualid":1959520,"phonetype1":"780-905-8543","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602648","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jashandeep","lastname":"Sidhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1639,"name":"Robert C. Minogue","guid":"6dcd442b-284f-4de2-b1ab-7ed349377129","individualid":1529552,"phonetype1":"780-265-4663","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://houseforsaleedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400279398","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1529552.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Minogue","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1640,"name":"Craig M. Beattie","guid":"9cea6093-664e-4a9d-aefb-c29eea9592ae","individualid":1941889,"phonetype1":"780-953-7753","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113593","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Craig","lastname":"Beattie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1641,"name":"Abe Sleiman","guid":"9106b553-5add-4bd2-bc04-2d28a98627a7","individualid":1585383,"phonetype1":"780-709-3733","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://abesleiman.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122408","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Abe","lastname":"Sleiman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1642,"name":"Tanya M. LaRocque","guid":"98ac40c7-95eb-45c7-bd41-121c6ccb1aec","individualid":2007523,"phonetype1":"780-446-7623","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116770","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tanya","lastname":"LaRocque","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:26","updated_at":"2017-08-11 00:13:26"},{"id":1643,"name":"Christopher A. Lafrance","guid":"4530db0d-7ea7-4608-b16c-62cdc076d9cb","individualid":1977208,"phonetype1":"780-915-3575","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111684","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Christopher","lastname":"Lafrance","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1644,"name":"Donna M. Rawson","guid":"4d42b9f7-2899-4a4b-b566-4b6388c5adbc","individualid":1479080,"phonetype1":"780-699-3984","phonetype2":"","phonetype3":"","phonetype4":"780-439-9058","phonetype5":"","websitetype1":"http://www.mastersrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120317","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011720.gif","position":"Broker","permitfreetextemail":0,"firstname":"Donna","lastname":"Rawson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1645,"name":"Harold W. Burden","guid":"a18f41a1-d9d8-4e39-ab6a-223721c99687","individualid":1477518,"phonetype1":"780-463-7857","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110876","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Harold","lastname":"Burden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1646,"name":"Dave O. Schroder","guid":"4fdcb01b-110c-4f48-81f5-30c483331258","individualid":1479227,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.schroderteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398609990","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Schroder","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1647,"name":"Jordan D. Schroder","guid":"86dc1749-b6e3-400f-a267-b81294b13e74","individualid":1953980,"phonetype1":"780-906-3084","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123030","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jordan","lastname":"Schroder","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1648,"name":"Debbie A. Jeannotte","guid":"1a37b3d5-73a4-4ac6-b96d-d3bda86e14d9","individualid":1559983,"phonetype1":"780-221-9941","phonetype2":"","phonetype3":"","phonetype4":"780-481-3021","phonetype5":"","websitetype1":"http://www.kennedyrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123594","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Debbie","lastname":"Jeannotte","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1649,"name":"Margo K. Kaufmann","guid":"86c8fc59-39bb-49ac-a445-fe8b3fec5b19","individualid":2020956,"phonetype1":"780-952-2001","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120576","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Margo","lastname":"Kaufmann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1650,"name":"Debra A. Moon","guid":"0a4d6b86-eab0-415c-ae20-faabdc92fef6","individualid":1821982,"phonetype1":"780-399-9452","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.debmoon.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112612","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Debra","lastname":"Moon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1651,"name":"Melanie C. Boles","guid":"bf3f0779-516e-480f-9d70-a3f099056682","individualid":1477439,"phonetype1":"780-298-2564","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.melanieboles.com","websitetype2":"https://www.facebook.com/Melanie-Boles-REALTOR-REMAX-Real-Estate-Edmonton-81228902020/","websitetype3":"https://ca.linkedin.com/in/melanie-boles-9516a61a?","websitetype4":"https://twitter.com/MelanieBoles","websitetype5":"","email1":"396496094","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477439.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Melanie","lastname":"Boles","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1652,"name":"William Kot","guid":"32efc2c5-9995-4f1e-9577-325bfc21d943","individualid":1478395,"phonetype1":"780-982-6128","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"http://www.realtorbillkot.com","websitetype2":"https://www.facebook.com/bill.kot.3","websitetype3":"","websitetype4":"http://twitter.com/realtorbillkot","websitetype5":"","email1":"398707347","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"William","lastname":"Kot","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1653,"name":"Brent R. Anderson","guid":"6b6c1eae-0b78-4f00-abb3-628a69c3c6ff","individualid":1893488,"phonetype1":"780-691-3644","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.brentanderson.ca","websitetype2":"https://www.facebook.com/Brent-Anderson-Real-Estate-194651143878612/","websitetype3":"https://ca.linkedin.com/in/brent-anderson-2b0a175a","websitetype4":"","websitetype5":"","email1":"396732260","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1893488.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"Anderson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1654,"name":"Natasha S. Stenzel","guid":"8c05a78e-5059-48dc-8f97-b334d0bc544f","individualid":1479393,"phonetype1":"780-915-6840","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"https://www.linkedin.com/in/natasha-stenzel-bourbeau-mba-srs-abr-323a4218/","websitetype4":"","websitetype5":"","email1":"398807668","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479393.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Natasha","lastname":"Stenzel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1655,"name":"Juli M. Wenger","guid":"12cc766e-4d77-488d-bc7a-31eee01dedad","individualid":1923815,"phonetype1":"780-222-9908","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://soldedmonton.com","websitetype2":"https://www.facebook.com/JuliWengerRemax/","websitetype3":"https://ca.linkedin.com/in/juli-wenger-a230742a","websitetype4":"https://twitter.com/JuliWenger","websitetype5":"","email1":"402352072","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1228228.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Juli","lastname":"Wenger","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1656,"name":"Ralph D. Henze","guid":"7c45ecf4-e834-44f0-89fd-5e25ea3cc99b","individualid":1536505,"phonetype1":"780-918-7885","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.ralphhenzehomes.com","websitetype2":"https://www.facebook.com/RalphHenzeHomes/","websitetype3":"","websitetype4":"https://twitter.com/RALPHatREMAX","websitetype5":"","email1":"398661934","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1536505.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ralph","lastname":"Henze","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:27","updated_at":"2017-08-11 00:13:27"},{"id":1657,"name":"Tammy S. Pope","guid":"99efce2a-025f-4d9b-b537-65c83dfc8e5d","individualid":2016996,"phonetype1":"780-236-2889","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398387400","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tammy","lastname":"Pope","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1658,"name":"Gillian C. Anderson","guid":"78559f47-1605-4589-9e32-a7ad15b2c358","individualid":1998162,"phonetype1":"780-483-4848","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602902","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gillian","lastname":"Anderson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1659,"name":"Glenda G. Kudryk","guid":"7250f221-d177-4026-b21e-27ab27231079","individualid":1478429,"phonetype1":"780-449-2800","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.nowrealestategroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117742","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Glenda","lastname":"Kudryk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1660,"name":"Taminder S. Sahota","guid":"ac75df40-d364-4dc5-8dc5-e66461e1d2a1","individualid":1998345,"phonetype1":"780-399-2040","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602919","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1280719.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Taminder","lastname":"Sahota","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1661,"name":"Joe Pelletier","guid":"77bb9ebf-1680-4447-af24-3cb5af221482","individualid":1820584,"phonetype1":"780-458-2589","phonetype2":"","phonetype3":"","phonetype4":"780-458-1515","phonetype5":"","websitetype1":"http://2buyandsell.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115611","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1820584.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Joe","lastname":"Pelletier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1662,"name":"Shawna F. Raven","guid":"f67b6c28-dac2-4d42-832c-ea16ded40c5c","individualid":1568783,"phonetype1":"780-974-9117","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.horsepowerranch.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114514","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1568783.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shawna","lastname":"Raven","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1663,"name":"Shaun Kelly","guid":"ae526f9c-5a87-439f-83c8-253035faa029","individualid":2030701,"phonetype1":"780-995-7942","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682001","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shaun","lastname":"Kelly","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1664,"name":"Shannon D. Enright","guid":"c2d2006f-93f7-4540-a26f-9c54f5870025","individualid":1734829,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.thepropertychick.ca","websitetype2":"http://www.facebook.com/The-Property-Chick-119475641904351/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733612","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1734829.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shannon","lastname":"Enright","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1665,"name":"Khaled El Khatib","guid":"4fcd6e69-bfb8-40d5-9a7c-11acae2dfd43","individualid":2017332,"phonetype1":"780-719-3804","phonetype2":"","phonetype3":"","phonetype4":"403-520-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602974","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Khaled","lastname":"El Khatib","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1666,"name":"Carlton I. Rose","guid":"3da372d2-b785-4815-bf82-4ed9131fffd2","individualid":2031948,"phonetype1":"587-991-4336","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.realtytorealitybycarl.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401321476","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1309305.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carlton","lastname":"Rose","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1667,"name":"Robert A. Halabi","guid":"32e7eb2d-c5c7-4d66-b976-0dbc837e3061","individualid":1880425,"phonetype1":"780-915-4939","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115336","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Halabi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1668,"name":"Elaine M. Woods","guid":"deba2cd3-9e2a-45a2-b523-5093f0cc86b4","individualid":1977146,"phonetype1":"780-242-1021","phonetype2":"","phonetype3":"","phonetype4":"780-432-6513","phonetype5":"","websitetype1":"http://www.elainewoods.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396620169","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Elaine","lastname":"Woods","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1669,"name":"Robert G. Biddlecombe","guid":"c637e1c0-08a7-4c1a-9409-4dc6afb901d9","individualid":1477394,"phonetype1":"780-720-8402","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.robsellsrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119381","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477394.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Biddlecombe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1670,"name":"Vikas Kwatra","guid":"8ff4df8f-933e-44b2-a791-a358f83ea1a0","individualid":1765809,"phonetype1":"780-450-8899","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400132576","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Vikas","lastname":"Kwatra","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1671,"name":"Kevin B. Doyle","guid":"9293bca4-bb36-4b2a-b9dc-79cda6bec77a","individualid":2019987,"phonetype1":"780-314-8001","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.relife.ca","websitetype2":"https://www.facebook.com/edmontonhouses/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400832965","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Doyle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:28","updated_at":"2017-08-11 00:13:28"},{"id":1672,"name":"Balkaran S. Sidhu","guid":"1220bde9-29fa-4c1f-b366-dcf032ce7bd2","individualid":1602910,"phonetype1":"780-951-9011","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120748","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1602910.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Balkaran","lastname":"Sidhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1673,"name":"Evgeny Fialkov","guid":"d67e7ac8-e6d0-454b-916b-97905eb5b87e","individualid":1646774,"phonetype1":"780-221-9739","phonetype2":"","phonetype3":"","phonetype4":"780-487-9738","phonetype5":"","websitetype1":"http://www.evgenyfialkov.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143788","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Evgeny","lastname":"Fialkov","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1674,"name":"Jordan J. Sabo","guid":"1782b0aa-f09a-4b9a-80c8-5df494bb74dc","individualid":1570304,"phonetype1":"780-265-0665","phonetype2":"","phonetype3":"","phonetype4":"780-463-7375","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400899814","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jordan","lastname":"Sabo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1675,"name":"Cathy E. Parsons","guid":"7d386c09-391b-4590-96ff-d89d06c74e74","individualid":2009936,"phonetype1":"587-986-0902","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116984","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cathy","lastname":"Parsons","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1676,"name":"Rose O. Joshua","guid":"a8a6ab8c-576b-4bd0-8f7d-3d3578e93cc7","individualid":1978833,"phonetype1":"780-680-1334","phonetype2":"","phonetype3":"","phonetype4":"780-756-9991","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400065147","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rose","lastname":"Joshua","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1677,"name":"Christian L. Currie","guid":"13e75666-0f53-413f-a19e-42f48f4b27a3","individualid":1565782,"phonetype1":"780-239-4878","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.chriscurrie.ca","websitetype2":"https://www.facebook.com/ChrisCurrieRealEstate/","websitetype3":"https://www.linkedin.com/in/chriscurriec21/","websitetype4":"https://twitter.com/chriscurriec21","websitetype5":"","email1":"399688532","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1565782.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christian","lastname":"Currie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1678,"name":"Laurie L. Blais","guid":"1950a78b-d650-4a0f-9d71-701e1d51b2dc","individualid":1477417,"phonetype1":"780-473-5914","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.laurieblais.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396707925","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011817.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Laurie","lastname":"Blais","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1679,"name":"Sandra A. Rudd","guid":"87640eb4-097b-453f-9343-a17e68ce4db6","individualid":1630437,"phonetype1":"780-298-6128","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.sandrarudd.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114553","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1630437.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sandra","lastname":"Rudd","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1680,"name":"Nancy D. Cleiren","guid":"eea720a1-0b56-4fb7-8615-fa911c3617a8","individualid":1534255,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.NancyCleiren.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400947458","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nancy","lastname":"Cleiren","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1681,"name":"Leah M. Cyr","guid":"3b52434f-74de-4dc1-9c66-80a6063aa8a2","individualid":2004522,"phonetype1":"780-964-5216","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116542","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leah","lastname":"Cyr","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1682,"name":"Deanna Zaramella","guid":"d8b6e7fe-ebda-4d5b-b1f4-9fe22d793d1c","individualid":1616136,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397638432","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Deanna","lastname":"Zaramella","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1683,"name":"Stephanie D. Wynnyk","guid":"60cc6ee6-18c3-4f3d-ac4e-38b69c8e6fd2","individualid":1504005,"phonetype1":"780-289-8955","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401801968","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1504005.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Stephanie","lastname":"Wynnyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1684,"name":"Alyesha Neufeld","guid":"57f1e391-a4c4-43eb-92f2-9223c1296717","individualid":1992372,"phonetype1":"780-920-1812","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.century21.ca/alyesha.neufeld","websitetype2":"http://m.facebook.com/alyesha.neufeldc21","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396283898","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1275681.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alyesha","lastname":"Neufeld","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1685,"name":"Brianna R. Warwick","guid":"effa0537-90b0-48dc-8fb0-719b8a09b98f","individualid":1975633,"phonetype1":"780-462-5000","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602751","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1975633.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brianna","lastname":"Warwick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1686,"name":"Ricky D. Hill","guid":"4fffd19e-6945-4afc-a6b5-94c9d657f7da","individualid":1856117,"phonetype1":"780-718-5608","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.rickyhillrealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396262005","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1856117.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ricky","lastname":"Hill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1687,"name":"Marcel J. de Moissac","guid":"71a7e9c0-0bc1-494a-9de4-1d64fa302b17","individualid":1987852,"phonetype1":"780-995-5282","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117669","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1987852.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marcel","lastname":"de Moissac","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1688,"name":"Karen L. Grummett","guid":"48962e47-3890-4471-b2a8-ea7e8a97b02f","individualid":1835608,"phonetype1":"780-990-9967","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://karengrummett.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401212503","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1835608.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Karen","lastname":"Grummett","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1689,"name":"Greg A. Dunham","guid":"10c0c33c-bc31-4fc4-ab29-9a687bd3a820","individualid":1477822,"phonetype1":"780-964-1469","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.encoresells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117949","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Greg","lastname":"Dunham","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1690,"name":"Peter Lukasiewicz","guid":"fcac343e-7a40-47bb-ad6c-e90095c3241d","individualid":1531615,"phonetype1":"780-904-4889","phonetype2":"","phonetype3":"","phonetype4":"587-523-8578","phonetype5":"","websitetype1":"http://www.thefoundryrealestateco.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601803","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1531615.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Lukasiewicz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:29","updated_at":"2017-08-11 00:13:29"},{"id":1691,"name":"Cyril Kaderabek","guid":"17a67925-e22c-459a-bb10-52302aaf628b","individualid":1899037,"phonetype1":"780-222-5111","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109378","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1216259.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cyril","lastname":"Kaderabek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1692,"name":"Brian Budnyk","guid":"3569f2d4-2aae-4ffe-b7af-e979c71830f3","individualid":2032212,"phonetype1":"780-903-8362","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.brianandmichellesell.com","websitetype2":"https://www.facebook.com/Brian-Michelle-Budnyk-Realty-Executives-Masters-155475787935441/","websitetype3":"https://www.linkedin.com/in/brian-budnyk-52926867/","websitetype4":"","websitetype5":"","email1":"400682120","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1310293.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Budnyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1693,"name":"Jay Feddema","guid":"53bc1d28-3025-44b7-8c87-10ee6962d67e","individualid":1477890,"phonetype1":"780-907-6966","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.jayfeddema.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688295","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jay","lastname":"Feddema","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1694,"name":"Angel C. Facundo","guid":"e804edde-51be-4852-a7a3-f1f0dd4036bb","individualid":1477881,"phonetype1":"780-443-1001","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601232","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Angel","lastname":"Facundo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1695,"name":"Shane A. Lassey","guid":"b8fd3616-1bfb-4e51-8875-728d6e8a0297","individualid":1908908,"phonetype1":"780-901-6822","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109720","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1221561.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shane","lastname":"Lassey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1696,"name":"Yanina C. Sokolowski","guid":"c4fba390-fdc1-444e-a757-43fe5f20f571","individualid":1570610,"phonetype1":"780-819-0556","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.yaninasokolowski.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402623580","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1151214.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Yanina","lastname":"Sokolowski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1697,"name":"Alanna Cannell","guid":"41ef7436-435d-4ceb-b65e-a0bc76dd4857","individualid":1567141,"phonetype1":"780-289-4013","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.alannacannell.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110513","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Alanna","lastname":"Cannell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1698,"name":"Joshua W. Grier","guid":"1b0b6e1c-d398-43e4-a187-24b9bb08b761","individualid":1997017,"phonetype1":"780-246-5412","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116004","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joshua","lastname":"Grier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1699,"name":"Jay Bedi","guid":"52e4ee54-c3e6-492c-82e3-72e815cf3b7b","individualid":1477355,"phonetype1":"780-993-5858","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601345","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477355.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jay","lastname":"Bedi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1700,"name":"Kyla L. Knight","guid":"e066075a-c7e6-4b58-bc73-6574392e17e0","individualid":1890715,"phonetype1":"780-999-0093","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.kylaknight.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782182","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1890715.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kyla","lastname":"Knight","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1701,"name":"Hugh Fraser","guid":"ca1fb071-7632-46ee-9ff1-a3a632b2b61b","individualid":1477942,"phonetype1":"780-499-0948","phonetype2":"","phonetype3":"","phonetype4":"780-458-6900","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119032","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Hugh","lastname":"Fraser","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1702,"name":"Ed Ammar","guid":"1b15c3a7-1472-40fc-ab20-c0d7c5aadc98","individualid":1741933,"phonetype1":"780-966-9494","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.arteamrealty.com/edammar/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114169","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1741933.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ed","lastname":"Ammar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1703,"name":"Jed J. Downie","guid":"6da94003-e01f-45b9-8b89-d7eb048ef90a","individualid":1747616,"phonetype1":"780-686-5533","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.jeddownie.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398577575","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1747616.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jed","lastname":"Downie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1704,"name":"Kim H. Goodwin","guid":"5d81a21e-27f3-48e9-a918-a224e43ca82e","individualid":1478025,"phonetype1":"780-233-7355","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.kimgoodwin.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118640","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kim","lastname":"Goodwin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:30","updated_at":"2017-08-11 00:13:30"},{"id":1705,"name":"Susan M. Swan","guid":"2d45072b-f00c-4e3b-8090-93ae7317dc16","individualid":2025889,"phonetype1":"780-464-4100","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782299","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Susan","lastname":"Swan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1706,"name":"Kevin J. Kinsella","guid":"c279ff66-9be5-4b18-9f55-b34768749895","individualid":1478357,"phonetype1":"780-721-6245","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://kinsellahome.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110625","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010313.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Kinsella","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1707,"name":"Tracy A. MacCosham","guid":"7f34aaa4-a123-4f01-8c25-c418d6207f28","individualid":1478591,"phonetype1":"780-483-1199","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.tracymaccosham.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109185","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tracy","lastname":"MacCosham","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1708,"name":"Jerry D. Willes","guid":"220fc9cd-b50b-4cf5-ac44-6e2e025f64fd","individualid":1479683,"phonetype1":"780-448-1222","phonetype2":"","phonetype3":"","phonetype4":"780-438-7025","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109799","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Jerry","lastname":"Willes","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1709,"name":"Wayne T. Bruce","guid":"3215a4a1-db70-4812-bb2c-79b72d0eb219","individualid":1790503,"phonetype1":"780-660-1140","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.waynebruce.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396169060","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wayne","lastname":"Bruce","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1710,"name":"Jawad M. Kahlon","guid":"d75cd463-8063-4bc5-a941-246cfe82cd31","individualid":1531693,"phonetype1":"780-708-5688","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.edmonton-homes-search.com/","websitetype2":"https://www.facebook.com/EdmontonHomesSearch/","websitetype3":"https://www.linkedin.com/in/jawad-kahlon-270a84a6","websitetype4":"https://twitter.com/jawadkahlon","websitetype5":"","email1":"397601814","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1142237.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jawad","lastname":"Kahlon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1711,"name":"Don L. Tomko","guid":"d90ec4a3-fd7d-495e-a243-c89534ce05de","individualid":1479517,"phonetype1":"780-995-3286","phonetype2":"","phonetype3":"","phonetype4":"780-439-9696","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120372","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1124706.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Don","lastname":"Tomko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1712,"name":"Janet E. Bossert","guid":"d910f401-e683-47ff-a3bb-56e63d9f3cf9","individualid":1477450,"phonetype1":"780-699-8800","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.edmontonlistings.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396193860","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010254.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Janet","lastname":"Bossert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1713,"name":"Rafik H. Berjak","guid":"bad62994-1e35-4686-8782-8493f094073c","individualid":2005817,"phonetype1":"780-990-9791","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://rafikrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116633","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rafik","lastname":"Berjak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1714,"name":"Mariola Walter","guid":"5ba44f1e-23c4-486f-a690-5d7d92f3661a","individualid":1479630,"phonetype1":"780-473-4000","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115642","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mariola","lastname":"Walter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1715,"name":"Simon D. Schellenberg","guid":"5972be9e-36ae-4add-ab11-7b4487fa2050","individualid":1985772,"phonetype1":"780-267-7412","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115052","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Simon","lastname":"Schellenberg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:31","updated_at":"2017-08-11 00:13:31"},{"id":1716,"name":"Borys S. Babski","guid":"cd56a6b7-55a4-40ee-9ff3-5dadd95cec93","individualid":1502232,"phonetype1":"780-292-3665","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119497","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Borys","lastname":"Babski","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1717,"name":"Cheryl L. McBride","guid":"b146daf8-d2fd-4764-ba71-9bf207b4a473","individualid":1851301,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.royallepage.ca/bestlocations","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121519","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"McBride","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1718,"name":"Catherine Ta","guid":"892eba5d-a0be-4fba-9b91-80abe0e938f2","individualid":1887065,"phonetype1":"780-710-8888","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.catherineta.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602268","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Catherine","lastname":"Ta","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1719,"name":"Conrad M. Langier","guid":"1a868563-666b-424f-ae92-8ef0da8e9ef7","individualid":1972142,"phonetype1":"780-937-2730","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123349","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1972142.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Conrad","lastname":"Langier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1720,"name":"Angelica M. Kobek","guid":"2573d099-fcf6-4dbf-b6c3-a533100c0746","individualid":1478378,"phonetype1":"780-906-2588","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.AngelicaSells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601641","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1118432.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Angelica","lastname":"Kobek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1721,"name":"Bryan E. Thomas","guid":"a66f590f-0ffc-491b-938c-4d5b88512605","individualid":1992373,"phonetype1":"780-221-0074","phonetype2":"","phonetype3":"","phonetype4":"780-447-0157","phonetype5":"","websitetype1":"http://www.realtycorp.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122123","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bryan","lastname":"Thomas","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1722,"name":"Michael T. Jenner","guid":"9c157358-091a-4df2-ad01-cc6da8971c25","individualid":1478267,"phonetype1":"780-964-7253","phonetype2":"","phonetype3":"","phonetype4":"780-483-4943","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"http://www.linkedin.com/in/michael-jenner-225649a","websitetype4":"http://www.twitter.com/@mtjenner","websitetype5":"","email1":"401801946","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Jenner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1723,"name":"Joanne Morrison","guid":"9d67d0b5-898d-4940-ba1b-444b26800a2f","individualid":1870800,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121764","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joanne","lastname":"Morrison","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1724,"name":"Max Borrelli","guid":"1069738e-6cc8-404c-93ee-cf279077cb09","individualid":1477449,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361038","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Max","lastname":"Borrelli","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1725,"name":"Blake M. Murdoch","guid":"791ff8e0-c8fa-4d50-8c57-ba83cd94fbf8","individualid":1956790,"phonetype1":"780-264-3786","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://abrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117452","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1956790.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Blake","lastname":"Murdoch","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1726,"name":"Rajan Nulliah","guid":"91725258-3ddc-4b7d-be5e-c1d2184ce2dd","individualid":1478902,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402325105","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rajan","lastname":"Nulliah","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1727,"name":"Kulbir S. Beniwal","guid":"5901b0d0-3528-469c-a5ce-b89546fc2a7d","individualid":1953706,"phonetype1":"780-667-0667","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120248","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kulbir","lastname":"Beniwal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1728,"name":"Eric T. Krupa","guid":"beb305d7-4791-4d73-85c4-c86d5f7e7c8b","individualid":1960120,"phonetype1":"780-952-1737","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"http://www.rickkrupa.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123323","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eric","lastname":"Krupa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:32","updated_at":"2017-08-11 00:13:32"},{"id":1729,"name":"Bozena Odyjewska","guid":"2036d9ed-9ca0-4bbd-bb8d-5a17a4c35f18","individualid":1478915,"phonetype1":"780-456-5393","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122798","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bozena","lastname":"Odyjewska","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1730,"name":"Patricia J. Halder","guid":"187c8f33-4f7b-4b8f-84e7-5b77383bce62","individualid":1939406,"phonetype1":"780-915-4292","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.patriciahalder.com","websitetype2":"https://www.facebook.com/RealtyExecutivesRenaissance/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268985","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1939406.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Patricia","lastname":"Halder","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1731,"name":"Manoj K. Karwal","guid":"a15de0fe-5717-47e2-8e5f-5431457ffaf1","individualid":1730449,"phonetype1":"780-267-7882","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602179","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Manoj","lastname":"Karwal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1732,"name":"Tuba Pastutmaz","guid":"4577ca13-ffb6-496f-9b80-92ca4c958082","individualid":1967274,"phonetype1":"780-554-9419","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602701","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tuba","lastname":"Pastutmaz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1733,"name":"Linda L. Mah","guid":"c5dc8f1d-edfb-4e87-828c-090ae9c63c4e","individualid":1640558,"phonetype1":"780-722-0819","phonetype2":"","phonetype3":"","phonetype4":"780-488-0966","phonetype5":"","websitetype1":"http://www.linda.mah@century21.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109938","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1640558.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Linda","lastname":"Mah","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1734,"name":"Ben Yovel","guid":"da4c197c-19e6-4210-b3ec-a7d0aeb32496","individualid":1924317,"phonetype1":"780-885-1919","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.remax.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400782234","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1228485.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ben","lastname":"Yovel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1735,"name":"Sam A. Woyewoda","guid":"b549a4d4-e179-4983-af57-ad6d07abfcf3","individualid":1479726,"phonetype1":"780-470-0160","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"http://samwoyewoda.point2agent.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400999141","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010773.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sam","lastname":"Woyewoda","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1736,"name":"Kevin A. Rohoman","guid":"4bfcfc99-7daa-418a-bb55-a61a2b77fe7c","individualid":2022757,"phonetype1":"780-953-0000","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120729","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1302364.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Rohoman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1737,"name":"Francis Devlin","guid":"4e1ced21-a25f-45e4-859b-13a534ef77cd","individualid":1477763,"phonetype1":"780-438-2500","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.francissellsrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361099","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Francis","lastname":"Devlin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1738,"name":"Shelley A. Horb","guid":"a2d19d58-5682-4a7f-9a0d-0be426e8dad4","individualid":1998267,"phonetype1":"780-982-7994","phonetype2":"","phonetype3":"","phonetype4":"780-460-2205","phonetype5":"","websitetype1":"http://www.ShelleyHorb.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398265605","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shelley","lastname":"Horb","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1739,"name":"Carol Parsons","guid":"a4b7bad5-5e95-4ca6-8c77-750bc8faa60c","individualid":2003490,"phonetype1":"780-293-2108","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116466","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carol","lastname":"Parsons","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1740,"name":"Joel P. Teeling","guid":"fe135ab2-5f92-40d1-89cb-9cd94e210f3f","individualid":1944383,"phonetype1":"780-819-8478","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.joelteeling.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121607","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joel","lastname":"Teeling","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:33","updated_at":"2017-08-11 00:13:33"},{"id":1741,"name":"Linda M. Arsenault","guid":"e0609033-3867-4df9-8a50-b37df33e0c79","individualid":1477276,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361180","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Linda","lastname":"Arsenault","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1742,"name":"Raymond C. Corbiere","guid":"727bd961-4c75-4dc5-b18e-68dbbe1a7d9c","individualid":1477668,"phonetype1":"780-966-4663","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.raysellshomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111095","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011987.gif","position":"Associate","permitfreetextemail":0,"firstname":"Raymond","lastname":"Corbiere","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1743,"name":"Sam Wei","guid":"e997ae77-2c14-436d-b2d5-4fca553167a8","individualid":1479649,"phonetype1":"780-991-7234","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.samwei.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109222","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sam","lastname":"Wei","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1744,"name":"Agnes I. Fisher","guid":"dae8c716-6f92-44cf-89ca-0e23c4df72d5","individualid":1477912,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117522","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011735.gif","position":"Associate","permitfreetextemail":0,"firstname":"Agnes","lastname":"Fisher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1745,"name":"Patricia A. Warnke","guid":"17094265-1a3c-4578-bfea-03ca57c95e59","individualid":1479640,"phonetype1":"780-993-1978","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://patriciawarnke.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113667","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Patricia","lastname":"Warnke","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1746,"name":"Angelica Vutselo","guid":"8fd2b124-34c7-46c4-ae40-a34f3e6af9a2","individualid":1896496,"phonetype1":"780-708-2842","phonetype2":"","phonetype3":"","phonetype4":"780-453-3567","phonetype5":"","websitetype1":"http://www.angelicavutselo.com","websitetype2":"https://www.facebook.com/edmontonrussianrealtor","websitetype3":"https://www.linkedin.com/in/angelicavutselorealtor/","websitetype4":"","websitetype5":"","email1":"397602367","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Angelica","lastname":"Vutselo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1747,"name":"Jennifer M. Bashow","guid":"a0e60290-037c-4cab-a014-d11537a5708d","individualid":1998262,"phonetype1":"780-243-3419","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116075","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1998262.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Bashow","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1748,"name":"Selam Tesfay","guid":"2691d541-d25c-4e4c-8057-b242e472266a","individualid":1593338,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112337","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Selam","lastname":"Tesfay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1749,"name":"Kelly L. Nikolic","guid":"8ee0a3d9-bd7e-43f5-82a0-c799eb92d083","individualid":1903329,"phonetype1":"780-720-1801","phonetype2":"","phonetype3":"","phonetype4":"844-274-2914","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401969296","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1903329.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Nikolic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1750,"name":"Bill S. Bhamra","guid":"894df9a6-6268-4dc9-b065-af0bbaedcd3e","individualid":1888912,"phonetype1":"780-707-2673","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"http://www.EdmontonHouseFinder.com","websitetype2":"http://www.facebook.com/EdmontonHouseFinder/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398175990","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1210499.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Bhamra","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1751,"name":"David Harper","guid":"7e2c81ee-b6e9-4be3-a0bb-15e5dd14c5cb","individualid":1999776,"phonetype1":"780-977-4912","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402325136","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Harper","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:34","updated_at":"2017-08-11 00:13:34"},{"id":1752,"name":"Valerie L. Senio","guid":"40be7b0b-716e-4981-bf85-a5af92981183","individualid":1948905,"phonetype1":"780-405-9359","phonetype2":"","phonetype3":"","phonetype4":"780-986-4494","phonetype5":"","websitetype1":"http://LeducRealEstateTeam.com/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120852","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1243426.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Valerie","lastname":"Senio","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:35","updated_at":"2017-08-11 00:13:35"},{"id":1753,"name":"Gary L. Hilsen","guid":"db05e462-6069-457c-8322-2b6f11f27063","individualid":1585210,"phonetype1":"780-266-3679","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114524","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gary","lastname":"Hilsen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:35","updated_at":"2017-08-11 00:13:35"},{"id":1754,"name":"Kevin A. Machado","guid":"7a7eb6b5-5458-46bf-a534-cbb81b02bd69","individualid":2015367,"phonetype1":"780-935-5762","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.kevinmachado.ca","websitetype2":"https://www.facebook.com/kevinmachadorealtor/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398452298","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1296670.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kevin","lastname":"Machado","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:35","updated_at":"2017-08-11 00:13:35"},{"id":1755,"name":"Bill Trebell","guid":"d503a946-3b7c-47ad-8590-810b5ab63f62","individualid":1558575,"phonetype1":"780-416-0737","phonetype2":"","phonetype3":"","phonetype4":"780-417-9055","phonetype5":"","websitetype1":"http://www.trebellrealty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112443","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Bill","lastname":"Trebell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:35","updated_at":"2017-08-11 00:13:35"},{"id":1756,"name":"Cristi A. Leskie","guid":"a7cffed2-9ce2-47d4-9e4f-8b20893d472e","individualid":1992186,"phonetype1":"780-720-2429","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://cristisells.com/","websitetype2":"https://www.facebook.com/cristileskie","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396574238","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1275553.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cristi","lastname":"Leskie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:35","updated_at":"2017-08-11 00:13:35"},{"id":1757,"name":"Lakhwinder S. Saggu","guid":"16f10979-432f-445e-9c7a-b40878c25ee8","individualid":1832477,"phonetype1":"780-953-8331","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114931","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lakhwinder","lastname":"Saggu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1758,"name":"Natalia A. Rashkovetsky","guid":"d3ad74e8-1f93-41c7-b175-c71a47b606e7","individualid":1930355,"phonetype1":"780-667-1417","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602502","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Natalia","lastname":"Rashkovetsky","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1759,"name":"Aileen A. Simcic","guid":"405fab28-177a-4720-a8cc-bd53f1ea5467","individualid":1479299,"phonetype1":"780-438-1575","phonetype2":"","phonetype3":"","phonetype4":"780-430-5379","phonetype5":"","websitetype1":"http://www.aileensimcic.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115482","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Aileen","lastname":"Simcic","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1760,"name":"Stormy A. Sopp","guid":"0d825af3-82b3-403a-b04f-87bc07f670f6","individualid":1909770,"phonetype1":"780-721-4427","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114219","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stormy","lastname":"Sopp","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1761,"name":"Ali Shaben","guid":"46577bb0-62f9-44cd-a12b-59b625b6ccbf","individualid":1881943,"phonetype1":"780-446-8622","phonetype2":"","phonetype3":"","phonetype4":"780-425-6379","phonetype5":"","websitetype1":"http://www.alishaben.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398662004","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Ali","lastname":"Shaben","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1762,"name":"Ron R. Kulay","guid":"5f955d5a-9040-453b-a8ef-8c35b4ed05bd","individualid":1534256,"phonetype1":"780-686-5687","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113452","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Kulay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1763,"name":"Kelvin B. Vandasselaar","guid":"969ce4e4-581e-4183-912b-6513018e9263","individualid":2023494,"phonetype1":"780-720-8342","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.kelvinvandasselaar.ca","websitetype2":"https://www.facebook.com/kelvinvandasselaar.ca/","websitetype3":"https://www.linkedin.com/in/kelvin-vandasselaar/","websitetype4":"https://twitter.com/dutchman1962","websitetype5":"","email1":"400279446","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1303306.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kelvin","lastname":"Vandasselaar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1764,"name":"Alan F. Macdonald","guid":"b25681ab-7026-4641-b748-667ec2dd7c14","individualid":1806729,"phonetype1":"780-918-1497","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.gimme-shelter.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402954054","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1191412.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alan","lastname":"Macdonald","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1765,"name":"Terri-Lynne Reynolds","guid":"c3017284-da38-4994-a62f-c14361b84894","individualid":1910566,"phonetype1":"780-940-5322","phonetype2":"","phonetype3":"","phonetype4":"780-452-6530","phonetype5":"","websitetype1":"http://economyrealestate.abmls.mlxchange.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109724","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Terri-Lynne","lastname":"Reynolds","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1766,"name":"Marcel E. Tessier","guid":"2edba11f-ba99-4a98-a8c2-aa2a5b7bb8e9","individualid":1479472,"phonetype1":"780-406-4000","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.marceltessier.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114757","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479472.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Marcel","lastname":"Tessier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1767,"name":"Fereshteh Khorasani","guid":"a4217b2f-2271-47c7-a04a-499cbe18b171","individualid":1478343,"phonetype1":"780-982-6006","phonetype2":"","phonetype3":"","phonetype4":"780-437-6072","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111130","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Fereshteh","lastname":"Khorasani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:36","updated_at":"2017-08-11 00:13:36"},{"id":1768,"name":"Nicole A. Etcheverry","guid":"2f3d3335-59fa-4345-b655-8af90e436dc6","individualid":1966822,"phonetype1":"780-977-6273","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111427","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nicole","lastname":"Etcheverry","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1769,"name":"Joel C. Murray","guid":"f15ad1af-33d5-4ed6-bff6-53b3cf22884b","individualid":1480375,"phonetype1":"780-434-4700","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.edmontonhomesforsale.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109892","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1131817.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Joel","lastname":"Murray","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1770,"name":"Joel A. Benitez","guid":"7fad0ca7-0dac-4971-8db7-c8cd25387b62","individualid":1477365,"phonetype1":"780-908-0338","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.joelsellsrealestate.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601715","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joel","lastname":"Benitez","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1771,"name":"Noreen P. Lam","guid":"6900b6a1-8d26-4a54-a027-033d57aed2ee","individualid":1643555,"phonetype1":"780-993-9333","phonetype2":"","phonetype3":"","phonetype4":"780-644-0063","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115584","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1643555.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Noreen","lastname":"Lam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1772,"name":"Amanda N. Gering","guid":"2deeec02-b85e-45e2-99bc-4bde45a35501","individualid":1886723,"phonetype1":"780-953-8260","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/AmandaGeringRealtor/","websitetype3":"https://www.linkedin.com/in/amanda-gering-89841596/","websitetype4":"https://twitter.com/AmandaGering","websitetype5":"","email1":"398143826","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1209389.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Amanda","lastname":"Gering","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1773,"name":"Cheryl Carpenter","guid":"cbb3dfb1-2476-4e55-b744-42768c11dbdc","individualid":2026352,"phonetype1":"780-916-9963","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399770454","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"Carpenter","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1774,"name":"Steve S. Jaswal","guid":"114c3493-9f98-411c-b974-6c97117f2025","individualid":1942436,"phonetype1":"780-699-9788","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.stevejaswal.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111028","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Jaswal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1775,"name":"Cameron M. White","guid":"dc3c1e56-cc7d-4f3c-b859-ffbc1a15feb0","individualid":2019735,"phonetype1":"780-497-0633","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.elgiewhiterealestate.com","websitetype2":"https://www.facebook.com/elgiewhiterealestate/?ref=bookmarks","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399770444","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cameron","lastname":"White","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1776,"name":"Allan F. Elgie","guid":"fc535708-87e2-4de0-9eb2-f268c694d8bd","individualid":1881472,"phonetype1":"780-717-4231","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.elgiewhiterealestate.com/","websitetype2":"https://www.facebook.com/elgiewhiterealestate/?ref=bookmarks","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399770424","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Allan","lastname":"Elgie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1777,"name":"Ken Huzil","guid":"a0a71bc4-ea38-4e15-9a7b-4e9815bf023a","individualid":1478236,"phonetype1":"780-699-1962","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"http://www.kenhuzil.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360777","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010902.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Ken","lastname":"Huzil","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1778,"name":"Nazia Harris","guid":"16a5f40f-4101-40e3-817b-49076d6b4a4f","individualid":1500819,"phonetype1":"403-708-1600","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"http://www.TeamHarris.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402303094","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1135785.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nazia","lastname":"Harris","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:37","updated_at":"2017-08-11 00:13:37"},{"id":1779,"name":"Gurvinder Virk","guid":"522d4e85-9906-44b8-bd49-e29d5ce1655a","individualid":1947183,"phonetype1":"780-904-4811","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.garyvirk.ca","websitetype2":"https://www.facebook.com/RealtorGaryVirk","websitetype3":"","websitetype4":"https://www.facebook.com/RealtorGaryVirk","websitetype5":"","email1":"397602581","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gurvinder","lastname":"Virk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1780,"name":"Romi Sarna","guid":"87a548b7-201f-431c-a0cc-2b51042b2324","individualid":1479201,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.romisarna.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733466","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Romi","lastname":"Sarna","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1781,"name":"Peter Wade","guid":"b95b23ba-cb3d-4573-a579-5f002f682f4c","individualid":2029943,"phonetype1":"780-222-7662","phonetype2":"","phonetype3":"","phonetype4":"866-866-6621","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807896","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Peter","lastname":"Wade","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1782,"name":"Kelley R. Frankiw","guid":"b0134e15-0545-46c0-9da1-7488c44e4c23","individualid":1477938,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402117803","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelley","lastname":"Frankiw","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1783,"name":"David A. Gillen","guid":"fc9fe9ad-21d4-45a3-b1bb-cf5190e49142","individualid":2024894,"phonetype1":"780-887-7528","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397603022","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"David","lastname":"Gillen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1784,"name":"Erica L. Levecque","guid":"3210b24b-dabd-4919-981c-a68a0520ba86","individualid":1478535,"phonetype1":"780-915-0212","phonetype2":"","phonetype3":"","phonetype4":"780-431-1600","phonetype5":"","websitetype1":"http://www.ericalevecque.com","websitetype2":"http://www.facebook.com/ericalevecque","websitetype3":"http://www.linkedin.com/in/erica-levecque-24802647","websitetype4":"http://www.twitter.com/ericalevecque","websitetype5":"","email1":"398759676","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Erica","lastname":"Levecque","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1785,"name":"Dean C. Junkin","guid":"f4255c51-b43a-4526-b1bc-821a30112afb","individualid":1478295,"phonetype1":"780-953-9530","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.DeanJunkin.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396732307","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478295.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Dean","lastname":"Junkin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1786,"name":"Heidi F. Hromada","guid":"f594ce82-8748-4e7a-8721-b36dd260455c","individualid":1725204,"phonetype1":"780-982-4888","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://heidihromada.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111649","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1725204.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Heidi","lastname":"Hromada","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:38","updated_at":"2017-08-11 00:13:38"},{"id":1787,"name":"Jason Kamal","guid":"761e6752-8363-4506-9f60-19c7fce5fd31","individualid":1939063,"phonetype1":"780-200-3350","phonetype2":"","phonetype3":"","phonetype4":"403-648-2765","phonetype5":"","websitetype1":"http://www.calljason.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402712262","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Kamal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1788,"name":"Brian J. Hamilton","guid":"7ec51bb3-84ab-4275-88d1-c6453fc7e2f7","individualid":1478100,"phonetype1":"780-990-8064","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120399","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Hamilton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1789,"name":"JM Welykochy","guid":"0e3e1470-ad3a-4f95-9739-3cb91b811291","individualid":1479654,"phonetype1":"780-231-1517","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.jmforsale.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120335","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"JM","lastname":"Welykochy","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1790,"name":"Alexander Wong","guid":"874ca731-ef9c-4fa9-b3f4-dd8e99a92d2e","individualid":1479712,"phonetype1":"780-993-3168","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733408","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Alexander","lastname":"Wong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1791,"name":"Kim Jiwa","guid":"b98e0773-3fc8-466d-8a2b-20481f6cd59a","individualid":1478276,"phonetype1":"780-908-7900","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.kimjiwa.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601163","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478276.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Kim","lastname":"Jiwa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1792,"name":"Kelly Tarrabain","guid":"9cf7c33c-9f50-4514-91bb-4a1950c3fca7","individualid":1479452,"phonetype1":"780-699-6996","phonetype2":"","phonetype3":"","phonetype4":"780-425-6379","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399716588","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kelly","lastname":"Tarrabain","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1793,"name":"Amy L. Shearer","guid":"236dbce8-88e9-4cae-9135-65c94fd470cc","individualid":1939065,"phonetype1":"780-983-7536","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124835","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amy","lastname":"Shearer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1794,"name":"Sean Lee","guid":"3eaf0c0e-d6ec-4272-bb8a-e654aaff5b14","individualid":1720787,"phonetype1":"780-686-1345","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602160","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1720787.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sean","lastname":"Lee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1795,"name":"Zhao Hui Li","guid":"dbb0bbb1-4178-451c-bcd3-989278d8d139","individualid":1572464,"phonetype1":"780-660-2088","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109073","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Zhao Hui","lastname":"Li","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1796,"name":"Mathieu A. Audet","guid":"d4488123-c4d4-4c36-9e41-69989f139542","individualid":1907521,"phonetype1":"780-721-5283","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.sellyeghomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398785751","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mathieu","lastname":"Audet","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1797,"name":"Eric Clark","guid":"5b24aa11-c899-43c2-8c58-52d75f6455d8","individualid":2032602,"phonetype1":"780-937-3410","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"http://www.ericclark.ca","websitetype2":"https://www.facebook.com/ericclark.ca","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682161","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eric","lastname":"Clark","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1798,"name":"Jaleh Pezeshki","guid":"e6e67446-f9f1-42f3-a6b7-dba2989fb2b2","individualid":2005275,"phonetype1":"780-914-7718","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402795193","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jaleh","lastname":"Pezeshki","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1799,"name":"Leanne M. Gagliardi","guid":"eb005a59-5599-4de2-acfb-b6173a16c349","individualid":2004722,"phonetype1":"780-974-1658","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116559","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Leanne","lastname":"Gagliardi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1800,"name":"Neil D. Crockford","guid":"5acbe15f-8114-42f7-b726-eb13399d5b3b","individualid":1477699,"phonetype1":"780-918-5333","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.neilsells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114859","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1102512.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Neil","lastname":"Crockford","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:39","updated_at":"2017-08-11 00:13:39"},{"id":1801,"name":"Wonjun Choi","guid":"3107ae9b-e49d-4623-a1ac-8399b17123e7","individualid":1670835,"phonetype1":"780-722-2570","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119642","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Wonjun","lastname":"Choi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1802,"name":"Brooke A. Perkins","guid":"2db1e0d7-1ef8-460a-8122-ed4b096db1aa","individualid":1988116,"phonetype1":"780-952-4250","phonetype2":"","phonetype3":"","phonetype4":"780-458-4821","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118430","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brooke","lastname":"Perkins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1803,"name":"Helena J. Arsenault","guid":"b219e2d5-803c-4bfb-816a-98de951154ec","individualid":1881585,"phonetype1":"780-641-0222","phonetype2":"","phonetype3":"","phonetype4":"780-641-0228","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396193856","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Helena","lastname":"Arsenault","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1804,"name":"Arvinder S. Clair","guid":"8cd31e5f-12ff-447b-b9af-ddea440151fd","individualid":1674720,"phonetype1":"780-964-1728","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.acsells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602111","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Arvinder","lastname":"Clair","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1805,"name":"Yolanda Bekker","guid":"c31d7b81-fad6-4c21-80f1-9c2ad9df6960","individualid":2032603,"phonetype1":"780-554-4493","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682167","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Yolanda","lastname":"Bekker","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1806,"name":"Dave A. Namchuk","guid":"fc4cef2b-5d58-4d54-812e-1b798601b142","individualid":1478861,"phonetype1":"780-238-6796","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.homeswithdave.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118566","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dave","lastname":"Namchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1807,"name":"Candy Wang","guid":"ed55f6f1-f7da-4cbd-8baa-b9d1ebe0c4d0","individualid":1975859,"phonetype1":"587-778-3483","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402406581","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Candy","lastname":"Wang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1808,"name":"Steve D. Sedgwick","guid":"c94bb4be-4b79-4ef9-ad9a-128ac767809a","individualid":1479246,"phonetype1":"780-431-5600","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.RealtyEdge.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361116","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101039.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steve","lastname":"Sedgwick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:40","updated_at":"2017-08-11 00:13:40"},{"id":1809,"name":"Manju Sharma","guid":"a0e18e27-b90c-4250-8972-9cbd1a20584b","individualid":1637084,"phonetype1":"780-289-3636","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402068922","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Manju","lastname":"Sharma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1810,"name":"Dan E. Lepine","guid":"b493536b-de6e-417c-82b4-24295674bfca","individualid":1526880,"phonetype1":"780-951-4114","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120368","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dan","lastname":"Lepine","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1811,"name":"Elzbieta Zoltowska-Wyka","guid":"4a7ab832-1512-4d81-89bc-77e3ace9a23a","individualid":1726900,"phonetype1":"780-710-0962","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://elzbietazoltowskawyka.point2agent.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396554526","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1726900.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Elzbieta","lastname":"Zoltowska-Wyka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1812,"name":"Farouk Amershi","guid":"442f534d-7676-4096-85c5-381c9ac4c14d","individualid":1477253,"phonetype1":"780-288-0744","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.sterlingedmonton.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119164","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Farouk","lastname":"Amershi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1813,"name":"Dwight C. Jones","guid":"39ae613b-d066-4b97-8143-326d2f115108","individualid":1964715,"phonetype1":"780-245-0061","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113782","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dwight","lastname":"Jones","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1814,"name":"Michael J. Connors","guid":"c6979043-c285-46a4-b6ac-9215f100d56f","individualid":1786127,"phonetype1":"780-908-8089","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://www.alangee.com","websitetype2":"http://www.facebook.com/alangeeandassociates","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143793","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Michael","lastname":"Connors","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1815,"name":"Chuck Mulholland","guid":"6ae63cfd-f5e2-4757-986c-5ee0c7358ac3","individualid":1880172,"phonetype1":"780-460-6060","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.century21.ca/chuck.mulholland","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115714","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1880172.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Chuck","lastname":"Mulholland","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1816,"name":"Heather M. Faulkner","guid":"f73b33e0-2303-4ff7-8839-3a5eaf8a6f8d","individualid":1525798,"phonetype1":"780-710-7232","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.alledmontonhomesandcondos.com","websitetype2":"https://twitter.com/FaulknerGroup","websitetype3":"","websitetype4":"https://twitter.com/FaulknerGroup","websitetype5":"","email1":"396688092","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Heather","lastname":"Faulkner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1817,"name":"Dennis S. Faulkner","guid":"4494d524-9568-48b5-b4bc-f14749cd5f0f","individualid":1686099,"phonetype1":"780-951-3361","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113743","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dennis","lastname":"Faulkner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1818,"name":"Ajay Verma","guid":"f0ef9b6d-fb8b-4304-a65a-155b2825a1fd","individualid":1616135,"phonetype1":"780-885-2486","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109270","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ajay","lastname":"Verma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:41","updated_at":"2017-08-11 00:13:41"},{"id":1819,"name":"Jennifer S. Doxi","guid":"ccd7dc61-5ac5-4c09-a6dd-b2180809101d","individualid":1889158,"phonetype1":"780-807-6431","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.JenniferDoxi.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400807219","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Doxi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1820,"name":"Prakash A. Patel","guid":"fe593689-4b75-492e-bef9-8556adb41d24","individualid":1945979,"phonetype1":"780-278-9260","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602577","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Prakash","lastname":"Patel","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1821,"name":"Nancy Narayan","guid":"2ab6ef89-827e-43f2-a173-639212abab0b","individualid":1912194,"phonetype1":"780-729-7250","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602428","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nancy","lastname":"Narayan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1822,"name":"Paul L. Perron","guid":"711530b3-4f31-4e99-88d4-758eca11c1ff","individualid":1939234,"phonetype1":"780-446-6257","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124402","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Paul","lastname":"Perron","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1823,"name":"Mo Dhalla","guid":"a009ce10-0376-42de-a52b-fc884c379ce6","individualid":1533668,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108851","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mo","lastname":"Dhalla","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1824,"name":"Linnette T. Parmar","guid":"73d7f103-caac-4751-a7f9-38a5033d33df","individualid":1478955,"phonetype1":"780-352-7516","phonetype2":"","phonetype3":"","phonetype4":"780-352-8028","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123848","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478955.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Linnette","lastname":"Parmar","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1825,"name":"Claude Gaboury","guid":"fa5ab6c9-1001-437e-bd78-494af0e0195b","individualid":1477963,"phonetype1":"780-962-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.thegabouryteam.com","websitetype2":"https://www.facebook.com/thegabouryteam/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807662","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477963.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Claude","lastname":"Gaboury","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1826,"name":"Christina L. Henker-Gaboury","guid":"a9ccceba-fa13-41af-a036-751518a78749","individualid":1670460,"phonetype1":"780-962-8580","phonetype2":"","phonetype3":"","phonetype4":"780-962-8998","phonetype5":"","websitetype1":"http://www.thegabouryteam.com","websitetype2":"https://www.facebook.com/thegabouryteam/","websitetype3":"https://www.linkedin.com/in/christinahenkergaboury/","websitetype4":"https://twitter.com/TheGabouryTeam","websitetype5":"","email1":"398759769","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1670460.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Christina","lastname":"Henker-Gaboury","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1827,"name":"Jamshade Isa","guid":"40983241-21ed-4f4f-bf8a-05b320eb8ecd","individualid":1906052,"phonetype1":"780-695-1867","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121574","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1906052.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jamshade","lastname":"Isa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1828,"name":"Jennifer A. Bossio","guid":"191fd94c-b742-4694-8d64-637336e76301","individualid":1998263,"phonetype1":"780-902-6975","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116079","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1998263.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Bossio","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1829,"name":"Mary-Anne E. Lee","guid":"1021ff51-48ee-4021-8503-40a425a9457b","individualid":1478510,"phonetype1":"780-940-0743","phonetype2":"","phonetype3":"","phonetype4":"780-430-5379","phonetype5":"","websitetype1":"http://www.leeteamhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601099","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011754.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mary-Anne","lastname":"Lee","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1830,"name":"Marina Robbins","guid":"e8d59648-9e31-45c9-adcf-719672f9c500","individualid":2003491,"phonetype1":"780-438-7000","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116470","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marina","lastname":"Robbins","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1831,"name":"Cheryl L. Jameson","guid":"32adbf2f-47aa-4164-921d-e10b10628808","individualid":1588657,"phonetype1":"780-718-4542","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.edm-realty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241760","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"Jameson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1832,"name":"Nicholas D. Dennis","guid":"a8853041-76eb-47e3-a8b0-7cd70c1a9eb9","individualid":1924239,"phonetype1":"780-975-2376","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.SellerExpert.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124547","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1924239.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Nicholas","lastname":"Dennis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1833,"name":"Johnny A. Marano","guid":"f8de8230-966d-42fb-8352-10fe2aac682d","individualid":1901210,"phonetype1":"780-504-6952","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.sellerexpert.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398241800","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1217476.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Johnny","lastname":"Marano","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1834,"name":"Ramandeep S. Virk","guid":"99e9caf2-7e48-4e79-bb6b-634d2b0b7bb9","individualid":1981412,"phonetype1":"780-937-8783","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401562062","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ramandeep","lastname":"Virk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:42","updated_at":"2017-08-11 00:13:42"},{"id":1835,"name":"Sylvain R. Sanscartier","guid":"c7890be1-2f55-49dd-88c4-8a185f704ab6","individualid":1929923,"phonetype1":"780-709-8738","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119866","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sylvain","lastname":"Sanscartier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:43","updated_at":"2017-08-11 00:13:43"},{"id":1836,"name":"Amal Monzer","guid":"9999df1f-551f-4f1a-9aae-0b0ef9f5d12a","individualid":1478798,"phonetype1":"780-710-7676","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/monzeramal?lang=en","websitetype5":"","email1":"398759597","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amal","lastname":"Monzer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:43","updated_at":"2017-08-11 00:13:43"},{"id":1837,"name":"Brian W. Dick","guid":"62ba11f2-891f-4878-9988-f0643295d868","individualid":1751651,"phonetype1":"780-446-0056","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"http://www.briandick.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110287","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1751651.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Dick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:43","updated_at":"2017-08-11 00:13:43"},{"id":1838,"name":"Charles K. Ho","guid":"162d7b89-2ed0-4ffa-8cde-82a1fdefbb90","individualid":1478172,"phonetype1":"780-905-3328","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"http://www.century21.ca/charles.ho/","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681786","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Charles","lastname":"Ho","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:43","updated_at":"2017-08-11 00:13:43"},{"id":1839,"name":"Brenda R. Patton","guid":"d7084774-86b5-40b8-b134-4244b519205e","individualid":1747850,"phonetype1":"780-297-8437","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://brendarpatton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688605","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brenda","lastname":"Patton","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:43","updated_at":"2017-08-11 00:13:43"},{"id":1840,"name":"Zeev Shaposhnik","guid":"876ec0f0-9453-4c3c-a234-3b837dd53dc0","individualid":1929340,"phonetype1":"780-667-7427","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.edhomes.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/zeev-gleb-shaposhnik-28222114/","websitetype4":"","websitetype5":"","email1":"398807766","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1929340.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Zeev","lastname":"Shaposhnik","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1841,"name":"Pei Sun","guid":"2352e830-ab25-49bc-bcc5-ea84efaa7ad2","individualid":1975485,"phonetype1":"780-904-9608","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.polarissells.com/agents/Pei-Sun","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602736","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1975485.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Pei","lastname":"Sun","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1842,"name":"Anwar Sleiman","guid":"a35d6269-2ddf-4a82-a098-48bc3cf23cdd","individualid":1479312,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.teamsleiman.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601687","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Anwar","lastname":"Sleiman","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1843,"name":"Dale Gardner","guid":"ba7d8cd2-e8a5-44fc-8d34-b1848cb0dd62","individualid":1477977,"phonetype1":"780-554-9656","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.nowrealestategroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398331876","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dale","lastname":"Gardner","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1844,"name":"Steven G. Baracos","guid":"20e0a87a-5cd8-4f3e-aa00-a8bbadbaa821","individualid":2020955,"phonetype1":"780-394-6277","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120584","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Steven","lastname":"Baracos","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1845,"name":"Judy Clare-Packer","guid":"a022dd2e-29b7-4f2a-89a1-c13214c349e9","individualid":1477633,"phonetype1":"780-481-2950","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.judyhomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397290995","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477633.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Judy","lastname":"Clare-Packer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1846,"name":"Rick J. Hein","guid":"3052dfb8-68b2-42d9-99e4-412d555e33d2","individualid":1998266,"phonetype1":"780-318-1605","phonetype2":"","phonetype3":"","phonetype4":"403-536-6989","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116087","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rick","lastname":"Hein","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1847,"name":"Gokhan Topalak","guid":"63d39c3c-90fb-490b-bbf1-f072f64cd5e6","individualid":2021726,"phonetype1":"780-222-3773","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396193812","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gokhan","lastname":"Topalak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1848,"name":"Lee W. Bourgeois","guid":"a2be33f6-7dce-4b6e-a64e-de6fb1defa4e","individualid":1477458,"phonetype1":"780-909-1600","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"http://www.LeeBourgeois.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119633","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1096104.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Lee","lastname":"Bourgeois","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1849,"name":"Kathy Schmidt","guid":"ace672d4-d525-4b51-99c9-f428e4eaf8ce","individualid":1479223,"phonetype1":"780-437-2030","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"http://www.weselledmonton.com","websitetype2":"https://www.facebook.com/SchmidtRealtyGroup/","websitetype3":"https://ca.linkedin.com/in/kathy-schmidt-51931b6","websitetype4":"https://twitter.com/Schmidt_Realty","websitetype5":"","email1":"400681682","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011026.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Kathy","lastname":"Schmidt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:44","updated_at":"2017-08-11 00:13:44"},{"id":1850,"name":"Rohin Sethi","guid":"ebf335bf-806c-4ac1-972c-62767e61bf02","individualid":2025633,"phonetype1":"587-991-3146","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://krishnahomes.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398054816","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1305227.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rohin","lastname":"Sethi","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:45","updated_at":"2017-08-11 00:13:45"},{"id":1851,"name":"Ravneet Flora","guid":"ea0ae3ea-07e7-4973-b483-ab6ed5f603e3","individualid":1967900,"phonetype1":"780-266-6462","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396643461","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ravneet","lastname":"Flora","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:45","updated_at":"2017-08-11 00:13:45"},{"id":1852,"name":"Andrei Boitchenko","guid":"98ce8e45-be1a-479c-9379-90a1645902ba","individualid":1477436,"phonetype1":"780-909-4924","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110430","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Andrei","lastname":"Boitchenko","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:45","updated_at":"2017-08-11 00:13:45"},{"id":1853,"name":"Huixia Chen","guid":"51f346de-5cb9-4c95-becf-36ca66ed552b","individualid":1485245,"phonetype1":"780-232-6951","phonetype2":"","phonetype3":"","phonetype4":"780-486-2126","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399716610","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Huixia","lastname":"Chen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:45","updated_at":"2017-08-11 00:13:45"},{"id":1854,"name":"Qiongying Han","guid":"8f8eb566-d9b5-4b8d-9c4f-b1b9be99c769","individualid":2005407,"phonetype1":"780-966-6368","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398332104","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Qiongying","lastname":"Han","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:45","updated_at":"2017-08-11 00:13:45"},{"id":1855,"name":"Jeanette W.J. Bruck","guid":"d94a328c-1149-4905-8359-6b43e0dea633","individualid":2005507,"phonetype1":"780-488-4000","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.greateredmontongroup.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116622","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jeanette","lastname":"Bruck","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:45","updated_at":"2017-08-11 00:13:45"},{"id":1856,"name":"Ryan McCann","guid":"69fd509d-7941-4449-8d65-0dab376d922f","individualid":1478688,"phonetype1":"780-221-8444","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.rllv.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733510","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478688.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Ryan","lastname":"McCann","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1857,"name":"Blaine A. Macintyre","guid":"c8e3d5c1-ba70-4076-b7c7-a4e5c6897f64","individualid":1526632,"phonetype1":"780-237-9037","phonetype2":"","phonetype3":"","phonetype4":"780-478-2121","phonetype5":"","websitetype1":"http://www.nowrealestategroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396130320","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Blaine","lastname":"Macintyre","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1858,"name":"Amber D. Prue","guid":"8fabc22c-9f1e-44e3-9197-bdc389117008","individualid":1889035,"phonetype1":"780-906-0693","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"http://www.propertiesbyamber.com","websitetype2":"https://www.facebook.com/RealEstateByAmber/","websitetype3":"https://ca.linkedin.com/in/amber-prue-88583822","websitetype4":"","websitetype5":"","email1":"398265576","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Amber","lastname":"Prue","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1859,"name":"Mauro Castellanos","guid":"295a158b-adc0-4bad-a7e6-adc3f3d4b1aa","individualid":1995615,"phonetype1":"780-707-4241","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.maurosells.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124091","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mauro","lastname":"Castellanos","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1860,"name":"Bob Gislason","guid":"b4157da1-0c8c-4bec-ad60-794a94b72773","individualid":1478007,"phonetype1":"780-914-1233","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.bobg.ca","websitetype2":"","websitetype3":"http://linkedin.com/in/bobg1","websitetype4":"","websitetype5":"","email1":"400305480","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1118156.gif","position":"Associate","permitfreetextemail":0,"firstname":"Bob","lastname":"Gislason","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1861,"name":"Del Sveinsson","guid":"0f4576d5-189d-40c3-b6c9-5164ef7037d9","individualid":1479426,"phonetype1":"780-986-4711","phonetype2":"","phonetype3":"","phonetype4":"780-986-6662","phonetype5":"","websitetype1":"http://www.delsveinsson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112476","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479426.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Del","lastname":"Sveinsson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1862,"name":"Ali Hassan","guid":"c48fc5b9-a664-45a7-b140-b1c0ab28cc87","individualid":2036110,"phonetype1":"780-271-2939","phonetype2":"","phonetype3":"","phonetype4":"780-929-8301","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400833014","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ali","lastname":"Hassan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1863,"name":"Carlos Wong","guid":"ef84a298-4756-4cd6-b70f-dde73b9b5936","individualid":2033017,"phonetype1":"780-708-1836","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400656427","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Carlos","lastname":"Wong","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1864,"name":"Robert H. Wu","guid":"52999a91-8fe2-4a99-98c4-0928af4910f3","individualid":1741087,"phonetype1":"780-222-6888","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109279","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Wu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1865,"name":"Glenn M. Ewanchuk","guid":"377dfd95-86c4-402b-8759-bea913301245","individualid":1892816,"phonetype1":"780-718-1099","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.glennewanchuk.com","websitetype2":"https://www.facebook.com/teamewanchuk/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398807752","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1892816.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Glenn","lastname":"Ewanchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1866,"name":"Gurmeet Sandhu","guid":"e79b1694-d133-4dae-827f-e68a2ce67425","individualid":1532353,"phonetype1":"780-991-6663","phonetype2":"","phonetype3":"","phonetype4":"780-463-0188","phonetype5":"","websitetype1":"http://www.homefindersedmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402068907","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gurmeet","lastname":"Sandhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1867,"name":"Battista Valente","guid":"4564fde3-bec2-42e0-a96c-b8c733703b66","individualid":1479566,"phonetype1":"780-446-7763","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110634","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479566.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Battista","lastname":"Valente","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:46","updated_at":"2017-08-11 00:13:46"},{"id":1868,"name":"Violetta Jakuszyk","guid":"5df45416-829f-4eb0-9d18-c54cd2c6d2b3","individualid":1478252,"phonetype1":"780-993-7990","phonetype2":"","phonetype3":"","phonetype4":"780-453-6060","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115201","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Violetta","lastname":"Jakuszyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:47","updated_at":"2017-08-11 00:13:47"},{"id":1869,"name":"Rachel Shifren","guid":"53ddb7e1-fae0-4610-905a-e9ed45efab2b","individualid":1477641,"phonetype1":"780-989-0394","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.searchedmontonareahomes.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115496","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011269.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Rachel","lastname":"Shifren","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:47","updated_at":"2017-08-11 00:13:47"},{"id":1870,"name":"Rod Phillips","guid":"6f93a405-b3b9-4332-8d6f-5dabc78be115","individualid":1478991,"phonetype1":"780-906-4445","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399770408","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rod","lastname":"Phillips","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:47","updated_at":"2017-08-11 00:13:47"},{"id":1871,"name":"Brent Brnada","guid":"1d79a193-73df-4fd4-9d29-0e39c9c322d1","individualid":1668735,"phonetype1":"780-995-0188","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.Edmonton-HomesForSale.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398781744","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1668735.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"Brnada","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:47","updated_at":"2017-08-11 00:13:47"},{"id":1872,"name":"Priya Sharma","guid":"20c1093e-d192-498d-973c-24aa2e79b042","individualid":1479264,"phonetype1":"780-485-2100","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"http://www.priyasharma.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122905","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1101793.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Priya","lastname":"Sharma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:47","updated_at":"2017-08-11 00:13:47"},{"id":1873,"name":"Curtis S. Knott","guid":"9479411e-0cc0-4b6a-bb7d-0cb54a3ec6ee","individualid":1880170,"phonetype1":"780-777-0748","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402512851","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Curtis","lastname":"Knott","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:47","updated_at":"2017-08-11 00:13:47"},{"id":1874,"name":"Jacqueline M. Wincentaylo","guid":"decb69c9-c01f-49fb-8bd2-419f46de8390","individualid":1929010,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118375","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jacqueline","lastname":"Wincentaylo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:48","updated_at":"2017-08-11 00:13:48"},{"id":1875,"name":"Xiangshi Ding","guid":"377a402c-3728-4310-a18b-13af08ee719e","individualid":1950650,"phonetype1":"780-937-9880","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602600","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Xiangshi","lastname":"Ding","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:48","updated_at":"2017-08-11 00:13:48"},{"id":1876,"name":"Chandra S. Srinivasan","guid":"6e66f5fd-36d8-484f-8858-6176bd305e9d","individualid":1998672,"phonetype1":"780-910-6284","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116180","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chandra","lastname":"Srinivasan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:48","updated_at":"2017-08-11 00:13:48"},{"id":1877,"name":"Laurel M. McTavish","guid":"f5457c32-eb5b-4555-a23d-79ebd876a4e0","individualid":1478739,"phonetype1":"780-999-0050","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122363","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Laurel","lastname":"McTavish","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:48","updated_at":"2017-08-11 00:13:48"},{"id":1878,"name":"Donna B. Gagnon","guid":"0b934132-30e8-454b-b558-2c637fdc73e8","individualid":1571500,"phonetype1":"780-991-7157","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108855","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Donna","lastname":"Gagnon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:48","updated_at":"2017-08-11 00:13:48"},{"id":1879,"name":"Gary R. Krutzfeldt","guid":"1e56b557-9ddf-4b02-8650-c852b6768fcd","individualid":1478422,"phonetype1":"780-982-0607","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.garykrutzfeldt.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400628456","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478422.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Gary","lastname":"Krutzfeldt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:48","updated_at":"2017-08-11 00:13:48"},{"id":1880,"name":"Gurinder S. Khosa","guid":"b3e2019f-b4b8-4224-ba41-171cf8547399","individualid":1632264,"phonetype1":"780-263-2100","phonetype2":"","phonetype3":"","phonetype4":"780-485-2180","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109087","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gurinder","lastname":"Khosa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:48","updated_at":"2017-08-11 00:13:48"},{"id":1881,"name":"Yoon Kim","guid":"4efb64a4-0007-4c31-87b1-69ead8c4f48c","individualid":1994571,"phonetype1":"780-218-3142","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602893","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Yoon","lastname":"Kim","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1882,"name":"Stephen P. Kanizaj","guid":"08a57659-110e-49c0-9b9b-634359e7eeda","individualid":1862182,"phonetype1":"780-709-8400","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401158120","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stephen","lastname":"Kanizaj","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1883,"name":"Barry Twynam","guid":"1152e957-fd11-463d-a2c5-a0c9bedc88dc","individualid":1479553,"phonetype1":"780-910-9669","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.barryt.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268697","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1479553.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Barry","lastname":"Twynam","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1884,"name":"Sant P. Sharma","guid":"534f7734-84eb-4e43-96ea-b957a2cf5534","individualid":1981633,"phonetype1":"780-935-4958","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124593","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sant","lastname":"Sharma","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1885,"name":"Boyeon Park","guid":"dc4f2d23-9864-453e-a4da-23c06c29cfc4","individualid":1480671,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361228","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Boyeon","lastname":"Park","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1886,"name":"Jason D. Cooper","guid":"45bdfd8d-2ec5-4f1e-b315-a5ea5ef97639","individualid":1680913,"phonetype1":"780-660-7653","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397155027","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Cooper","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1887,"name":"Janet E. Marshall","guid":"b15cac35-2807-4307-961c-7e98a2e1bc49","individualid":1569307,"phonetype1":"780-264-4668","phonetype2":"","phonetype3":"","phonetype4":"780-986-5636","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119257","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1569307.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Janet","lastname":"Marshall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1888,"name":"Terri L. Drynan","guid":"d048077c-43ec-4362-82bf-30c828d14bbb","individualid":1770676,"phonetype1":"780-986-2900","phonetype2":"","phonetype3":"","phonetype4":"780-986-5636","phonetype5":"","websitetype1":"http://www.terridrynan.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115311","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Terri","lastname":"Drynan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1889,"name":"Stella Zisin","guid":"cba1ce51-b72c-4949-946e-181c4de3050c","individualid":1647210,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://zisinrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602054","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1647210.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Stella","lastname":"Zisin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1890,"name":"Muhammad Mohiuddin","guid":"1b582f43-8760-45c8-beb0-63b8cf9ee0ab","individualid":1929571,"phonetype1":"780-242-3739","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.edmontonrealestate.biz","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112792","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Muhammad","lastname":"Mohiuddin","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:49","updated_at":"2017-08-11 00:13:49"},{"id":1891,"name":"Jinmei Zhang","guid":"29042c77-8fa4-4f23-9155-ab2ad8a4d1b2","individualid":2037550,"phonetype1":"780-271-7799","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402534688","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1313942.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jinmei","lastname":"Zhang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:50","updated_at":"2017-08-11 00:13:50"},{"id":1892,"name":"Debbie A. Smith","guid":"47be77f1-9d1f-4fcf-a1c1-b4df87208d4c","individualid":1479321,"phonetype1":"780-722-6480","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"http://debbieasmith.com","websitetype2":"https://www.facebook.com/profile.php?id=1028851884","websitetype3":"https://www.linkedin.com/in/debbie-smith-ba759927","websitetype4":"","websitetype5":"","email1":"398478896","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Debbie","lastname":"Smith","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:50","updated_at":"2017-08-11 00:13:50"},{"id":1893,"name":"Shahnawaz Ahmad","guid":"916ebda6-719f-4d20-8875-a81e1de62b63","individualid":1477237,"phonetype1":"780-907-3800","phonetype2":"","phonetype3":"","phonetype4":"780-451-3940","phonetype5":"","websitetype1":"http://www.homesbyshani.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601417","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shahnawaz","lastname":"Ahmad","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:50","updated_at":"2017-08-11 00:13:50"},{"id":1894,"name":"Terry D. Demers","guid":"92f57c7b-65b9-4723-96ae-22fe205c9a46","individualid":1995540,"phonetype1":"780-893-8683","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361282","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1278436.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Terry","lastname":"Demers","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:50","updated_at":"2017-08-11 00:13:50"},{"id":1895,"name":"Chris J. Oram","guid":"50371574-eb37-429d-98dd-072ec0fbf450","individualid":1478923,"phonetype1":"780-298-5800","phonetype2":"","phonetype3":"","phonetype4":"780-459-4240","phonetype5":"","websitetype1":"http://www.beststeprealestateservicesltd.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109851","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Chris","lastname":"Oram","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:50","updated_at":"2017-08-11 00:13:50"},{"id":1896,"name":"Cayden T. Stoddart","guid":"2c19811b-6a01-434f-be49-5f767ed907ec","individualid":2009372,"phonetype1":"780-966-8996","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116944","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cayden","lastname":"Stoddart","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:50","updated_at":"2017-08-11 00:13:50"},{"id":1897,"name":"Shelly D. Steckler","guid":"31889ba7-6169-4d1f-adca-36d5786ec117","individualid":1479378,"phonetype1":"780-720-6605","phonetype2":"","phonetype3":"","phonetype4":"780-439-8766","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115702","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Shelly","lastname":"Steckler","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:50","updated_at":"2017-08-11 00:13:50"},{"id":1898,"name":"Barry Berhe","guid":"24fa107f-58c4-4aab-939e-dabac28014ea","individualid":1689161,"phonetype1":"780-457-3777","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.edmontonrealproperty.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112016","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barry","lastname":"Berhe","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:51","updated_at":"2017-08-11 00:13:51"},{"id":1899,"name":"Jay A. Herrick","guid":"7fdf5622-2e2d-47b0-a222-cbf14c11df66","individualid":1800361,"phonetype1":"780-903-4636","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.jayherrick.com","websitetype2":"https://m.facebook.com/jayherrickrealestateteam/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733618","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1800361.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jay","lastname":"Herrick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:51","updated_at":"2017-08-11 00:13:51"},{"id":1900,"name":"Mike Peric","guid":"29f8854f-2840-45a3-bd5a-2619c3f2b05e","individualid":1597787,"phonetype1":"780-497-8802","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.mikeperic.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398478916","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Mike","lastname":"Peric","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:51","updated_at":"2017-08-11 00:13:51"},{"id":1901,"name":"Jason A. Avedon-Savage","guid":"013aebcd-5fb5-4399-b812-bf726288aaba","individualid":2022418,"phonetype1":"780-297-9525","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://jasonavedon.remax.ca","websitetype2":"","websitetype3":"https://www.linkedin.com/in/jasonavedon/","websitetype4":"https://twitter.com/Jasonavedon","websitetype5":"","email1":"399688866","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1302193.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Avedon-Savage","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:51","updated_at":"2017-08-11 00:13:51"},{"id":1902,"name":"Sima Singh","guid":"94b16f5a-6316-4968-b1e3-3f8d0ecdc0b6","individualid":2037227,"phonetype1":"780-266-1530","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402117961","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sima","lastname":"Singh","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:52","updated_at":"2017-08-11 00:13:52"},{"id":1903,"name":"Muhammad Zaheer","guid":"9e4253f4-e98d-4548-a4b4-5d319fd310fe","individualid":1834052,"phonetype1":"780-604-5254","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398143799","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1196617.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Muhammad","lastname":"Zaheer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:52","updated_at":"2017-08-11 00:13:52"},{"id":1904,"name":"Nirmal S. Bains","guid":"643a76d3-dfcb-4fb6-a3ac-5251dfde37b2","individualid":2024249,"phonetype1":"780-405-6037","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397363254","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Nirmal","lastname":"Bains","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:52","updated_at":"2017-08-11 00:13:52"},{"id":1905,"name":"Laura M. Labonte-Mckay","guid":"a9b93edb-3e5c-4b35-9a37-4214d7a09702","individualid":1596118,"phonetype1":"780-278-8606","phonetype2":"","phonetype3":"","phonetype4":"780-467-3772","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121105","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1156475.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Laura","lastname":"Labonte-Mckay","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:52","updated_at":"2017-08-11 00:13:52"},{"id":1906,"name":"Stewart H. Kuzyk","guid":"651d1c64-1f38-430d-ac3a-417f2b0a9d10","individualid":1572463,"phonetype1":"780-266-5478","phonetype2":"","phonetype3":"","phonetype4":"780-998-0344","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109358","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1151925.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Stewart","lastname":"Kuzyk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:52","updated_at":"2017-08-11 00:13:52"},{"id":1907,"name":"Sukhdeep K. Kahlon","guid":"694d0ff0-5cb2-4284-813f-94b7c91c999a","individualid":1945911,"phonetype1":"780-700-8817","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.polarissells.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111679","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sukhdeep","lastname":"Kahlon","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:52","updated_at":"2017-08-11 00:13:52"},{"id":1908,"name":"Jim O'Brien","guid":"166d1b81-2036-419d-87dc-f166afe0fb13","individualid":2025578,"phonetype1":"587-599-3627","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"https://www.facebook.com/Jim-OBrien-Royal-LePage-Noralta-Real-Estate-745325125617053/posts/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397849021","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jim","lastname":"O'Brien","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1909,"name":"Pam Smyth","guid":"37222f1c-5e48-4fe0-bcf1-a2234a9e6933","individualid":1479334,"phonetype1":"780-719-2304","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.pamsmyth.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112180","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011864.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Pam","lastname":"Smyth","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1910,"name":"Doug D. Carlyle","guid":"a7fb8b74-1e8c-46df-94ac-adb46c372fc9","individualid":2007061,"phonetype1":"780-999-6867","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.sold780.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396116703","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Doug","lastname":"Carlyle","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1911,"name":"Parshotam Dhaliwal","guid":"2dd985c0-b4d7-4b06-9515-9dad94790432","individualid":1959393,"phonetype1":"780-604-5124","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://parshdhaliwalproperties.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602643","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Parshotam","lastname":"Dhaliwal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1912,"name":"Dawn Loomis","guid":"cd4b30b9-1534-4eaa-8aec-c7568baa30c2","individualid":1596953,"phonetype1":"780-986-6588","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112587","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Dawn","lastname":"Loomis","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1913,"name":"Arnaldo C. Espiritu","guid":"b9d5a738-7023-4bea-8dd9-8986c56d77e1","individualid":1485159,"phonetype1":"780-717-9711","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112287","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Arnaldo","lastname":"Espiritu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1914,"name":"Eva B. Moscicki","guid":"73bebbe5-85d7-4337-9b16-f75c040db326","individualid":1478826,"phonetype1":"780-922-8000","phonetype2":"","phonetype3":"","phonetype4":"780-756-9991","phonetype5":"","websitetype1":"http://eva.realtor","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688355","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Eva","lastname":"Moscicki","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1915,"name":"Simon Roa","guid":"cebd7149-e827-48ce-9b11-ad3d2b290bd3","individualid":1925864,"phonetype1":"780-906-8933","phonetype2":"","phonetype3":"","phonetype4":"780-732-0968","phonetype5":"","websitetype1":"http://theicon360.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111934","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1925864.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Simon","lastname":"Roa","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:53","updated_at":"2017-08-11 00:13:53"},{"id":1916,"name":"Warren J. Pratt","guid":"089fdc44-30b2-4328-a7f6-8b2b334dd4c8","individualid":1934039,"phonetype1":"780-952-3985","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123492","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Warren","lastname":"Pratt","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:54","updated_at":"2017-08-11 00:13:54"},{"id":1917,"name":"Cecille L. Boyne","guid":"d50adb20-7a3a-43d2-b636-d734fe327ab2","individualid":1477469,"phonetype1":"780-914-3630","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.boynetosell.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398803462","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Cecille","lastname":"Boyne","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:54","updated_at":"2017-08-11 00:13:54"},{"id":1918,"name":"Luke A. Flanagan","guid":"7165cbe1-43f4-4eb6-a2a2-45d1fded360c","individualid":1477916,"phonetype1":"780-445-4297","phonetype2":"","phonetype3":"","phonetype4":"780-435-0100","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108831","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011006.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Luke","lastname":"Flanagan","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:54","updated_at":"2017-08-11 00:13:54"},{"id":1919,"name":"John A. Connor","guid":"c70b7d5d-dd71-483d-bc3b-63f9a1ea85e8","individualid":1923812,"phonetype1":"780-991-7998","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.JohnConnor.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112653","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"John","lastname":"Connor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:54","updated_at":"2017-08-11 00:13:54"},{"id":1920,"name":"Tony S. Kailey","guid":"d950b5ea-347a-4117-8276-1b77568d04eb","individualid":1478301,"phonetype1":"780-937-5423","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601548","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Tony","lastname":"Kailey","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:54","updated_at":"2017-08-11 00:13:54"},{"id":1921,"name":"Maria Raj","guid":"60e3ac37-45a3-4378-9ee7-b24971ef8073","individualid":1479069,"phonetype1":"780-478-7791","phonetype2":"","phonetype3":"","phonetype4":"780-473-0824","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601044","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Maria","lastname":"Raj","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:54","updated_at":"2017-08-11 00:13:54"},{"id":1922,"name":"Raman Bains","guid":"867d5e40-3ff4-4977-acad-fdd879d69a77","individualid":1992473,"phonetype1":"780-904-7075","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115910","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Raman","lastname":"Bains","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1923,"name":"Heidi Gillespie","guid":"83759867-e323-4c2d-a1fc-4d6538a1f38f","individualid":1478005,"phonetype1":"780-718-7502","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398107853","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Heidi","lastname":"Gillespie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1924,"name":"Luc Cote","guid":"9b5e0192-87f6-4685-ad15-eeb9545ed8a7","individualid":1984626,"phonetype1":"780-934-8333","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.albertaonfire.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118478","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Luc","lastname":"Cote","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1925,"name":"Sheryl L. Grier","guid":"a6f2ab63-dfaa-46f3-87c8-2ccc05769b43","individualid":1821487,"phonetype1":"780-437-2030","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396108897","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1821487.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Sheryl","lastname":"Grier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1926,"name":"Amiraj Jawanda","guid":"59f1156a-9eca-43ad-a9b7-342a41de4ca6","individualid":2027540,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398387433","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1306940.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Amiraj","lastname":"Jawanda","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1927,"name":"Kulwinder S. Toor","guid":"a93147d2-2fb2-430b-9714-b76e3b15ca0e","individualid":1479521,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398829216","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kulwinder","lastname":"Toor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1928,"name":"Lawrence J. Lemesurier","guid":"4899d8fe-cdb7-4588-94f8-893aa3c3ec2b","individualid":1596601,"phonetype1":"780-218-1957","phonetype2":"","phonetype3":"","phonetype4":"780-963-5299","phonetype5":"","websitetype1":"http://www.benandlawrence.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398551285","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Lawrence","lastname":"Lemesurier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1929,"name":"Benjamin N. Jespersen","guid":"5c233c80-028f-4007-9fe8-ac391312d101","individualid":1570302,"phonetype1":"780-668-4418","phonetype2":"","phonetype3":"","phonetype4":"780-963-5299","phonetype5":"","websitetype1":"http://www.benandlawrence.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398452271","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Benjamin","lastname":"Jespersen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1930,"name":"Stephen L. Beggs","guid":"b29efab9-577d-4093-837a-da8a12ca0f3f","individualid":2024643,"phonetype1":"780-720-7220","phonetype2":"","phonetype3":"","phonetype4":"780-484-3690","phonetype5":"","websitetype1":"http://www.stevebeggs.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398054811","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Stephen","lastname":"Beggs","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1931,"name":"Rachelle R. Cholak","guid":"cb337061-b719-4f02-bfa1-b12951522f03","individualid":2030699,"phonetype1":"780-691-0061","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400681993","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Rachelle","lastname":"Cholak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:55","updated_at":"2017-08-11 00:13:55"},{"id":1932,"name":"Angela N. Deblois","guid":"ca84632f-0e9c-4b3f-98a2-be730c3d420e","individualid":1947277,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-962-9699","phonetype5":"","websitetype1":"http://www.lilaloliferealty.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268996","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1947277.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Angela","lastname":"Deblois","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:56","updated_at":"2017-08-11 00:13:56"},{"id":1933,"name":"Manjeet S. Sandhu","guid":"c3d78048-2313-4d29-910b-0f228c8a531a","individualid":1936854,"phonetype1":"780-951-5155","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402747377","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Manjeet","lastname":"Sandhu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:56","updated_at":"2017-08-11 00:13:56"},{"id":1934,"name":"Leah Duvall","guid":"21b05f9b-7de8-4b7a-90ce-5097d689b32c","individualid":1913261,"phonetype1":"780-270-4153","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"http://www.leahduvall.com","websitetype2":"https://www.facebook.com/pg/leahduvalledmonton","websitetype3":"https://ca.linkedin.com/in/leahduvall","websitetype4":"https://twitter.com/Leah_Duvall","websitetype5":"","email1":"398241805","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1223536.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Leah","lastname":"Duvall","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:56","updated_at":"2017-08-11 00:13:56"},{"id":1935,"name":"Vanessa G. Cabaniang","guid":"782ec7cb-f57d-4668-870c-04e7d685fabc","individualid":1923811,"phonetype1":"780-862-8966","phonetype2":"","phonetype3":"","phonetype4":"587-523-8578","phonetype5":"","websitetype1":"http://EdmontonResidential.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402117905","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1228230.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Vanessa","lastname":"Cabaniang","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:56","updated_at":"2017-08-11 00:13:56"},{"id":1936,"name":"Mary R. Clennell","guid":"a0b5b375-8862-4e32-ab66-18f361ebcb38","individualid":1477647,"phonetype1":"780-448-1766","phonetype2":"","phonetype3":"","phonetype4":"780-444-9391","phonetype5":"","websitetype1":"http://www.maryclennell.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117679","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010868.gif","position":"Broker","permitfreetextemail":0,"firstname":"Mary","lastname":"Clennell","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:56","updated_at":"2017-08-11 00:13:56"},{"id":1937,"name":"Brian C. Cyr","guid":"0a7a99a8-dc82-4b55-bbc4-ebb84f65a7e2","individualid":1992066,"phonetype1":"780-458-8300","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122111","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brian","lastname":"Cyr","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:57","updated_at":"2017-08-11 00:13:57"},{"id":1938,"name":"Gil Whyte","guid":"84be9afe-9728-4a4c-8b8b-bb432df49088","individualid":1883862,"phonetype1":"780-887-6942","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.gilwhyte.com","websitetype2":"https://www.facebook.com/gilwhyteedmontonrealestate/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398662009","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gil","lastname":"Whyte","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:57","updated_at":"2017-08-11 00:13:57"},{"id":1939,"name":"Robert P. Halpern","guid":"0df9308f-e10c-41b4-a846-ed5817111d9d","individualid":1478097,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400360746","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Robert","lastname":"Halpern","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:57","updated_at":"2017-08-11 00:13:57"},{"id":1940,"name":"Patrick A. Stewart","guid":"facadb59-f95f-4c48-a201-de8e768e2da1","individualid":1676839,"phonetype1":"780-850-5478","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"http://www.patrickstewart.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122219","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Patrick","lastname":"Stewart","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:57","updated_at":"2017-08-11 00:13:57"},{"id":1941,"name":"Mark D. Evernden","guid":"f1ccc72e-9b9a-4e24-a8b3-a3ee10c407ed","individualid":1668499,"phonetype1":"403-829-3776","phonetype2":"","phonetype3":"","phonetype4":"","phonetype5":"","websitetype1":"http://markdevernden.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402307739","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1169780.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Mark","lastname":"Evernden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:58","updated_at":"2017-08-11 00:13:58"},{"id":1942,"name":"Sunil M. Bhambhani","guid":"ac218689-06ad-4876-9371-fc0f411b5e7a","individualid":1527004,"phonetype1":"","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601795","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sunil","lastname":"Bhambhani","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:58","updated_at":"2017-08-11 00:13:58"},{"id":1943,"name":"Tyson V. Moroz","guid":"87337249-47f1-4508-ab00-0f092ea3ad42","individualid":1749741,"phonetype1":"780-920-0550","phonetype2":"","phonetype3":"","phonetype4":"780-962-8019","phonetype5":"","websitetype1":"http://www.TysonMoroz.Com","websitetype2":"https://www.facebook.com/RoyalLePage.ca/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398838946","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1181527.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tyson","lastname":"Moroz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:59","updated_at":"2017-08-11 00:13:59"},{"id":1944,"name":"Keith L. Vanderzyde","guid":"5c7d15c4-5934-4b0e-9e3c-696362b4dddc","individualid":2022870,"phonetype1":"780-717-2261","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www,keithv.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398733790","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Keith","lastname":"Vanderzyde","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:59","updated_at":"2017-08-11 00:13:59"},{"id":1945,"name":"Tom A. Fleming","guid":"412a2c0b-b3d5-44a8-a86c-a6a559aef848","individualid":1477918,"phonetype1":"780-720-6014","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"http://www.tomafleming.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396111145","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477918.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Tom","lastname":"Fleming","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:59","updated_at":"2017-08-11 00:13:59"},{"id":1946,"name":"Theresa M. Bryden","guid":"93edec8d-55bc-42e0-a60e-d603ed754f29","individualid":1477511,"phonetype1":"780-441-9264","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"http://www.theresabryden.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396113894","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011940.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Theresa","lastname":"Bryden","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:59","updated_at":"2017-08-11 00:13:59"},{"id":1947,"name":"Natalie M. MacQuarrie","guid":"0d9d7d1f-2edf-49ae-bff7-75fd6b93d811","individualid":1638705,"phonetype1":"780-288-0777","phonetype2":"","phonetype3":"","phonetype4":"780-929-9272","phonetype5":"","websitetype1":"http://www.nataliemacquarrie.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110972","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Natalie","lastname":"MacQuarrie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:59","updated_at":"2017-08-11 00:13:59"},{"id":1948,"name":"Kevin W. Fletcher","guid":"2986ef94-e657-4653-85ac-ef56b2183df6","individualid":1477921,"phonetype1":"780-460-1331","phonetype2":"","phonetype3":"","phonetype4":"780-458-5664","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396130277","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Kevin","lastname":"Fletcher","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:13:59","updated_at":"2017-08-11 00:13:59"},{"id":1949,"name":"Korey L. Suess","guid":"70ffdf0c-e14f-4101-8840-2911868a463a","individualid":1806497,"phonetype1":"780-691-6391","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.koreysuess.com","websitetype2":"https://www.facebook.com/korey.suess","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398785741","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Korey","lastname":"Suess","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:00","updated_at":"2017-08-11 00:14:00"},{"id":1950,"name":"Courtney L. Harcott","guid":"32977a66-6ff8-4251-a37f-244184818ca3","individualid":2009359,"phonetype1":"780-705-5393","phonetype2":"","phonetype3":"","phonetype4":"780-425-3765","phonetype5":"","websitetype1":"http://www.liveinitia.ca/company/our-realtors/courtney-harcott-3/","websitetype2":"https://www.facebook.com/Courtneyrealestate/","websitetype3":"https://www.linkedin.com/in/courtney-harcott-468315a/","websitetype4":"","websitetype5":"","email1":"398759974","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1291171.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Courtney","lastname":"Harcott","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:00","updated_at":"2017-08-11 00:14:00"},{"id":1951,"name":"Constance Braun","guid":"b54716e9-2188-4e7c-9c19-312943bdb021","individualid":1477479,"phonetype1":"780-907-9416","phonetype2":"","phonetype3":"","phonetype4":"780-431-1277","phonetype5":"","websitetype1":"http://www.weselledmonton.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119546","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477479.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Constance","lastname":"Braun","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:00","updated_at":"2017-08-11 00:14:00"},{"id":1952,"name":"Trevor Hotz","guid":"4765bc54-2aa3-4c53-99d1-ce708371376e","individualid":1478204,"phonetype1":"780-668-9922","phonetype2":"","phonetype3":"","phonetype4":"780-457-2194","phonetype5":"","websitetype1":"http://www.trevorhotz.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110182","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Trevor","lastname":"Hotz","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:00","updated_at":"2017-08-11 00:14:00"},{"id":1953,"name":"Shirley Nguyen","guid":"a214f688-d8ff-4ffb-8c10-b2f87277c77e","individualid":1597587,"phonetype1":"780-902-8113","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"http://www.shirleynguyen.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398812100","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1156905.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Shirley","lastname":"Nguyen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:00","updated_at":"2017-08-11 00:14:00"},{"id":1954,"name":"Jongsung Baik","guid":"b5409b1b-a396-4055-9825-6517b2205275","individualid":1975432,"phonetype1":"780-218-4549","phonetype2":"","phonetype3":"","phonetype4":"780-457-5240","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602732","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1262134.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Jongsung","lastname":"Baik","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:00","updated_at":"2017-08-11 00:14:00"},{"id":1955,"name":"Sharon A. Trelenberg","guid":"ac2461a7-cf3f-4f72-a5df-29c7206c548b","individualid":1479535,"phonetype1":"780-490-5006","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361194","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sharon","lastname":"Trelenberg","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1956,"name":"Jennifer N. Switzer","guid":"2f81d579-798d-4231-9c08-8a5f16f93df6","individualid":1599892,"phonetype1":"780-910-5257","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.homesandgardensrealestate.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396110254","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jennifer","lastname":"Switzer","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1957,"name":"Marv Soroka","guid":"86b3bc3f-2e33-4e8d-8ab7-30317f8e7821","individualid":1479346,"phonetype1":"780-487-3166","phonetype2":"","phonetype3":"","phonetype4":"780-444-8017","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396125168","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Marv","lastname":"Soroka","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1958,"name":"Joseph Yeo","guid":"2f5a3ea0-a6e4-42c3-a56b-40cc61fc6b71","individualid":1479745,"phonetype1":"780-498-6268","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"401268666","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joseph","lastname":"Yeo","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1959,"name":"Avdulla Avdullai","guid":"2334f87c-468b-44eb-820c-c443118f7e13","individualid":1477290,"phonetype1":"780-710-5552","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396112854","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Avdulla","lastname":"Avdullai","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1960,"name":"Jamie C. Kinney","guid":"1da5c7e3-f8a3-4384-a9f7-a82d84389ec4","individualid":1923966,"phonetype1":"780-240-2145","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://jamiekinney.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396114655","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jamie","lastname":"Kinney","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1961,"name":"Cory V. Clendenning","guid":"f3004368-e49c-4d34-9a8d-5fa2f236767a","individualid":1477646,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://www.coryclendenning.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121037","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477646.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cory","lastname":"Clendenning","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1962,"name":"Fred W. Kempf","guid":"6529362f-ae24-4487-9ff3-26b1e7f1592c","individualid":1478334,"phonetype1":"780-298-8087","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117866","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010914.gif","position":"Associate","permitfreetextemail":0,"firstname":"Fred","lastname":"Kempf","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1963,"name":"Steven P. Florchuk","guid":"88ca9939-de04-4cc2-9b3d-fca4e66349f5","individualid":1588482,"phonetype1":"780-998-7801","phonetype2":"","phonetype3":"","phonetype4":"780-998-7400","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120104","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1588482.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Steven","lastname":"Florchuk","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:01","updated_at":"2017-08-11 00:14:01"},{"id":1964,"name":"Cal Lange","guid":"75018a55-17d8-4d98-86ed-aacc03bbc13b","individualid":1478465,"phonetype1":"780-220-0816","phonetype2":"","phonetype3":"","phonetype4":"780-437-5256","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120024","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Cal","lastname":"Lange","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:02","updated_at":"2017-08-11 00:14:02"},{"id":1965,"name":"Elyse G. Vodnak","guid":"6a432f23-2989-47b6-b5e7-17bc9bb5c573","individualid":1926225,"phonetype1":"780-862-4663","phonetype2":"","phonetype3":"","phonetype4":"780-464-7873","phonetype5":"","websitetype1":"http://www.elysevodnak.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109308","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Elyse","lastname":"Vodnak","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:02","updated_at":"2017-08-11 00:14:02"},{"id":1966,"name":"Pam Gill","guid":"fbdfb7f4-bc84-47d6-83f3-364da7413cff","individualid":1478002,"phonetype1":"780-455-4088","phonetype2":"","phonetype3":"","phonetype4":"780-455-4048","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119150","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Pam","lastname":"Gill","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:02","updated_at":"2017-08-11 00:14:02"},{"id":1967,"name":"Amanda Cuthbert","guid":"4e8fd224-e040-4152-9ce7-aa6196082845","individualid":2033268,"phonetype1":"780-881-1000","phonetype2":"","phonetype3":"","phonetype4":"780-988-4067","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400432607","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1310359.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Amanda","lastname":"Cuthbert","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:02","updated_at":"2017-08-11 00:14:02"},{"id":1968,"name":"Cheryl L. Kurek","guid":"10fb80a9-0e01-488f-972d-8d2ada16024a","individualid":1566128,"phonetype1":"780-720-7953","phonetype2":"","phonetype3":"","phonetype4":"780-406-8787","phonetype5":"","websitetype1":"http://www.cherylkurek.com","websitetype2":"https://www.facebook.com/cherylkurekrealtor/?ref=aymt_homepage_panel","websitetype3":"https://www.linkedin.com/in/cheryl-kurek-1934184/","websitetype4":"https://twitter.com/ckurek","websitetype5":"","email1":"396732225","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1149011.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Cheryl","lastname":"Kurek","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:02","updated_at":"2017-08-11 00:14:02"},{"id":1969,"name":"Timothy L. Regnier","guid":"51a6d1ad-58d5-4e01-b87c-4a772cd45052","individualid":1892557,"phonetype1":"780-938-8383","phonetype2":"","phonetype3":"","phonetype4":"780-756-9991","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688645","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1892557.jpeg","position":"Associate","permitfreetextemail":0,"firstname":"Timothy","lastname":"Regnier","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:02","updated_at":"2017-08-11 00:14:02"},{"id":1970,"name":"Anthony Wait","guid":"b734f2a0-7028-4416-9b59-4b39db0c4e1b","individualid":1479617,"phonetype1":"780-720-5110","phonetype2":"","phonetype3":"","phonetype4":"780-449-3499","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124520","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1115540.gif","position":"Associate","permitfreetextemail":0,"firstname":"Anthony","lastname":"Wait","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:03","updated_at":"2017-08-11 00:14:03"},{"id":1971,"name":"Carol J. Berglund","guid":"62a5966e-cdb7-46dc-ad8f-cc98e6e5f3a4","individualid":1673257,"phonetype1":"780-439-7000","phonetype2":"","phonetype3":"","phonetype4":"780-439-7248","phonetype5":"","websitetype1":"http://www.carolberglund.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117343","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1673257.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Carol","lastname":"Berglund","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:03","updated_at":"2017-08-11 00:14:03"},{"id":1972,"name":"Richard B. Angus","guid":"35c27a65-fc8e-45af-92c1-7651c0455c44","individualid":1477267,"phonetype1":"780-455-4181","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361112","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1477267.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Richard","lastname":"Angus","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:03","updated_at":"2017-08-11 00:14:03"},{"id":1973,"name":"Malissa Jabbour","guid":"1be7f239-4451-456b-af97-f5bdcc4933df","individualid":1992861,"phonetype1":"780-265-3443","phonetype2":"","phonetype3":"","phonetype4":"780-456-5657","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396122146","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Malissa","lastname":"Jabbour","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:04","updated_at":"2017-08-11 00:14:04"},{"id":1974,"name":"LUKE BIBEAU","guid":"2997f8c4-a0c2-4557-9fce-84fa15eed623","individualid":1937027,"phonetype1":"780-742-6071","phonetype2":"","phonetype3":"","phonetype4":"866-654-7560","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399163897","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1235795.jpg","position":"Associate","permitfreetextemail":0,"firstname":"LUKE","lastname":"BIBEAU","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:04","updated_at":"2017-08-11 00:14:04"},{"id":1975,"name":"GAIL BIBEAU","guid":"0971c1c1-7272-433f-99dc-2dd529d49fa3","individualid":1435307,"phonetype1":"780-799-1498","phonetype2":"","phonetype3":"","phonetype4":"780-790-1456","phonetype5":"","websitetype1":"http://www.gailbibeau.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"402564693","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1012461.jpg","position":"Associate Broker","permitfreetextemail":0,"firstname":"GAIL","lastname":"BIBEAU","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:04","updated_at":"2017-08-11 00:14:04"},{"id":1976,"name":"Alexia Ferrari","guid":"652e4cd1-0019-488c-bde5-8a1d3f26a7c0","individualid":2008363,"phonetype1":"587-990-5556","phonetype2":"","phonetype3":"","phonetype4":"780-430-7283","phonetype5":"","websitetype1":"http://www.alexiaferrari.ca","websitetype2":"","websitetype3":"","websitetype4":"https://twitter.com/ferrariproperty","websitetype5":"","email1":"396707944","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/2008363.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Alexia","lastname":"Ferrari","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:04","updated_at":"2017-08-11 00:14:04"},{"id":1977,"name":"Jacob C. Cheung","guid":"9c41377a-8df7-4d3c-bb35-4993f8795961","individualid":1477597,"phonetype1":"780-970-8138","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396117612","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jacob","lastname":"Cheung","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1978,"name":"Kip A. Matheson","guid":"365f590d-6c23-41a2-ba31-1f2e01c33e24","individualid":2030845,"phonetype1":"780-232-7024","phonetype2":"","phonetype3":"","phonetype4":"780-431-5624","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400682021","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Kip","lastname":"Matheson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1979,"name":"Erin Best","guid":"ba05fe54-f4e8-42e0-af14-47f84d4c623f","individualid":1971224,"phonetype1":"780-460-8558","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396115854","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Erin","lastname":"Best","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1980,"name":"Trudi M. Pixley","guid":"fd75d8ef-a006-4430-9741-b923afc65e01","individualid":1536657,"phonetype1":"780-916-9542","phonetype2":"","phonetype3":"","phonetype4":"780-455-1609","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396120155","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1144955.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Trudi","lastname":"Pixley","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1981,"name":"Joanne Liu","guid":"d4c886f3-1576-4ebc-8e88-447aa4979737","individualid":1911263,"phonetype1":"780-298-8814","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"http://www.joanneliu.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602424","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Joanne","lastname":"Liu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1982,"name":"Jones Yao-Chung Liu","guid":"31ded319-9df3-4d93-9fac-c9e4b2fb149e","individualid":1983251,"phonetype1":"780-278-8228","phonetype2":"","phonetype3":"","phonetype4":"780-436-6178","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124601","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jones Yao-Chung","lastname":"Liu","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1983,"name":"Heather E. Lachance","guid":"c099a77e-9cd7-43ed-aba1-aabefe6cd07b","individualid":1478448,"phonetype1":"780-446-9336","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.lachanceteam.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118491","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478448.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Heather","lastname":"Lachance","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1984,"name":"Alice M. Stavropoulos","guid":"8b397f9f-2d8f-4d0d-9dc9-7fa63b67127e","individualid":1479375,"phonetype1":"780-452-7861","phonetype2":"","phonetype3":"","phonetype4":"780-452-3716","phonetype5":"","websitetype1":"http://alicestavro.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396123820","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1011973.gif","position":"Associate","permitfreetextemail":0,"firstname":"Alice","lastname":"Stavropoulos","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:05","updated_at":"2017-08-11 00:14:05"},{"id":1985,"name":"Arlene J. Herrick","guid":"b8294121-033b-4850-aa1a-5ac5ebce5f9e","individualid":1979082,"phonetype1":"780-456-7399","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.jayherrick.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396124583","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1979082.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Arlene","lastname":"Herrick","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:06","updated_at":"2017-08-11 00:14:06"},{"id":1986,"name":"Fern J. Proulx","guid":"16e404e2-d9e3-4670-8f5b-704d67d415c6","individualid":1479048,"phonetype1":"780-919-6111","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://fernproulx.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398661873","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Fern","lastname":"Proulx","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:06","updated_at":"2017-08-11 00:14:06"},{"id":1987,"name":"Daylen P. Proulx","guid":"119f84b1-414f-4f55-bcfc-d5ade373943c","individualid":1569934,"phonetype1":"780-887-1346","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.fernproulx.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601888","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Daylen","lastname":"Proulx","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:06","updated_at":"2017-08-11 00:14:06"},{"id":1988,"name":"Syed E. Afzal","guid":"bb147ec4-87b2-4e10-ae72-821f0e96ee5f","individualid":1529709,"phonetype1":"780-450-6300","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601799","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Syed","lastname":"Afzal","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:06","updated_at":"2017-08-11 00:14:06"},{"id":1989,"name":"Barb Thomsen","guid":"07657cae-8b46-413d-8e52-ea7d54802263","individualid":1479499,"phonetype1":"780-990-6138","phonetype2":"","phonetype3":"","phonetype4":"780-460-9694","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396121470","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Barb","lastname":"Thomsen","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:06","updated_at":"2017-08-11 00:14:06"},{"id":1990,"name":"Sheldon J. Johnston","guid":"09fe038b-7342-45f5-b740-11df264303c9","individualid":1478287,"phonetype1":"780-486-8655","phonetype2":"","phonetype3":"","phonetype4":"780-486-8654","phonetype5":"","websitetype1":"http://www.livrealestate.ca","websitetype2":"http://www.facebook.com/edmontonrealestateblog","websitetype3":"http://ca.linkedin.com/in/edmontonsheldonjohnston","websitetype4":"https://twitter.com/edmontonsheldon","websitetype5":"","email1":"398733400","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1010092.jpg","position":"Broker","permitfreetextemail":0,"firstname":"Sheldon","lastname":"Johnston","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:06","updated_at":"2017-08-11 00:14:06"},{"id":1991,"name":"Anthony Loughlean","guid":"e417d68f-89a8-471c-8ef7-8a0cf37da708","individualid":1478572,"phonetype1":"780-965-6156","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"http://www.anthonyhomesales.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601700","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1478572.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Anthony","lastname":"Loughlean","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:06","updated_at":"2017-08-11 00:14:06"},{"id":1992,"name":"Gail B. Docken","guid":"76db822b-5b8b-4390-aea0-ccdfa7c4753f","individualid":1529241,"phonetype1":"780-490-5006","phonetype2":"","phonetype3":"","phonetype4":"780-490-5076","phonetype5":"","websitetype1":"http://www.encoresells.com","websitetype2":"https://www.facebook.com/gail.docken","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400361253","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Gail","lastname":"Docken","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":1993,"name":"Jason J. Beattie","guid":"fe08e872-3deb-4422-8162-d17523a5b899","individualid":1682178,"phonetype1":"780-439-9818","phonetype2":"","phonetype3":"","phonetype4":"780-439-1257","phonetype5":"","websitetype1":"http://www.BTGroup.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119604","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Jason","lastname":"Beattie","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":1994,"name":"Brent D. Burr","guid":"961737d8-26a2-4434-9daf-10d4c00fe734","individualid":1477523,"phonetype1":"780-430-9888","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"398331950","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Brent","lastname":"Burr","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":1995,"name":"Klaus Klingspor","guid":"51858ec7-7d46-40b0-8497-59c6208f4dc3","individualid":1478368,"phonetype1":"780-718-1949","phonetype2":"","phonetype3":"","phonetype4":"780-467-2897","phonetype5":"","websitetype1":"http://www.sherwoodpark.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396118513","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Klaus","lastname":"Klingspor","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":1996,"name":"Mohan Maharaj","guid":"ccda1093-a6d4-4341-ae70-399c97e0b52f","individualid":2000470,"phonetype1":"780-995-7289","phonetype2":"","phonetype3":"","phonetype4":"780-423-5501","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397672709","email2":"","email3":"","email4":"","photo":"","position":"Broker","permitfreetextemail":0,"firstname":"Mohan","lastname":"Maharaj","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":1997,"name":"Matt Donahue","guid":"1242ae50-3c3b-407d-a973-b95b51eba021","individualid":1661713,"phonetype1":"780-660-6288","phonetype2":"","phonetype3":"","phonetype4":"780-450-6670","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"400279403","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Matt","lastname":"Donahue","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":1998,"name":"Edward A. Basaraba","guid":"6a0d802f-cf34-4d23-beef-700e33c7905a","individualid":1477336,"phonetype1":"780-498-6585","phonetype2":"","phonetype3":"","phonetype4":"780-447-1695","phonetype5":"","websitetype1":"http://www.pinnacleridge.ca","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397601011","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Edward","lastname":"Basaraba","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":1999,"name":"Aron T. Scraba","guid":"7791d021-0b39-4b51-a109-03eda99a32f1","individualid":1784936,"phonetype1":"780-406-0099","phonetype2":"","phonetype3":"","phonetype4":"780-471-8058","phonetype5":"","websitetype1":"http://www.aronscraba.com","websitetype2":"https://www.facebook.com/AronScraba/","websitetype3":"","websitetype4":"","websitetype5":"","email1":"399688610","email2":"","email3":"","email4":"","photo":"https://cdn.realtor.ca/individual/lowres/1188491.jpg","position":"Associate","permitfreetextemail":0,"firstname":"Aron","lastname":"Scraba","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:07","updated_at":"2017-08-11 00:14:07"},{"id":2000,"name":"Ron G. Pollock","guid":"6e71be56-4ad7-4f4c-b680-f6fc1391e7c4","individualid":1479011,"phonetype1":"780-910-6540","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"http://www.pollockproperties.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119999","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ron","lastname":"Pollock","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:08","updated_at":"2017-08-11 00:14:08"},{"id":2001,"name":"Ravi Thakur","guid":"6ef76385-3b1c-40a7-abac-b5835e7ede5e","individualid":1999283,"phonetype1":"780-994-1646","phonetype2":"","phonetype3":"","phonetype4":"780-481-1144","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"397602928","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Ravi","lastname":"Thakur","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:08","updated_at":"2017-08-11 00:14:08"},{"id":2002,"name":"Sweg S. Deol","guid":"bfb85fe1-f27a-4706-972d-3f363d765378","individualid":1477755,"phonetype1":"780-951-9873","phonetype2":"","phonetype3":"","phonetype4":"780-436-9902","phonetype5":"","websitetype1":"","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396119059","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Sweg","lastname":"Deol","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:08","updated_at":"2017-08-11 00:14:08"},{"id":2003,"name":"Becky Benson","guid":"5a4407ff-3d23-4679-8411-586518c5ba33","individualid":1571498,"phonetype1":"780-905-8690","phonetype2":"","phonetype3":"","phonetype4":"780-458-6619","phonetype5":"","websitetype1":"http://www.beckybenson.com","websitetype2":"","websitetype3":"","websitetype4":"","websitetype5":"","email1":"396109916","email2":"","email3":"","email4":"","photo":"","position":"Associate","permitfreetextemail":0,"firstname":"Becky","lastname":"Benson","corporationdisplaytypeid":0,"permitshowlistinglink":1,"active":1,"created_at":"2017-08-11 00:14:08","updated_at":"2017-08-11 00:14:08"}]

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(239);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(61)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/autoprefixer-loader/index.js!./App.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/autoprefixer-loader/index.js!./App.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(60)(undefined);
// imports


// module
exports.push([module.i, ".App {\r\n  text-align: center;\r\n}\r\n\r\n.App-logo {\r\n  -webkit-animation: App-logo-spin infinite 20s linear;\r\n          animation: App-logo-spin infinite 20s linear;\r\n  height: 80px;\r\n}\r\n\r\n.App-header {\r\n  background-color: #222;\r\n  height: 150px;\r\n  padding: 20px;\r\n  color: white;\r\n}\r\n\r\n.App-intro {\r\n  font-size: large;\r\n}\r\n\r\nul\r\n{\r\nlist-style-type: none;\r\n}\r\n\r\n\r\n@-webkit-keyframes App-logo-spin {\r\n  from { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\r\n  to { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\r\n}\r\n\r\n\r\n@keyframes App-logo-spin {\r\n  from { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\r\n  to { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\r\n}\r\n", ""]);

// exports


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = register;
exports.unregister = unregister;
// In production, we register a service worker to serve assets from local cache.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on the "N+1" visit to a page, since previously
// cached resources are updated in the background.

// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.
// This link also includes instructions on opting out of this behavior.

var isLocalhost = Boolean(window.location.hostname === 'localhost' ||
// [::1] is the IPv6 localhost address.
window.location.hostname === '[::1]' ||
// 127.0.0.1/8 is considered localhost for IPv4.
window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));

function register() {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    var publicUrl = new URL(process.env.PUBLIC_URL, window.location);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', function () {
      var swUrl = process.env.PUBLIC_URL + '/service-worker.js';

      if (!isLocalhost) {
        // Is not local host. Just register service worker
        registerValidSW(swUrl);
      } else {
        // This is running on localhost. Lets check if a service worker still exists or not.
        checkValidServiceWorker(swUrl);
      }
    });
  }
}

function registerValidSW(swUrl) {
  navigator.serviceWorker.register(swUrl).then(function (registration) {
    registration.onupdatefound = function () {
      var installingWorker = registration.installing;
      installingWorker.onstatechange = function () {
        if (installingWorker.state === 'installed') {
          if (navigator.serviceWorker.controller) {
            // At this point, the old content will have been purged and
            // the fresh content will have been added to the cache.
            // It's the perfect time to display a "New content is
            // available; please refresh." message in your web app.
            console.log('New content is available; please refresh.');
          } else {
            // At this point, everything has been precached.
            // It's the perfect time to display a
            // "Content is cached for offline use." message.
            console.log('Content is cached for offline use.');
          }
        }
      };
    };
  }).catch(function (error) {
    console.error('Error during service worker registration:', error);
  });
}

function checkValidServiceWorker(swUrl) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl).then(function (response) {
    // Ensure service worker exists, and that we really are getting a JS file.
    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {
      // No service worker found. Probably a different app. Reload the page.
      navigator.serviceWorker.ready.then(function (registration) {
        registration.unregister().then(function () {
          window.location.reload();
        });
      });
    } else {
      // Service worker found. Proceed as normal.
      registerValidSW(swUrl);
    }
  }).catch(function () {
    console.log('No internet connection found. App is running in offline mode.');
  });
}

function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then(function (registration) {
      registration.unregister();
    });
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ })
/******/ ]);